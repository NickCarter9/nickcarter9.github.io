{"pages":[{"title":"About","text":"I am Nick. I have great passion to work in the computer science field.Work in Qisda Corporation as android developer. Majored in App UI Application. Here’s my first blog, sharing my research and thought. Any comment and sharing will be welcome. Links GitHub Page nickthomas55@gmail.com Technical Program Language:C/C++/C#、JAVA、Java Script、jQuery、QML、Swift、Swift UI、Kotiln、SQL Android Application:UI Design、LiveWallper(RenderScript)、Bluetooth、Bluetooth Low Energy、WiFi、Ethernet、TCP &amp; UDP、Http/Https、Customized LockScreen by xml design、Customized Launcher、SQLiteDatabase、Decrypt/Encrypt、OpenGL、Recorder、Customized Email、 ADB Command Line、JPush API、Facebook API、Twitter API、Plurk API、VLCPlayer API、SQLCipher API、Web Socket、Time Syncchronize、MQTT Server/Client Android Framework:Bluetooth、Ethernet、BT PAN Network、Customized LockScreen by xml design Android JNI Level:BT PAN Network、Simulate touch、move action by the instruction of WiFi or BT information. iOS Application:UI Design、Bluetooth Low Energy、Database、Plot Draw, Web Socket Web Development:UI Design、Kendo UI、RESTful API Employment 2013.3 - until nowQisda Corporation, Principal Engineer 2010.8 - 2013.3BenQ Corporation, Senior Engineer 2009.10 - 2010.8Research Assistant in NCCU","link":"/about/index.html"}],"posts":[{"title":"Android CardView","text":"CardView 為繼承 FrameLayout 的 Class. 向下相容需要 support v7 程式庫 : In build.gradlecompile ‘com.android.support:appcompat-v7:23.3.0’ CardView 屬性介紹 cardBackgroundColor : 背景顏色 White Black cardCornerRadius : 圓角 cardview:cardCornerRadius = “15dp”cardview:cardCornerRadius = “30dp” cardview:cardElevation : Z軸高度 cardview:cardElevation = “0dp”cardview:cardElevation = “10dp” 點擊效果 當CardView設置點擊時 可在xml 中設置 android:foreground=”?attr/selectableItemBackground” Source Code layout.xml123456789101112131415161718192021222324252627282930&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.v7.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/main_cardview&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center&quot; card_view:cardBackgroundColor=&quot;#ffffff&quot; card_view:cardCornerRadius=&quot;30dip&quot; card_view:contentPadding=&quot;10dp&quot; card_view:cardUseCompatPadding=&quot;true&quot; card_view:cardElevation=&quot;10dp&quot; android:foreground=&quot;?attr/selectableItemBackground&quot;&gt; &lt;ImageView android:id=&quot;@+id/cardview_image&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:src=&quot;@drawable/dsc_2013011902&quot; /&gt; &lt;TextView android:id=&quot;@+id/cardview_text&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;clip_horizontal&quot; android:text=&quot;@string/photo_title&quot; android:textColor=&quot;#ffffff&quot; android:background=&quot;#000000&quot; /&gt;&lt;/android.support.v7.widget.CardView&gt;","link":"/2016/05/25/2016/2016_05_25-android-cardview/"},{"title":"Android Elevation and shadows Z軸高度與陰影","text":"Android Material Design 中為了讓使用者更專注於某物件, 因此使用了3D空間的Z軸與陰影, 讓整體設計更具有立體感. 由上圖來看, 每個Menu與Sub-Menu之間有各自的高度與陰影, 使其畫面看起來具有立體感, 並且專注於最高層的Sub-Sub-Menu. Android 官方對於不同物件之間規定不同的層級, 且對於Pressed和Normal狀態也有特殊規定. Elevation (dp) Component 24 Dialog, Picker 16 Nav drawer, Right drawer, Modal bottom Sheet 12 Floating action button (FAB - pressed) 9 Sub menu (+1dp for each sub menu) 8 Bottom navigation bar, Menu, Card (when picked up), Raised button (pressed state) 6 Floating action button (FAB - resting elevation), Snackbar 4 App Bar 3 Refresh indicator, Quick entry / Search bar (scrolled state) 2 Card (resting elevation) , Raised button (resting elevation), Quick entry / Search bar (resting elevation) 1 Switch App bar : 4dp Raised button Resting state: 2dpPressed state: 8dp For desktop only, raised buttons can have an elevation of:Resting state: 0dpPressed state: 2dp Floating action button (FAB) Resting state: 6dpPressed state: 12dp Card Resting state: 2dpPressed state: 8dp On desktop, cards can have a resting elevation of 0dp and gain an elevation of 8dp on hover. Menus and sub menus Menus: 8dpSub menus: 9dp (+1 dp for each sub menu) Dialogs : 24dp Nav Drawer &amp; Right drawer : 16dp Modal bottom sheet : 16dp Refresh indicator : 3dp Quick entry/Search bar Resting state: 2dpScrolled state: 3dp Snackbar : 6dp Switch : 1dp","link":"/2016/05/25/2016/2016_05_25-android-elevation_shadows/"},{"title":"Android RippleDrawable","text":"RippleDrawable 水波紋動畫 Android 5.0 提供在點擊時, 顯示水波紋動畫, 來加強點擊效果. Step 1: 增加水波紋xml 先在drawable中增加水波紋xml : bt_ripple_background.xml bt_ripple_background.xml123&lt;ripple xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:color=&quot;#FFFF0000&quot;&gt;&lt;/ripple&gt; Step 2: 設定水波紋 在Button的背景設計上, 設定水波紋 layout.xml12345678910&lt;Button android:id=&quot;@+id/ripple_bt&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:background=&quot;@drawable/bt_ripple_background&quot; android:layout_gravity=&quot;center_horizontal&quot; android:text=&quot;Normal&quot; android:elevation=&quot;4dp&quot; /&gt; 點擊效果 水波紋動畫擴展至圓形填滿 可設定填滿效果 設置Mask, 讓水波紋填滿至四邊形大小 在drawable水波紋xml : bt_ripple_background.xml bt_ripple_background.xml12345&lt;ripple xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:color=&quot;#FFFF0000&quot;&gt; &lt;item android:id=&quot;@android:id/mask&quot; android:drawable=&quot;@android:color/white&quot; /&gt;&lt;/ripple&gt; 點擊效果 可設定預設顏色 設置Child Item Button 還未點擊前會先顯示預設背景, 當點擊後才顯示水波紋動畫.且Child Item的水波紋動畫, 亦具有Mask的效果. 在drawable水波紋xml : bt_ripple_background.xml bt_ripple_background.xml1234&lt;ripple xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:color=&quot;#FFFF0000&quot;&gt; &lt;item android:drawable=&quot;@android:color/holo_blue_light&quot; /&gt;&lt;/ripple&gt; 點擊效果 點擊時, 水波紋的顏色會與底層顏色做渲染.","link":"/2016/05/26/2016/2016_05_26-android-rippledrawable/"},{"title":"Android Button 設計","text":"Androia 5.0 將 Button 分為三個種類 Floating action button Raised button Flat button 各自的使用時機點為 Flat button : 在Layout同層中且畫面簡單的情況下使用Flat button 適用於Toolbars, Dialog, Inline, 文章的結尾 Raised button : 用於較複雜的頁面上 Floating action button: 頁面底部, 置頂按鈕","link":"/2016/05/26/2016/2016_05_26-android-button_design/"},{"title":"Android Toolbar","text":"Android 3.0 開始推出 ActionBar , 由於Google想要改善 Android 紛亂的介面設計 (設計的破碎化). 因此將 ActionBar 改為 Toorbar的設計 (界面上稱為 App Bar), 也取消了ActionBarActivity, 改為使用 AppCompatActivity. Basic Design Step 1: 新增style.xml 在 res/values/styles.xml 中新增風格 AppTheme.Toolbar.Base 並將原本的AppTheme所繼承的parent改為AppTheme.Toolbar.Base 由於主要是使用Toolbar, 所以先將ActionBar 隱藏起來, 設定windowActionBar = false styles.xml12345678&lt;resources&gt; &lt;style name=&quot;AppTheme&quot; parent=&quot;AppTheme.Toolbar.Base&quot;/&gt; &lt;style name=&quot;AppTheme.Toolbar.Base&quot; parent=&quot;Theme.AppCompat&quot;&gt; &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt; &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; Step 2: 新增toolbar 在layout中新增toolbar 並將內容設定為在ToolBar下方(目前內容只設定TextView) activity_main.xml1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.nickthomas55gmail.toolbar.MainActivity&quot;&gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/toolbar&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:layout_width=&quot;match_parent&quot; /&gt; &lt;TextView android:layout_below=&quot;@+id/toolbar&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Hello World!&quot;/&gt;&lt;/RelativeLayout&gt; Step 3: Toolbar 的宣告 在Activity中加入 Toolbar 的宣告, 再用 setSupportActionBar 設定，取代表原本的ActionBar MainActivity.java123456789101112131415import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.Toolbar;public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); }} 執行結果 顏色調配 Step 1: 設定風格 在 res/values/styles.xml 中設定風格顏色 clolorPrimary : 設定ActionBar 的背景顏色colorPrimary : 設定StatusBar 背景顏色android:windowBackground : 內容背景顏色 styles.xml123456789101112&lt;resources&gt; &lt;style name=&quot;AppTheme&quot; parent=&quot;AppTheme.Toolbar.Base&quot;/&gt; &lt;style name=&quot;AppTheme.Toolbar.Base&quot; parent=&quot;Theme.AppCompat&quot;&gt; &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt; &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name=&quot;android:windowBackground&quot;&gt;@color/windowBackground&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; Step 2: 設定navigationBar顏色 (only for SDK 21) 由於此設定只能在Android 5.0 (SDK 21) 以上使用，所以我們新增value資料夾values-v21並新增style.xml 內容如下 values-v21/styles.xml123456&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; &lt;style name=&quot;AppTheme&quot; parent=&quot;AppTheme.Toolbar.Base&quot;&gt; &lt;item name=&quot;android:navigationBarColor&quot;&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; Step 3: Toolbar背景顏色 activity_main.xml123456789101112131415161718192021&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.nickthomas55gmail.toolbar.MainActivity&quot;&gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/toolbar&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:layout_width=&quot;match_parent&quot; android:background=&quot;@color/colorPrimary&quot; /&gt; &lt;TextView android:layout_below=&quot;@+id/toolbar&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Hello World!&quot;/&gt;&lt;/RelativeLayout&gt; 執行結果 設置功能 設置Logo Icon, Navigation Icon, Title, Sub-Title MainActivity.java123456Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);toolbar.setLogo(R.drawable.toolbar_color);toolbar.setTitle(&quot;Title&quot;);toolbar.setSubtitle(&quot;sub title&quot;);setSupportActionBar(toolbar);toolbar.setNavigationIcon(R.drawable.toolbar_logo); 執行結果 設置Menu Component 在 res中新增資料夾ment並在資料夾中新增menu_main.xml 內容如下, 在此以Settings為例. menu_main.xml12345678910&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;item android:id=&quot;@+id/action_settings&quot; android:title=&quot;@string/tool_setting&quot; android:orderInCategory=&quot;100&quot; app:showAsAction=&quot;never&quot;/&gt;&lt;/menu&gt; 在Activity中, Override onCreateOptionsMenu MainActivity.java12345@Overridepublic boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true;} Toolbar註冊 OnMenuItemClickListener MainActivity.java123456789101112131415161718192021@Overrideprotected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); toolbar.setLogo(R.drawable.toolbar_color); toolbar.setTitle(&quot;Title&quot;); toolbar.setSubtitle(&quot;sub title&quot;); setSupportActionBar(toolbar); toolbar.setNavigationIcon(R.drawable.toolbar_logo); toolbar.setOnMenuItemClickListener(onMenuItemClick);}private Toolbar.OnMenuItemClickListener onMenuItemClick = new Toolbar.OnMenuItemClickListener() { @Override public boolean onMenuItemClick(MenuItem menuItem) { //... return true; }}; 畫面結果請參照執行結果 新增Oher Component 在res/menu/menu_main.xml新增Share, Edit Components menu_main.xml12345678910111213141516171819202122&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;item android:id=&quot;@+id/action_edit&quot; android:title=&quot;@string/tool_edit&quot; android:orderInCategory=&quot;80&quot; android:icon=&quot;@drawable/edit&quot; app:showAsAction=&quot;ifRoom&quot; /&gt; &lt;item android:id=&quot;@+id/action_share&quot; android:title=&quot;@string/tool_share&quot; android:orderInCategory=&quot;90&quot; android:icon=&quot;@drawable/share&quot; app:showAsAction=&quot;ifRoom&quot; /&gt; &lt;item android:id=&quot;@+id/action_settings&quot; android:title=&quot;@string/tool_setting&quot; android:orderInCategory=&quot;100&quot; app:showAsAction=&quot;never&quot;/&gt;&lt;/menu&gt; 執行結果 若要設定Edit, Share, Setting的操作, 在OnMenuItemClickListener中撰寫功能. MainActivity.java12345678910111213141516171819202122private Toolbar.OnMenuItemClickListener onMenuItemClick = new Toolbar.OnMenuItemClickListener() { @Override public boolean onMenuItemClick(MenuItem menuItem) { String msg = &quot;&quot;; switch (menuItem.getItemId()) { case R.id.action_edit: msg += &quot;Click edit&quot;; break; case R.id.action_share: msg += &quot;Click share&quot;; break; case R.id.action_settings: msg += &quot;Click setting&quot;; break; } if(!msg.equals(&quot;&quot;)) { Toast.makeText(MainActivity.this, msg, Toast.LENGTH_SHORT).show(); } return true; }};","link":"/2016/05/27/2016/2016_05_27-android-toolbar/"},{"title":"Android Bottom Sheets","text":"Android 5.0 推出了底部選單列 - Bottom Sheets 讓使用者可由屏幕底端滑出選單, 提供選擇或是資訊, 也可設計成跳轉至不同App的選單列. 以下為設計步驟. Step 1: 引用 Design Library build.gradle123456dependencies { compile fileTree(dir: 'libs', include: ['*.jar']) testCompile 'junit:junit:4.12' compile 'com.android.support:appcompat-v7:23.3.0' compile 'com.android.support:design:23.3.0'} appcompat-v7 與 design 版本需相同.若使用appcompat-v7:23.3.0, 而design:23.2.0時, 無法使用. Step 2: 編輯 Bottom Sheet 內容 在res/layout 新增 xml 檔案 : bottom_sheets_main_layout.xml, 目前先使用 TextView 當作內容 bottom_sheets_main_layout.xml1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/bottom_sheet&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;300dp&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;16dp&quot; android:background=&quot;@color/colorPrimary&quot; app:layout_behavior=&quot;@string/bottom_sheet_behavior&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center_horizontal&quot; android:text=&quot;Players&quot; android:textAppearance=&quot;@style/TextAppearance.AppCompat.Display1&quot; android:textColor=&quot;@color/colorAccent&quot;/&gt;&lt;/LinearLayout&gt; Step 3: 設置主畫面 在主畫面中, 使用CoordinatorLayout, 並引用Bottom Sheet內容. activity_main.xml1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot; android:background=&quot;@color/colorPrimaryDark&quot;&gt; &lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:src=&quot;@drawable/background&quot;/&gt; &lt;!-- Bottom Sheet --&gt; &lt;include layout=&quot;@layout/bottom_sheets_main_layout&quot; /&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt; Step 4: 設置 Bottom Sheet 行為 在MainActivity.java, 使用 BottomSheetBehavior.from 載入BottomSheet內容, 並且設定BottomSheet行為. STATE_COLLAPSED : 必須搭配 setPeekHeight, 設定縮起後最小高度, 預設最小高度為0STATE_EXPANDED : 將內容全部展開STATE_HIDDEN : 全部隱藏 MainActivity.java12345678910111213141516171819import android.support.design.widget.BottomSheetBehavior;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.widget.LinearLayout;public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); LinearLayout bottomSheetViewgroup = (LinearLayout) findViewById(R.id.bottom_sheet); BottomSheetBehavior bottomSheetBehavior = BottomSheetBehavior.from(bottomSheetViewgroup); bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED); bottomSheetBehavior.setPeekHeight(150); }} 執行結果 Bottom Sheet 分為兩種設計模式 Modal Bottom Sheets :使用時機: 與本頁無關的內容, 或是下一步的連結使用方式: Dialog 表示 (背景會暗掉) Persistent Bottom Sheets使用時機: 與本頁有關的內容使用方式: 內文表示 (背景不會暗掉, 亮度與Bottom Sheet一致) Persistent Bottom Sheets 拉動後 Modal Bottom Sheets 拉動後 Modal Bottom Sheets 的設計請參考Android Modal Bottom Sheets","link":"/2016/06/02/2016/2016_06_02-android-bottom_sheets/"},{"title":"Android Modal Bottom Sheets","text":"之前介紹過BottomSheets的兩種Type - Modal Bottom Sheets &amp; Persistent Bottom Sheets 請參考：Android - Bottom Sheets 此篇來介紹如何設計 Modal Bottom Sheets （BottomSheetDialog） Step 1: 新增 layout xml 在 res/layout 中新增 layout xml : bottom_sheet_dialog.xml 裡面包含一個TextView和RecyclerView (顯示球員名單) bottom_sheet_dialog.xml12345678910111213141516171819202122232425262728&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/bottom_sheet_dialog&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;444dp&quot; android:elevation=&quot;8dp&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;5dp&quot; android:background=&quot;@color/colorPrimary&quot; app:layout_behavior=&quot;@string/bottom_sheet_behavior&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center_horizontal&quot; android:text=&quot;Players&quot; android:textAppearance=&quot;@style/TextAppearance.AppCompat.Display1&quot; android:textColor=&quot;@color/colorAccent&quot;/&gt; &lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/recyclerView&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginBottom=&quot;5dp&quot; android:layout_marginTop=&quot;5dp&quot; /&gt;&lt;/LinearLayout&gt; Step 2: 新增BottomSheetDialog 在程式中設置BottomSheetDialog MainActivity.java12345678910111213ArrayList&lt;Player&gt; players = generatePlayers();PlayerAdapter adapter = new PlayerAdapter(players);View view = getLayoutInflater().inflate(R.layout.bottom_sheet_dialog, null);RecyclerView recyclerView = (RecyclerView) view.findViewById(R.id.recyclerView);recyclerView.setLayoutManager(new LinearLayoutManager(this));recyclerView.setAdapter(adapter);mBottomSheetDialog = new BottomSheetDialog(this);mBottomSheetDialog.setContentView(view);mPlayerBehavior = BottomSheetBehavior.from((View) view.getParent());mPlayerBehavior.setState(BottomSheetBehavior.STATE_EXPANDED); 在此必須注意 BottomSheetBehavior.from((View) view.getParent());必須在BottomSheetDialog.setContentView(view) 之後.否則會有NULL Exception發生. 每次使用BottomSheetDialog.show()之前, 需要使用BottonSheetBehavior.setState 重新設定高度 MainActivity.java12mPlayerBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);mBottomSheetDialog.show(); 若無設定BottonSheetBehavior.setState的話, 當使用拖拉將BottomSheetDialog收起後, 下次呼叫BottomSheetDialog.show()時, 會出現暗掉卻無看見BottomSheetDialog的情況. 原因是BottomSheetDialog有出現, 但是位置在畫面下方. 由於在此範例中BottomSheetDialog為全域變數, 只有在程式開始時 OnCreate() 做初始設定. 之後只呼叫BottomSheetDialog.show來顯示, 但顯示位置為先前Dialog在畫面中的高度. 所以每當顯示時, 需要先重新設置高度.","link":"/2016/06/06/2016/2016_06_06-modal_bottom_sheets/"},{"title":"Android 自定義ListView","text":"每次想要製作ListView時, 都要先上網找尋文章, 才開始寫程式, 花費太多時間. 所以此篇文章主要是如何快速製作自定義的ListView. Step 1: 定義Item內容 在此例子中, 使用一個ImageView和TextView來製作 在res/layout中新增 list_item_content.xml 內容如下 list_item_content.xml1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ImageView android:id=&quot;@+id/lock_icon&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:src=&quot;@drawable/lock&quot; /&gt; &lt;TextView android:id=&quot;@+id/ip_address&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_toRightOf=&quot;@id/lock_icon&quot;/&gt;&lt;/RelativeLayout&gt; Step 2: 建造Class來存放資料 新增Java Class : Device.java Device.java1234567891011public class Device { private String ip_addr; public Device(String ip) { this.ip_addr = ip; } public String getIp_addr() { return ip_addr; }} Step 3: 建造Adapter 新增Java Class DeviceItemAdapter.java DeviceItemAdapter.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class DeviceItemAdapter extends ArrayAdapter&lt;Device&gt; { private ArrayList&lt;Device&gt; mDevices; private LayoutInflater inflater; private class ViewHolder { ImageView lockIcon; TextView deviceIP; } public DeviceItemAdapter(Context context, ArrayList&lt;Device&gt; devices) { super(context, R.layout.list_item_content, devices); inflater = LayoutInflater.from(context); mDevices = devices; } @Override public int getCount() { return mDevices.size(); } @Override public Device getItem(int index) { return mDevices.get(index); } @Override public long getItemId(int position) { return mDevices.indexOf(getItem(position)); } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; Device device = getItem(position); if (convertView == null) { convertView = inflater.inflate(R.layout.list_item_content, parent, false); holder = new ViewHolder(); holder.deviceIP = (TextView) convertView.findViewById(R.id.ip_address); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } holder.deviceIP.setText(device.getIp_addr()); return convertView; }} Step 4: 設定ListView 主畫面的Layout中新增ListView main_layout.xml12345678&lt;ListView android:id=&quot;@+id/device_list&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_above=&quot;@+id/find_devices&quot; android:layout_margin=&quot;5dp&quot; android:divider=&quot;@color/colorPrimary&quot; android:dividerHeight=&quot;1dp&quot;/&gt; 在Activity中設定ListView MainActivity.java1234ListView mDeviceList = (ListView) findViewById(R.id.device_list);ArrayList&lt;Device&gt; mDevices = new ArrayList&lt;&gt;();DeviceItemAdapter mDeviceItemAdapter = new DeviceItemAdapter(this.getApplicationContext(), mDevices);mDeviceList.setAdapter(mDeviceItemAdapter); 更新Listview MainActivity.java123Device device = new Device(deviceIP);mDevices.add(device);mDeviceItemAdapter.notifyDataSetChanged();","link":"/2016/06/23/2016/2016_06_23-custom_listview/"},{"title":"Android 呼叫系統鎖屏 - Password LockScreen","text":"這篇文章主要介紹如何使用程式碼呼叫系統鎖屏. Step 1: 增加權限 首先要先在AndroidManifest.xml 中增加權限 AndroidManifest.xml12&lt;uses-permission android:name=&quot;android.permission.DISABLE_KEYGUARD&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt; Step 2: 宣告使用權限 在res中新增加xml資料夾, 並在此xml資料夾中新增 lock_screen.xml lock_screen.xml1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;device-admin xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;uses-policies&gt; &lt;!-- 强行鎖定 --&gt; &lt;force-lock /&gt; &lt;!-- 重置密碼 --&gt; &lt;reset-password /&gt; &lt;!-- 限制密碼選擇 --&gt; &lt;limit-password /&gt; &lt;!-- 監控登錄 --&gt; &lt;watch-login /&gt; &lt;/uses-policies&gt;&lt;/device-admin&gt; Step 3: 新增AdminReceiver.java AdminReceiver.java123public class AdminReceiver extends DeviceAdminReceiver { private final String TAG = &quot;AdminReceiver&quot;;} AndroidManifest.xml 的設定 AndroidManifest.xml12345678910&lt;receiver android:name=&quot;.AdminReceiver&quot; android:label=&quot;@string/app_name&quot; android:description=&quot;@string/app_des&quot; android:permission=&quot;android.permission.BIND_DEVICE_ADMIN&quot;&gt; &lt;meta-data android:name=&quot;android.app.device_admin&quot; android:resource=&quot;@xml/lock_screen&quot; /&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.app.action.DEVICE_ADMIN_ENABLED&quot; /&gt; &lt;/intent-filter&gt;&lt;/receiver&gt; Step 4: 宣告DevicePolicyManager 12private DevicePolicyManager mDevicePolicyManager = (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);private ComponentName mComponentName = new ComponentName(this, AdminReceiver.class); Step 5: 取得機器權限 1234Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, mComponentName);intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION, &quot;------ 其他描述 ------&quot;);startActivityForResult(intent, 0); Step 6: 呼叫系統密碼鎖屏, 並設定密碼 1234mDevicePolicyManager.setPasswordQuality(mComponentName, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);mDevicePolicyManager.setPasswordMinimumLength(mComponentName, 5);mDevicePolicyManager.resetPassword(&quot;nick6425&quot;, DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);mDevicePolicyManager.lockNow(); Step 7: 取消密碼鎖屏, 恢復滑動鎖屏 此方法在Android 5.0.x 無法使用, Android 5.1.x已修正 123mDevicePolicyManager.setPasswordQuality(mComponentName, DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);mDevicePolicyManager.setPasswordMinimumLength(mComponentName, 0);mDevicePolicyManager.resetPassword(&quot;&quot;, DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY); Step 8: 取消機器權限 1mDevicePolicyManager.removeActiveAdmin(mComponentName);","link":"/2016/06/22/2016/2016_06_22-android-call_system_lockscreen/"},{"title":"Android ListView 設定 FootView","text":"當尋找Device或列出IP時, 使用ListView時, 想在List 列表底下顯示”搜尋中或讀取中”的提示時 可使用FootView來達成. Step 1: 新增footview.xml 在res/layout增加footview.xml footview.xml1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ImageView android:id=&quot;@+id/list_foot&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; android:src=&quot;@drawable/loading&quot;/&gt;&lt;/RelativeLayout&gt; Step 2: ListView add footview MainActivity.java12345ListView mDeviceList = (ListView) findViewById(R.id.device_list);mDeviceList.setOnItemClickListener(this);View footerView = ((LayoutInflater)this.getSystemService(LAYOUT_INFLATER_SERVICE)) .inflate(R.layout.listview_foot, null, false);mDeviceList.addFooterView(footerView); Step 3: 取消FootView的Divider main_layout.xml12345678910&lt;ListView android:id=&quot;@+id/device_list&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_below=&quot;@id/title&quot; android:layout_above=&quot;@+id/find_devices&quot; android:layout_margin=&quot;5dp&quot; android:divider=&quot;@color/colorPrimary&quot; android:dividerHeight=&quot;1dp&quot; android:footerDividersEnabled=&quot;false&quot;/&gt;","link":"/2016/06/24/2016/2016_06_24-listview_footview/"},{"title":"iOS - 開啟藍芽","text":"當藍牙位開啟時，iOS 限制使用者在APP可打開或關閉藍牙的權限。因此目前只能進入設定來開啟或關閉。 當APP需要使用藍牙，但藍牙為關閉時，iOS會彈出訊息來提醒使用者。 Step 1: import CoreBluetooth Step 2: 新增 Class : BtManage 並且 extension potocol : CBCentralManagerDelegate Step 3: 新增參數 mCBCentralManager : CBCentralManager! Step 4: 初始化 mCBCentralManager 並設定參數 CBCentralManagerOptionShowPowerAlertKey = true CBCentralManagerOptionShowPowerAlertKey 參數預設值為 false, 當藍芽未開啟時, 並不會詢問使用者是否要開啟. 必須設定為 true , 當系統偵測到藍芽未開啟時, 才會詢問使用者. Step 5: 監聽藍芽 State 當開啟或關閉, 會由callback function : centralManagerDidUpdateState 返回結果 Source Code BtManager.swift123456789101112131415161718192021222324252627282930import Foundationimport CoreBluetoothclass BtManager : NSObject { var mCBCentralManager: CBCentralManager! override init() { super.init(); initCBCentralManager(); } internal func initCBCentralManager() { mCBCentralManager = CBCentralManager(delegate: self, queue: nil, options:[CBCentralManagerOptionShowPowerAlertKey: true]); }}extension BtManager : CBCentralManagerDelegate { func centralManagerDidUpdateState(central: CBCentralManager) { switch (central.state) { case CBCentralManagerState.PoweredOn: print(&quot;state On&quot;); case CBCentralManagerState.PoweredOff: print(&quot;state Off&quot;); case CBCentralManagerState.Unknown: fallthrough; default: print(&quot;state Unknow&quot;); } }} ViewController.swift12345678910111213import UIKitclass ViewController: UIViewController { var mBtManager : BtManager!; override func viewDidLoad() { super.viewDidLoad() mBtManager = BtManager(); } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() }}","link":"/2016/07/05/2016/2016_07_05-ios-open_bluetooth/"},{"title":"iOS - 搜尋藍芽裝置","text":"當開啟藍芽後, 可進行搜索藍芽裝置. 如何設定與開啟藍芽裝置請參考: 開啟藍芽 Step 1: 偵測是否已開始搜尋藍芽 1mCBCentralManager.isScanning Step 2: 搜尋藍芽裝置 1mCBCentralManager.scanForPeripheralsWithServices(nil, options: nil); Step 3: 監聽搜尋裝置 找到/發現裝置時會經由callback function返回(CBCentralManagerDelegate potocol’s function) 12func centralManager(central: CBCentralManager, didDiscoverPeripheral peripheral: CBPeripheral, advertisementData: [String : AnyObject], RSSI: NSNumber)} Step 4: 停止搜尋裝置 1mCBCentralManager.stopScan(); Source Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import Foundationimport CoreBluetoothclass BtManager : NSObject { var mCBCentralManager: CBCentralManager! override init() { super.init(); initCBCentralManager(); } internal func initCBCentralManager() { mCBCentralManager = CBCentralManager(delegate: self, queue: nil, options: [CBCentralManagerOptionShowPowerAlertKey: true]); } func isScanning() -&gt; Bool { return mCBCentralManager.isScanning; } func startToScan() { if (mCBCentralManager.state == CBCentralManagerState.PoweredOff) { print(&quot;state is off&quot;); initCBCentralManager(); } else { if (isScanning()) { print(&quot;state is scanning&quot;); } else { mCBCentralManager.scanForPeripheralsWithServices(nil, options: nil); print(&quot;start to scan: \\(isScanning())&quot;); } } } func stopScanning() { mCBCentralManager.stopScan(); }}extension BtManager : CBCentralManagerDelegate { func centralManagerDidUpdateState(central: CBCentralManager) { switch (central.state) { case CBCentralManagerState.PoweredOn: print(&quot;state On&quot;); case CBCentralManagerState.PoweredOff: print(&quot;state Off&quot;); case CBCentralManagerState.Unknown: fallthrough; default: print(&quot;state Unknow&quot;); } } func centralManager(central: CBCentralManager, didDiscoverPeripheral peripheral: CBPeripheral, advertisementData: [String : AnyObject], RSSI: NSNumber) { print(&quot;Device: \\(peripheral.name) : \\(peripheral.identifier.UUIDString)&quot;); }}","link":"/2016/07/05/2016/2016_07_05-ios-search_bluetooth_devices/"},{"title":"iOS - NavigationItem - Bar Button Item 按鈕圖形切換","text":"在NavigationItem中, 想要實現 Bar Button Item.System item的切換, 來達成開始搜尋藍芽與停止搜尋按鈕的轉換. Step 1: Add Bar Button Item 先在Navigation Item中, 新增Bar Button Item且System item設定為Search Step 2: 建立與程式的連結 Step 3: 撰寫切換按鈕圖案的程式碼 123456789private func changeToStopButton() { let stopScanningButton = UIBarButtonItem( barButtonSystemItem: UIBarButtonSystemItem.Stop, target: self, action: #selector(ViewController.stopScan)); self.navigationItem.rightBarButtonItem = stopScanningButton;}private func changeToScanButton() { let scanButton = UIBarButtonItem( barButtonSystemItem: UIBarButtonSystemItem.Search, target: self, action: #selector(ViewController.startScan)); self.navigationItem.rightBarButtonItem = scanButton;} Source Code 1234567891011121314151617181920212223242526272829303132333435363738import UIKitclass ViewController: UIViewController { var mBtManager : BtManager!; override func viewDidLoad() { super.viewDidLoad() mBtManager = BtManager(); } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() } @IBAction func prepareScan(sender: AnyObject) { startScan(); } func startScan() { mBtManager.startToScan(); changeToStopButton(); } func stopScan() { mBtManager.stopScanning(); changeToScanButton(); } private func changeToStopButton() { let stopScanningButton = UIBarButtonItem( barButtonSystemItem: UIBarButtonSystemItem.Stop, target: self, action: #selector(ViewController.stopScan)); self.navigationItem.rightBarButtonItem = stopScanningButton; } private func changeToScanButton() { let scanButton = UIBarButtonItem( barButtonSystemItem: UIBarButtonSystemItem.Search, target: self, action: #selector(ViewController.startScan)); self.navigationItem.rightBarButtonItem = scanButton; }}","link":"/2016/07/06/2016/2016_07_06-ios-navigationbar_baritem/"},{"title":"iOS - Tabview 分成不同 Group","text":"當我們想將 TabVIew 分為２個 Group 時, 如 已搜尋到的藍芽裝置和已連接上的藍芽裝置, 可利用 Header 或 Footer來分隔. Step 1: 在主畫面中拉進TableView , 並在 TableView中拉進 TableView Cell Step 2: 繼承 UITableViewDataSource Protocol 並實做 群組個數由於目前我們要分成2個Group, 所以設置為兩個sections 123func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int { return 2;} 群組名稱此範例利用 Header來設定名稱 12345678910func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { switch (section) { case 0: return &quot;Found Devices:&quot;; case 1: return &quot;Connected Devices:&quot;; default: return &quot;Unknow&quot;; }} 各群組資料數量, 在此我們先設定為０ 12345678910func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { switch (section) { case 0: return 0; case 1: return 0; default: return 0; }} 設定TableViewCell在.storyboard中, 設定參考 Cell 名稱 1234func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { let cell: UITableViewCell = UITableViewCell( style:UITableViewCellStyle.Subtitle, reuseIdentifier: &quot;deviceCell&quot;); return cell;}","link":"/2016/07/07/2016/2016_07_07-ios-tableview_diff_group/"},{"title":"Android InstrumentationTestCase","text":"針對Android 單元測試中, 若要執行與Android API 相關的測試時, 我們可用 Instrumented Test 的方式來測試. (請參閱 Android App Test 基本概念) 這類型的測試會啟動instrumentation Test Runner，可以模擬 Android 事件 Step 1: 建立取得當前網路狀況的函數 （被測試函數） NetworkUtils.java123456789101112131415public class NetworkUtils { public static boolean isNetworkConnected(Context context) { ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context .CONNECTIVITY_SERVICE); NetworkInfo nInfo = cm.getActiveNetworkInfo(); if (null != nInfo &amp;&amp; nInfo.isConnected() &amp;&amp; nInfo.isAvailable()) { return true; } else { return false; } }} Step 2: 建立測試檔 利用 Ctrl + Shift + T 建立 NetworkUtilsTest.java 並繼承 InstrumentationTestCase 位置儲存於 /src/androidTest/java/ package_path / Step 3: 確認測試檔 確認測試檔是否位於 AndroidTest 中 之前有發生過錯誤 Class not found: “XXX.XXX.XXX” Empty test suite. 原因是測試檔不是屬於AndroidTest (使用Clean Build後重新新增測試檔也沒用), 後來將原先的測試檔從Junit 中移除才解決 Run -&gt; Edit Configuations 若發現測試檔案不屬於AndroidTest, 先刪除相關測試後, 再重新執行Step 2. Step 4: 確認 test compiler 打開build.gradle 確認 dependencies 中有增加testCompile 123456dependencies { compile fileTree(include: ['*.jar'], dir: 'libs') testCompile 'junit:junit:4.12' testCompile 'org.mockito:mockito-core:1.9.5' compile 'com.android.support:appcompat-v7:23.1.1'} Step 5: 增加權限 打開AndroidManifest.xml 增加 permission AndroidManifest.xml1&lt;uses-permission android:name=&quot;android.permission.RUN_INSTRUMENTATION&quot; /&gt; 並宣告要測試的package AndroidManifest.xml123&lt;instrumentation android:name=&quot;android.test.InstrumentationTestRunner&quot; android:targetPackage=&quot;com.projects.nick&quot; /&gt; 在application 中增加 runner library AndroidManifest.xml1&lt;uses-library android:name=&quot;android.test.runner&quot; /&gt; 完整寫法 AndroidManifest.xml12345678910111213141516171819202122232425262728293031&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.projects.nick&quot;&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.RUN_INSTRUMENTATION&quot; /&gt; &lt;instrumentation android:name=&quot;android.test.InstrumentationTestRunner&quot; android:targetPackage=&quot;com.projects.nick&quot; /&gt; &lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:label=&quot;@string/app_name&quot; android:supportsRtl=&quot;true&quot; android:theme=&quot;@style/AppTheme&quot;&gt; &lt;uses-library android:name=&quot;android.test.runner&quot; /&gt; &lt;activity android:name=&quot;.MainActivity&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; Step 5: Run Test Project列表中, 在測試檔點擊右鍵, 執行","link":"/2016/07/27/2016/2016_07_27-android-app_instrumentation_test/"},{"title":"Android App Test 基本概念","text":"依據測試, 可分為單元測試 (Unit Test) 與整合測試 (Integration Test) 兩大類. 再細分為 Unit Test Local Unit Test: 適用於和Android API 較無相關性的測試 Instrumented Test: 與Android API 有相關性的測試 Integration Test Components within your app only: 功能整合性測試 Cross-app Components: 整體App測試 關於 Android 單元測試(Unit Test) , 目前依據測試類型分為兩種 Local Unit Test 適用於和Android API 較無相關性的測試. 如： 123public int add(int num1, int num2) { return num1 + num2 ;} 此類型的測試可在local Java Virtual Machine (JVM) 上執行測試, 速度較快. 測試檔案需放在 module-name/src/test/java/ 路徑下. Instrumented Test 和Android API 有相關性的測試. 如 ： 12345678910111213public static boolean isNetworkConnected(Context context) { ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context .CONNECTIVITY_SERVICE); NetworkInfo nInfo = cm.getActiveNetworkInfo(); if (null != nInfo &amp;&amp; nInfo.isConnected() &amp;&amp; nInfo.isAvailable()) { return true; } else { return false; }} 此類型的測試在實機上或模擬器上做測試 測試檔案需放在 module-name/src/androidTest/java/ 路徑下.","link":"/2016/07/27/2016/2016_07_27-android-app_test_basic/"},{"title":"Android Instrumented Test","text":"針對Android 單元測試中, 若要執行與Android API 相關的測試時, 我們可用 Instrumented Test 的方式來測試. (請參閱 Android App Test 基本概念) Android Instrumented Test 的架構圖如下: InstrumentationTestCase : 這類型的測試會啟動instrumentation Test Runner. 可以模擬 Android 事件, 而傳送訊息給應用程式, 如click event. 因此可以對UI進行自動化測試. AndroidTestCase 此類型適用於non- UI 的測試, 如database操作測試或Service相關測試","link":"/2016/07/27/2016/2016_07_27-android-instrumented_test/"},{"title":"Android ActivityUnitTestCase","text":"對於Android 單元測試來說, 若滿足以下測試條件, 可選用 ActivityUnitTestCase 來測試 (1) 針對單一Activity 測試, 不涉及其他Activity交互作用. 如startActivityForResult 的返回結果做測試.(2) 對UI進行自動化測試 (祖父類別 InstrumentationTestCase 參考資料: Android InstrumentationTestCase) ActivityUnitTestCase 運用範例 一個Activity中含有一個EditText, TextView, Button EditText : 使用者輸入框TextView : 呈現使用者輸入框的內容Button : 點擊Button , 將EditText的內容呈現在TextView Step 1: 建立測試檔 MainActivityTest extends ActivityUnitTest 使用 Ctrl + Shift + T 建立測試檔, 並選擇 subclass 為 ActivityUnitTest位置儲存於 /src/androidTest/java/ package_path / Step 2: 初始化 建立測試元件 123456private Intent mStartIntent;MainActivity mMainActivity;private Button mTestButton;private EditText mEditText;private TextView mTextView; 建立Constructor 123public MainActivityTest() { super(MainActivity.class);} 當每項測試前, 都會將測試元件初始化 1234567891011121314151617@Overrideprotected void setUp() throws Exception { super.setUp(); mStartIntent = new Intent(Intent.ACTION_MAIN); mMainActivity = startActivity(mStartIntent, null, null); assertNotNull(mMainActivity); mTestButton = (Button) mMainActivity.findViewById(R.id.test_bt); assertNotNull(mTestButton); mEditText = (EditText) mMainActivity.findViewById(R.id.enter); assertNotNull(mEditText); mTextView = (TextView) mMainActivity.findViewById(R.id.show_text); assertNotNull(mTextView);} Step 3: 測試預設值 12345678910@UiThreadTestpublic void testInitialization() { String sourceText = null; String targetText = null; sourceText = mEditText.getText().toString(); targetText = mTextView.getText().toString(); assertEquals(&quot;&quot;, sourceText); assertEquals(&quot;Enter..&quot;, targetText);} 由於在 res/layout/activity_main.xml 中 EditText 和 TextView 的初始設定為 activity_main.xml1234567891011121314&lt;EditText android:id=&quot;@+id/enter&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; /&gt;&lt;TextView android:id=&quot;@+id/show_text&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_below=&quot;@id/enter&quot; android:text=&quot;Enter...&quot; android:layout_centerHorizontal=&quot;true&quot;/&gt; 所以測試項 assertEquals(“Enter..”, targetText); 會無法通過測試 (少了一個點號) 錯誤訊息如下 Step 4: 測試未點擊 Test Button 的情況 12345678910111213@UiThreadTestpublic void testNotChanged() { String sourceText = null; String targetText = null; mEditText.setText(&quot;Not Click Test Button&quot;); sourceText = mEditText.getText().toString(); targetText = mTextView.getText().toString(); assertEquals(&quot;Not Click Test Button&quot;, sourceText); assertEquals(sourceText, targetText);} 雖然EditText內容以被更改, 但還未點擊 Test Button 時, TextView 的內容不會被更改, 所以測試項目 assertEquals(sourceText, targetText) 會無法通過測試. 錯誤訊息如下 Step 5: 測試點擊 Test Button 的情況 1234567891011121314@UiThreadTestpublic void testShowText() { String sourceText = null; String targetText = null; mEditText.setText(&quot;Click Test Button&quot;); mTestButton.performClick(); sourceText = mEditText.getText().toString(); targetText = mTextView.getText().toString(); assertEquals(&quot;Click Test Button&quot;, sourceText); assertEquals(&quot;Click Test Button&quot;, targetText); assertEquals(sourceText, targetText);} 點擊 Test Button後, TextView 的內容會更改為EditText內容 所以此測試項為 Pass Source Code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071public class MainActivityTest extends ActivityUnitTestCase&lt;MainActivity&gt; { private Intent mStartIntent; MainActivity mMainActivity; private Button mTestButton; private EditText mEditText; private TextView mTextView; public MainActivityTest() { super(MainActivity.class); } @Override protected void setUp() throws Exception { super.setUp(); mStartIntent = new Intent(Intent.ACTION_MAIN); mMainActivity = startActivity(mStartIntent, null, null); assertNotNull(mMainActivity); mTestButton = (Button) mMainActivity.findViewById(R.id.test_bt); assertNotNull(mTestButton); mEditText = (EditText) mMainActivity.findViewById(R.id.enter); assertNotNull(mEditText); mTextView = (TextView) mMainActivity.findViewById(R.id.show_text); assertNotNull(mTextView); } @UiThreadTest public void testInitialization() { String sourceText = null; String targetText = null; sourceText = mEditText.getText().toString(); targetText = mTextView.getText().toString(); assertEquals(&quot;&quot;, sourceText); assertEquals(&quot;Enter..&quot;, targetText); } @UiThreadTest public void testNotChanged() { String sourceText = null; String targetText = null; mEditText.setText(&quot;Not Click Test Button&quot;); sourceText = mEditText.getText().toString(); targetText = mTextView.getText().toString(); assertEquals(&quot;Not Click Test Button&quot;, sourceText); assertEquals(sourceText, targetText); } @UiThreadTest public void testShowText() { String sourceText = null; String targetText = null; mEditText.setText(&quot;Click Test Button&quot;); mTestButton.performClick(); sourceText = mEditText.getText().toString(); targetText = mTextView.getText().toString(); assertEquals(&quot;Click Test Button&quot;, sourceText); assertEquals(&quot;Click Test Button&quot;, targetText); assertEquals(sourceText, targetText); }} ps: @UiThreadTest 的順序會根據命名來決定順序 (請參考 Android SingleLaunchActivityTestCase - Step 6)","link":"/2016/07/28/2016/2016_07_28-android-activity_unit_test/"},{"title":"Android Local Unit Test","text":"針對Android 單元測試中, 對於不需要測試實機環境的函數時, 我們可用 Local Unit Test 的方式來測試. (請參閱 Android App Test 基本概念) 在談到如何建立測試之前, 首先先了解 JUnit 的測試順序. JUnit4 測試順序由Annotation決定 @BeforeClass : 在開始第一個測試前執行@Before : 每次測試前執行@Test : 表示要執行此區段裡的測試碼@Test(timeout=5000) : 可設定多少時間內要完成的測試項目@After : 每次測試後執行@AfterClass : 全部測試完畢後執行 如以下內容 1234567891011121314151617181920212223242526272829303132public class MathUtilsTest { @BeforeClass public static void testBeforeClass() { assertEquals(0, 0); } @Before public void testBefore() { assertEquals(0, 0); } @Test public void testTest1() { assertEquals(0, 0); } @Test public void testTest2() { assertEquals(0, 0); } @After public void testAfter() { assertEquals(0, 0); } @AfterClass public static void testAfterClass() { assertEquals(0, 0); }} 則順序為 testBeforeClass() -&gt; testBefore() -&gt; testTest1() -&gt; testAfter() -&gt; testBefore() -&gt; testTest2() -&gt; testAfter() -&gt; testAfterClass() Step 1: 建立函數 （被測試函數） MathUtils.java123456789101112public class MathUtils { public static long nearestPowOf2(int num) { num -= 1; num |= num &gt;&gt; 1; num |= num &gt;&gt; 2; num |= num &gt;&gt; 4; num |= num &gt;&gt; 8; num |= num &gt;&gt; 16; num += 1; return num; }} 此範例為找到下一個2次方的數. 如輸入10, 則回傳為 16因為 2^3 = 8, 2^4 = 16, 而 8 &lt; 10 &lt; 16所以下一個2次方的數為16 Step 2: 建立測試檔 利用 Ctrl + Shift + T 建立 MathUtilsTest.java 位置儲存於 /src/test/java/ package_path / Step 3: 確認測試檔是否位於 JUnit 中 Run -&gt; Edit Configuations若發現測試檔案不屬於JUnit, 先刪除相關測試後, 再重新執行Step 2. Step 4: Run Test Project列表中, 在測試檔點擊右鍵, 執行","link":"/2016/07/27/2016/2016_07_27-android-unit_test/"},{"title":"Android - ADB Driver 設定","text":"在Windows 7 上, 遇到更新Android 驅動程式依舊無法使用的問題. 上網下載Google 所提供 Driver 也無法使用, adb device 依舊找不到Android手機裝置. 看來是Window 7 對於更新驅動程式的方式有所改變. 上網搜尋了一下, 找到了解決方法. Step 1: 先到Google 官網抓取Driver Google Usb Driver Step 2: 選擇更新驅動程式 Step 3: 讓我從電腦上的裝置驅動程式清單中挑選 Step 4: 選擇顯示所有裝置 Step 5: 選擇從磁片中安裝 Step 6: 指定到驅動程式路徑, 並選擇 android_winusb.inf Step 7: 出現ADB的資訊, 選擇 Android ADB Interface Step 8: 安裝完成","link":"/2016/07/28/2016/2016_07_28-android-adb_install/"},{"title":"Android SingleLaunchActivityTestCase","text":"對於Android 單元測試來說, 若滿足以下測試條件, 可選用 SingleActivityTestCase 來測試 (1) 針對單一Activity 測試, 不涉及其他Activity交互作用. 如startActivityForResult 的返回結果做測試.(2) 對UI進行自動化測試(3) 只需要一次初始化 (setUp()) 與結束 (tearDown()), 亦即每個測試項目不會重複執行 setUp() 與 tearDown() 此測試類別和 ActivityUnitTestCase 相似, 只差在 ActivityUnitTestCase的每個測試項目會重複執行 setUp() 與 tearDown() 請參閱 Android ActivityUnitTestCase @UiThreadTest 的順序會根據命名來決定順序 SingleActivityTestCase 運用範例 一個Activity中含有一個EditText, TextView, ButtonEditText : 使用者輸入框TextView : 呈現使用者輸入框的內容Button : 點擊Button , 將EditText的內容呈現在TextView Step 1: 建立測試檔 建立測試檔 MainActivityTest_Single_Launch extends SingleLaunchActivityTestCase 使用 Ctrl + Shift + T 建立測試檔, 並選擇 subclass 為 SingleLaunchActivityTestCase 位置儲存於 /src/androidTest/java/ package_path / Step 2: 初始化 建立測試元件 12345MainActivity mMainActivity;private Button mTestButton;private EditText mEditText;private TextView mTextView; 建立Constructor 123public MainActivityTest_Single_Launch() { super(&quot;com.projects.nick&quot;, MainActivity.class);} 測試元件初始化 123456789@Overrideprotected void setUp() throws Exception { super.setUp(); mMainActivity = (MainActivity) getActivity(); mTestButton = (Button) mMainActivity.findViewById(R.id.test_bt); mEditText = (EditText) mMainActivity.findViewById(R.id.enter); mTextView = (TextView) mMainActivity.findViewById(R.id.show_text);} 元件初始化測試 123456public void testPreConditions(){ assertNotNull(mMainActivity); assertNotNull(mTestButton); assertNotNull(mEditText); assertNotNull(mTextView);} Step 3: 測試預設值 12345@UiThreadTestpublic void testInitialization() { assertEquals(&quot;&quot;, mEditText.getText().toString()); assertEquals(&quot;Enter..&quot;, mTextView.getText().toString());} 由於在 res/layout/activity_main.xml 中 EditText 和 TextView 的初始設定為 activity_main.xml1234567891011121314&lt;EditText android:id=&quot;@+id/enter&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; /&gt;&lt;TextView android:id=&quot;@+id/show_text&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_below=&quot;@id/enter&quot; android:text=&quot;Enter...&quot; android:layout_centerHorizontal=&quot;true&quot;/&gt; 所以測試項 assertEquals(“Enter..”, targetText); 會無法通過測試 (少了一個點號) 錯誤訊息如下 Step 4: 測試未點擊 Test Button 的情況 1234567@UiThreadTestpublic void testNotChanged() { mEditText.setText(&quot;Not Click Test Button&quot;); assertEquals(&quot;Not Click Test Button&quot;, mEditText.getText().toString()); assertNotSame(mEditText.getText().toString(), mTextView.getText().toString());} 雖然EditText內容以被更改, 但還未點擊 Test Button 時, TextView 的內容不會被更改, 所以測試項目 assertEquals(sourceText, targetText) 會無法通過測試. 錯誤訊息如下 Step 5: 測試點擊 Test Button 的情況 123456789@UiThreadTestpublic void testShowText() { mEditText.setText(&quot;Click Test Button&quot;); mTestButton.performClick(); assertEquals(&quot;Click Test Button&quot;, mEditText.getText().toString()); assertEquals(&quot;Click Test Button&quot;, mTextView.getText().toString()); assertEquals(mEditText.getText().toString(), mTextView.getText().toString());} 點擊 Test Button後, TextView 的內容會更改為EditText內容 所以此測試項為 Pass Step 6: 再度測試內容 1234@UiThreadTestpublic void testTestAgain() { testInitialization();} 若將此測試項移至ActivityUnitTestCase 是可被測試通過的.因為ActivityUnitTestCase的會重複執行 setUp() 與 tearDown().所以EditText和TextView都被初始化了. 但是在SingleActivityTestCase 並不會再度執行setUp() 與 tearDown().EditText和TextView的內容依舊為 “Click Test Button”所以此測試項無法通過測試. 先前我們有提到 @UiThreadTest 的順序會根據命名來決定順序, 若將此測試項名稱改為 1234@UiThreadTestpublic void testInitializationAgain() { testInitialization();} 是可以通過測試的, 所以在命名上要小心. Source Code 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364public class MainActivityTest_Single_Launch extends SingleLaunchActivityTestCase { MainActivity mMainActivity; private Button mTestButton; private EditText mEditText; private TextView mTextView; public MainActivityTest_Single_Launch() { super(&quot;com.projects.nick&quot;, MainActivity.class); } @Override protected void setUp() throws Exception { super.setUp(); mMainActivity = (MainActivity) getActivity(); mTestButton = (Button) mMainActivity.findViewById(R.id.test_bt); mEditText = (EditText) mMainActivity.findViewById(R.id.enter); mTextView = (TextView) mMainActivity.findViewById(R.id.show_text); } public void testPreConditions(){ assertNotNull(mMainActivity); assertNotNull(mTestButton); assertNotNull(mEditText); assertNotNull(mTextView); } @UiThreadTest public void testInitialization() { assertEquals(&quot;&quot;, mEditText.getText().toString()); assertEquals(&quot;Enter...&quot;, mTextView.getText().toString()); } @UiThreadTest public void testNotChanged() { mEditText.setText(&quot;Not Click Test Button&quot;); assertEquals(&quot;Not Click Test Button&quot;, mEditText.getText().toString()); assertNotSame(mEditText.getText().toString(), mTextView.getText().toString()); } @UiThreadTest public void testShowText() { mEditText.setText(&quot;Click Test Button&quot;); mTestButton.performClick(); assertEquals(&quot;Click Test Button&quot;, mEditText.getText().toString()); assertEquals(&quot;Click Test Button&quot;, mTextView.getText().toString()); assertEquals(mEditText.getText().toString(), mTextView.getText().toString()); } @UiThreadTest public void testTestAgain() { testInitialization(); } @Override protected void tearDown() throws Exception { super.tearDown(); }}","link":"/2016/07/28/2016/2016_07_28-android-single_launch_activity_unit_test/"},{"title":"Android InstrumentationTestCase Part II","text":"對於Android 單元測試來說, 若滿足以下測試條件, 可選用 ActivityInstrumentationTestCase2 (Function Test) 來測試 (1) 針對單一Activity 測試, 不涉及其他Activity交互作用.(2) 對UI進行自動化測試(3) 可對裝置使用程式來模擬輸入, 點擊 等UI 事件. 與ActivityUnitTestCase (Unit Test) 的最大不同點為: 可對裝置使用程式來模擬輸入, 點擊 等UI 事件. Step 1: 建立測試檔 建立測試檔 MainActivityTest_AIT2 extends ActivityInstrumentationTestCase2 使用 Ctrl + Shift + T 建立測試檔, 並選擇 subclass 為 ActivityInstrumentationTestCase2 位置儲存於 /src/androidTest/java/ package_path / Step 2: 初始化 建立測試元件 123456private Intent mStartIntent;MainActivity mMainActivity;private Button mTestButton;private EditText mEditText;private TextView mTextView; 建立Constructor 123public MainActivityTest_AIS2() { super(MainActivity.class);} 當每項測試前, 都會將測試元件初始化 12345678910111213141516@Overrideprotected void setUp() throws Exception { super.setUp(); mMainActivity = (MainActivity) getActivity(); mTestButton = (Button) mMainActivity.findViewById(R.id.test_bt); mEditText = (EditText) mMainActivity.findViewById(R.id.enter); mTextView = (TextView) mMainActivity.findViewById(R.id.show_text);}public void testPreconditions() { assertNotNull(mMainActivity); assertNotNull(mTestButton); assertNotNull(mEditText); assertNotNull(mTextView); assertNotNull(mMainActivity);} Step 3: 對輸入框執行輸入 123456789101112Instrumentation instrumentation = getInstrumentation();assertNotNull(instrumentation);instrumentation.runOnMainSync(new Runnable() { @Override public void run() { mEditText.requestFocus(); }});instrumentation.waitForIdleSync();instrumentation.sendStringSync(&quot;Click Test Button&quot;);instrumentation.waitForIdleSync(); Step 4: 點擊Test按鈕, 修改TextView 123456789instrumentation.runOnMainSync(new Runnable() { @Override public void run() { mTestButton.requestFocus(); }});instrumentation.waitForIdleSync();instrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_ENTER);instrumentation.waitForIdleSync(); Step 5: 執行測試 123assertEquals(&quot;Click Test Button&quot;, mEditText.getText().toString());assertEquals(&quot;Click Test Button&quot;, mTextView.getText().toString());assertEquals(mEditText.getText().toString(), mTextView.getText().toString()); Source Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class MainActivityTest_AIT2 extends ActivityInstrumentationTestCase2 { MainActivity mMainActivity; private Button mTestButton; private EditText mEditText; private TextView mTextView; public MainActivityTest_AIT2() { super(MainActivity.class); } @Override protected void setUp() throws Exception { super.setUp(); mMainActivity = (MainActivity) getActivity(); mTestButton = (Button) mMainActivity.findViewById(R.id.test_bt); mEditText = (EditText) mMainActivity.findViewById(R.id.enter); mTextView = (TextView) mMainActivity.findViewById(R.id.show_text); } public void testPreconditions() { assertNotNull(mMainActivity); assertNotNull(mTestButton); assertNotNull(mEditText); assertNotNull(mTextView); assertNotNull(mMainActivity); } @MediumTest public void testShowText() { Instrumentation instrumentation = getInstrumentation(); assertNotNull(instrumentation); instrumentation.runOnMainSync(new Runnable() { @Override public void run() { mEditText.requestFocus(); } }); instrumentation.waitForIdleSync(); instrumentation.sendStringSync(&quot;Click Test Button&quot;); instrumentation.waitForIdleSync(); instrumentation.runOnMainSync(new Runnable() { @Override public void run() { mTestButton.requestFocus(); } }); instrumentation.waitForIdleSync(); instrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_ENTER); instrumentation.waitForIdleSync(); assertEquals(&quot;Click Test Button&quot;, mEditText.getText().toString()); assertEquals(&quot;Click Test Button&quot;, mTextView.getText().toString()); assertEquals(mEditText.getText().toString(), mTextView.getText().toString()); }}","link":"/2016/08/01/2016/2016_08_01-android-app_instrumentation_test_2/"},{"title":"Android ServiceTestCase","text":"此篇主要試探討如何測試Android Service Class. 若測試中和Android API較無關係的話, 我們可將測試檔案放於module-name/src/test/java/ 路徑下. 若與Android API 相關的測試, 需將測試檔案放於module-name/src/androidTest/java/ 路徑下. (請參閱 Android App Test 基本概念) 在此篇我們使用Wifi 開關來做例子, 與Android API 相關, 所以需將測試檔案放於module-name/src/androidTest/java/ 路徑下 Step 1: 建造Service 類別 建造Service 類別, 並新增函數為開啟Wifi MainService.java123456789101112131415161718192021222324252627282930public class MainService extends Service { private final String TAG = &quot;Nick MainService&quot;; private final IBinder myLocalBinder = new ServiceBinder(); public class ServiceBinder extends Binder { public MainService getService() { return MainService.this; } } @Nullable @Override public IBinder onBind(Intent intent) { return myLocalBinder; } public void onCreate() { Log.w(TAG,&quot;onCreate&quot;); } public void enableWifi() { WifiManager wifiManager = (WifiManager) this.getSystemService(WIFI_SERVICE); wifiManager.setWifiEnabled(true); } public void onDestroy() { Log.w(TAG,&quot;onDestroy&quot;); }} Step 2: 建立測試檔 利用 Ctrl + Shift + T 建立 MainServiceTest.java 並繼承 InstrumentationTestCase Step 3: 測試 測試 startService 與 bindService 測試 startService 123456789@SmallTestpublic void testStartable() { Intent startIntent = new Intent(); startIntent.setClass(getContext(), MainService.class); startService(startIntent); MainService service = (MainService) getService(); assertNotNull(service);} 測試 bindService 12345678910@MediumTestpublic void testBindable() { Intent startIntent = new Intent(); startIntent.setClass(getContext(), MainService.class); IBinder serviceBinder = bindService(startIntent); assertNotNull(serviceBinder); MainService service = ((MainService.ServiceBinder) serviceBinder).getService(); assertNotNull(service);} Step 4: 測試開啟Wifi 功能 於setUp 取得context控制權, 並於tearDown() 釋放context控制權 123456789101112@Overridepublic void setUp() throws Exception { super.setUp(); Log.w(TAG, &quot;setUp&quot;); mContext = getContext();}@Overridepublic void tearDown() throws Exception { Log.w(TAG, &quot;tearDown&quot;); mContext = null; super.tearDown();} 測試開啟Wifi 功能 12345678910111213141516@MediumTestpublic void testEnableWifi() throws InterruptedException { Intent startIntent = new Intent(); startIntent.setClass(getContext(), MainService.class); IBinder serviceBinder = bindService(startIntent); assertNotNull(serviceBinder); MainService service = ((MainService.ServiceBinder) serviceBinder).getService(); assertNotNull(service); service.enableWifi(); Thread.sleep(1000); WifiManager wifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE); assertEquals(true, wifiManager.isWifiEnabled());} Source Code 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public class MainServiceTest extends ServiceTestCase { private final String TAG = &quot;Nick MainServiceTest&quot;; private Context mContext; public MainServiceTest() { super(MainService.class); } @Override public void setUp() throws Exception { super.setUp(); Log.w(TAG, &quot;setUp&quot;); mContext = getContext(); } @SmallTest public void testStartable() { Intent startIntent = new Intent(); startIntent.setClass(getContext(), MainService.class); startService(startIntent); MainService service = (MainService) getService(); assertNotNull(service); } @MediumTest public void testBindable() { Intent startIntent = new Intent(); startIntent.setClass(getContext(), MainService.class); IBinder serviceBinder = bindService(startIntent); assertNotNull(serviceBinder); MainService service = ((MainService.ServiceBinder) serviceBinder).getService(); assertNotNull(service); } @MediumTest public void testEnableWifi() throws InterruptedException { Intent startIntent = new Intent(); startIntent.setClass(getContext(), MainService.class); IBinder serviceBinder = bindService(startIntent); assertNotNull(serviceBinder); MainService service = ((MainService.ServiceBinder) serviceBinder).getService(); assertNotNull(service); service.enableWifi(); Thread.sleep(1000); WifiManager wifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE); assertEquals(true, wifiManager.isWifiEnabled()); } @Override public void tearDown() throws Exception { Log.w(TAG, &quot;tearDown&quot;); mContext = null; super.tearDown(); }}","link":"/2016/08/14/2016/2016_08_14-android-service_test_case/"},{"title":"Android ProviderTestCase2","text":"先前講過Activity Test, Unit Test, Service Test, 此篇來探討如何對Database做自動化測試. 由於Database為Android API 相關的測試, 需將測試檔案放於module-name/src/androidTest/java/ 路徑下. (請參閱 Android App Test 基本概念) Step 1: 產生測試檔 利用 Ctrl + Shift + T 建立 MainContentProviderTest.java並繼承ProviderTestCase2 Step 2: 初始化 傳入要測試的Class檔, 以及Database權限 123public MainContentProviderTest() { super(MainContentProvider.class, MainDbContract.AUTHORITY);} 需與AndroidManifest.xml 中宣告的權限一致. AndroidManifest.xml123&lt;provider android:name=&quot;.database.MainContentProvider&quot; android:authorities=&quot;com.projects.nick.database&quot; android:exported=&quot;false&quot; /&gt; Step 3: 建立自動化測試 資料插入測試 123456789101112131415@SmallTestpublic void testInsert() { Uri uri = MainDbContract.getWarriorsUri(); ContentValues values = new ContentValues(); values.put(Warriors.COLUMN_NAME, &quot;Thompson&quot;); values.put(Warriors.COLUMN_NUMBER, 11); // 插入後會產生一筆插入時的uri Uri resultingUri = getMockContentResolver().insert(uri, values); //檢查此筆uri不為NUll assertNotNull(resultingUri); //可根據此筆uri 查詢到在database的index long id = ContentUris.parseId(resultingUri); //檢查此筆index 有值 assertTrue(id &gt; 0); } 刪除資料測試 123456789101112@SmallTestpublic void testDelete() { //先插入一筆資料 testInsert(); Uri uri = MainDbContract.getWarriorsUri(); String selection = Warriors.COLUMN_NAME + &quot;=?&quot;; String[] selections = new String[] {&quot;Thompson&quot;}; //刪除資料, 並回傳刪除數量 int count = getMockContentResolver().delete(uri, selection, selections); assertEquals(1, count);} Source Code 1234567891011121314151617181920212223242526272829303132333435363738394041public class MainContentProviderTest extends ProviderTestCase2&lt;MainContentProvider&gt; { public MainContentProviderTest() { super(MainContentProvider.class, MainDbContract.AUTHORITY); } @Override protected void setUp() throws Exception { super.setUp(); } @SmallTest public void testInsert() { Uri uri = MainDbContract.getWarriorsUri(); ContentValues values = new ContentValues(); values.put(Warriors.COLUMN_NAME, &quot;Thompson&quot;); values.put(Warriors.COLUMN_NUMBER, 11); Uri resultingUri = getMockContentResolver().insert(uri, values); // 插入後會產生一筆插入時的uri assertNotNull(resultingUri); //檢查此筆uri不為NUll long id = ContentUris.parseId(resultingUri); //可根據此筆uri 查詢到在database的index assertTrue(id &gt; 0); //檢查此筆index 有值 } @SmallTest public void testDelete() { //先插入一筆資料 testInsert(); Uri uri = MainDbContract.getWarriorsUri(); String selection = Warriors.COLUMN_NAME + &quot;=?&quot;; String[] selections = new String[] {&quot;Thompson&quot;}; //刪除資料, 並回傳刪除數量 int count = getMockContentResolver().delete(uri, selection, selections); assertEquals(1, count); } @Override protected void tearDown() throws Exception { super.tearDown(); }}","link":"/2016/08/16/2016/2016_08_16-android-provider-test/"},{"title":"iOS - Loading View","text":"在一些情況下, 我們需要使用動畫來表示下載, 讀取等UI 顯示. 可使用 UIActivityIndicatorView 來表示. Step 1: 在畫面上新增 UIActivityIndicatorView Object Step 2: 與程式建立連結 開始動畫mLoadingView.startAnimating(); 停止動畫mLoadingView.stopAnimating(); 當動畫停止時隱藏mLoadingView.hidesWhenStopped = true;","link":"/2016/08/15/2016/2016_08_25-ios-loading_view/"},{"title":"iOS - 搜尋藍芽裝置 Part II - 避免搜尋到重複的裝置","text":"之前介紹過如何搜尋藍芽裝置 （請參考搜尋藍芽裝置） 接下來我們使用 Dictionary 來記錄搜尋到的裝置 Step 1: 新增Class BtDevice 來存放裝置資訊 BtDevice.swift123456import Foundationstruct BtDevice { var uuid: String!; var name: String?;} Step 2: Create Dictionary 使用 Bluetooth UUID 當作 Key 12var mFoundDevices : Dictionary&lt;String , BtDevice&gt;!;mFoundDevices = [String : BtDevice](); Step 3: 將發現的裝置存放在Dictionary 12345678func centralManager(central: CBCentralManager, didDiscoverPeripheral peripheral: CBPeripheral, advertisementData: [String : AnyObject], RSSI: NSNumber) { print(&quot;Device: \\(peripheral.name) : \\(peripheral.identifier.UUIDString)&quot;); let btUuid = peripheral.identifier.UUIDString; let btName = peripheral.name let btDevice = BtDevice(uuid: btUuid, name: btName); mFoundDevices[btUuid] = btDevice;} Step 4: 過濾已發現的裝置 由於搜尋藍芽裝置時，可能會搜尋到重複的裝置，所以我們需要先過濾此裝置是否已被搜尋過. 若是還未搜尋到的裝置再加入Dictionary中. 123456789101112131415161718func centralManager(central: CBCentralManager, didDiscoverPeripheral peripheral: CBPeripheral, advertisementData: [String : AnyObject], RSSI: NSNumber) { print(&quot;Device: \\(peripheral.name) : \\(peripheral.identifier.UUIDString)&quot;); if (!isAlreadyFound(peripheral.identifier.UUIDString)) { insertFoundDevice(peripheral.identifier.UUIDString, newName: peripheral.name); } else { print(&quot;This Device is discovered: \\(peripheral.identifier.UUIDString)&quot;); } } internal func isAlreadyFound(uuid : String!) -&gt; Bool { return mFoundDevices[uuid] != nil; } internal func insertFoundDevice(newUuid: String!, newName: String?) { let btDevice = BtDevice(uuid: newUuid, name: newName); mFoundDevices[newUuid] = btDevice; } Step 5: 清空 Dictionary 在搜尋前, 我們也必須先清空搜尋過的資料. 1mFoundDevices.removeAll(); Source Code 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import Foundationimport CoreBluetoothclass BtManager : NSObject { var mCBCentralManager: CBCentralManager! var mFoundDevices : Dictionary&lt;String , BtDevice&gt;!; override init() { super.init(); initCBCentralManager(); mFoundDevices = [String : BtDevice](); } internal func initCBCentralManager() { mCBCentralManager = CBCentralManager(delegate: self, queue: nil, options: [CBCentralManagerOptionShowPowerAlertKey: true]); } func isScanning() -&gt; Bool { return mCBCentralManager.isScanning; } func startToScan() { if (mCBCentralManager.state == CBCentralManagerState.PoweredOff) { print(&quot;state is off&quot;); initCBCentralManager(); } else { if (isScanning()) { print(&quot;state is scanning&quot;); } else { clearAllFoundDevices(); mCBCentralManager.scanForPeripheralsWithServices(nil, options: nil); print(&quot;start to scan: \\(isScanning())&quot;); } } } func stopScanning() { mCBCentralManager.stopScan(); }} extension BtManager : CBCentralManagerDelegate { func centralManagerDidUpdateState(central: CBCentralManager) { switch (central.state) { case CBCentralManagerState.PoweredOn: print(&quot;state On&quot;); case CBCentralManagerState.PoweredOff: print(&quot;state Off&quot;); case CBCentralManagerState.Unknown: fallthrough; default: print(&quot;state Unknow&quot;); } } func centralManager(central: CBCentralManager, didDiscoverPeripheral peripheral: CBPeripheral, advertisementData: [String : AnyObject], RSSI: NSNumber) { print(&quot;Device: \\(peripheral.name) : \\(peripheral.identifier.UUIDString)&quot;); if (!isAlreadyFound(peripheral.identifier.UUIDString)) { insertFoundDevice(peripheral.identifier.UUIDString, newName: peripheral.name); } else { print(&quot;This Device is discovered: \\(peripheral.identifier.UUIDString)&quot;); } } internal func isAlreadyFound(uuid : String!) -&gt; Bool { return mFoundDevices[uuid] != nil; } internal func insertFoundDevice(newUuid: String!, newName: String?) { let btDevice = BtDevice(uuid: newUuid, name: newName); mFoundDevices[newUuid] = btDevice; } internal func clearAllFoundDevices() { mFoundDevices.removeAll(); }}","link":"/2016/08/25/2016/2016_08_25-ios-search_bluetooth_devices_2/"},{"title":"iOS - 顯示藍芽搜尋裝置","text":"此篇主要是如何顯示藍芽裝置 結合之前搜尋藍芽裝置與 TableView分為兩個群組的文章做個整合. Step 1: 建立BtDelegate protocol BtDelegate 主要是將搜尋到的藍芽裝置, 傳回給上層UI 12345import Foundationprotocol BtDelegate { func findBtDevice(name: String?)} Step 2: BtManager 搜尋到裝置後, 通知上層UI 12345678910111213141516class BtManager : NSObject { var mCBCentralManager: CBCentralManager! //callback manager var delegate : BtDelegate? func centralManager(central: CBCentralManager, didDiscoverPeripheral peripheral: CBPeripheral, advertisementData: [String : AnyObject], RSSI: NSNumber) { print(&quot;Device: \\(peripheral.name) : \\(peripheral.identifier.UUIDString)&quot;); if (!isAlreadyFound(peripheral.identifier.UUIDString)) { insertFoundDevice(peripheral.identifier.UUIDString, newName: peripheral.name); delegate!.findBtDevice(peripheral.name); } else { print(&quot;This Device is discovered: \\(peripheral.identifier.UUIDString)&quot;); } } Step 3: ViewController 繼承 BtDelegate, 並設定給 BtManager 123456789101112131415class ViewController: UIViewController { var mBtManager : BtManager!; override func viewDidLoad() { super.viewDidLoad() mBtManager = BtManager(); mBtManager.delegate = self; } extension ViewController: BtDelegate { func findBtDevice(name: String?) { print(&quot;Find Device: \\(name)&quot;); } }} Step 4: 顯示於TableView 上 UITableView 與程式建立連結 監聽TableView Data Change 1mDeviceTableView.dataSource = self; 插入資料到TableViewCell 中 在此例子中, 我們將新資料插到最後一排.首先先在 BtManage.swift 中取得目前搜尋到裝置的個數 123456class BtManager : NSObject { var mFoundDevices : Dictionary&lt;String , BtDevice&gt;!; func getFoundDevicesSize() -&gt; Int { return mFoundDevices.count; }} 插入資料 (由於搜尋到的裝置我們放在Group 1 , 所以 inSection : 0) 123456789extension ViewController: BtDelegate { func findBtDevice(name: String?) { print(&quot;Find Device: \\(name)&quot;); let indexPath = NSIndexPath( forRow: mBtManager.getFoundDevicesSize()-1, inSection: 0); mDeviceTableView.insertRowsAtIndexPaths([indexPath], withRowAnimation: UITableViewRowAnimation.Automatic); }} 設定目前Row個數 12345678910func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { switch (section) { case 0: return mBtManager.getFoundDevicesSize(); case 1: return 0; default: return 0; } } 設定TableViewCell內容 首先在BtManager.swift中, 取得BT Device Name 123456789func getFoundDeviceName(index: Int) -&gt; String? { print(&quot;index: \\(index)&quot;); let keyIndex = mFoundDevices.startIndex.advancedBy(index); print(&quot;keyIndex: \\(keyIndex)&quot;); let key = mFoundDevices.keys[keyIndex]; print(&quot;key: \\(key)&quot;); let btDevice = mFoundDevices[key]!; return btDevice.name;} 設定內容 12345678910111213func tableView(tableView: UITableView,cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { var deviceName : String?; switch(indexPath.section) { case 0: deviceName = mBtManager.getFoundDeviceName(indexPath.row); default: deviceName = &quot;Unknow&quot;; } let cell: UITableViewCell = UITableViewCell( style:UITableViewCellStyle.Subtitle, reuseIdentifier: &quot;deviceCell&quot;); cell.textLabel?.text = &quot;Device Name: \\(deviceName)&quot;; return cell; } Step 5: 重新搜尋時, 必須清空TableView內容 12345678910func startScan() { mLoadingView.startAnimating(); mBtManager.startToScan(); cleanAllFoundDevices(); changeToStopButton();}private func cleanAllFoundDevices() { mDeviceTableView.reloadData();} Source Code BtDevice class 的定義可參考iOS - 搜尋藍芽裝置 Part II - 避免搜尋到重複的裝置 BtManager.swift123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596import Foundationimport CoreBluetoothclass BtManager : NSObject { var mCBCentralManager: CBCentralManager! //callback manager var delegate : BtDelegate? var mFoundDevices : Dictionary&lt;String , BtDevice&gt;!; override init() { super.init(); initCBCentralManager(); mFoundDevices = [String : BtDevice](); } internal func initCBCentralManager() { mCBCentralManager = CBCentralManager(delegate: self, queue: nil, options: [CBCentralManagerOptionShowPowerAlertKey: true]); } func isScanning() -&gt; Bool { return mCBCentralManager.isScanning; } func startToScan() { if (mCBCentralManager.state == CBCentralManagerState.PoweredOff) { print(&quot;state is off&quot;); initCBCentralManager(); } else { if (isScanning()) { print(&quot;state is scanning&quot;); } else { clearAllFoundDevices(); mCBCentralManager.scanForPeripheralsWithServices(nil, options: nil); print(&quot;start to scan: \\(isScanning())&quot;); } } } func stopScanning() { mCBCentralManager.stopScan(); } func getFoundDevicesSize() -&gt; Int { return mFoundDevices.count; } func getFoundDeviceName(index: Int) -&gt; String? { print(&quot;index: \\(index)&quot;); let keyIndex = mFoundDevices.startIndex.advancedBy(index); print(&quot;keyIndex: \\(keyIndex)&quot;); let key = mFoundDevices.keys[keyIndex]; print(&quot;key: \\(key)&quot;); let btDevice = mFoundDevices[key]!; return btDevice.name; }}extension BtManager : CBCentralManagerDelegate { func centralManagerDidUpdateState(central: CBCentralManager) { switch (central.state) { case CBCentralManagerState.PoweredOn: print(&quot;state On&quot;); case CBCentralManagerState.PoweredOff: print(&quot;state Off&quot;); case CBCentralManagerState.Unknown: fallthrough; default: print(&quot;state Unknow&quot;); } } func centralManager(central: CBCentralManager, didDiscoverPeripheral peripheral: CBPeripheral, advertisementData: [String : AnyObject], RSSI: NSNumber) { print(&quot;Device: \\(peripheral.name) : \\(peripheral.identifier.UUIDString)&quot;); if (!isAlreadyFound(peripheral.identifier.UUIDString)) { insertFoundDevice(peripheral.identifier.UUIDString, newName: peripheral.name); delegate!.findBtDevice(peripheral.name); } else { print(&quot;This Device is discovered: \\(peripheral.identifier.UUIDString)&quot;); } } internal func isAlreadyFound(uuid : String!) -&gt; Bool { return mFoundDevices[uuid] != nil; } internal func insertFoundDevice(newUuid: String!, newName: String?) { let btDevice = BtDevice(uuid: newUuid, name: newName); mFoundDevices[newUuid] = btDevice; } internal func clearAllFoundDevices() { mFoundDevices.removeAll(); }} ViewController.swift123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104import UIKitclass ViewController: UIViewController { var mBtManager : BtManager!; @IBOutlet weak var mLoadingView: UIActivityIndicatorView! @IBOutlet weak var mDeviceTableView: UITableView! override func viewDidLoad() { super.viewDidLoad() mBtManager = BtManager(); mBtManager.delegate = self; mLoadingView.stopAnimating(); mLoadingView.hidesWhenStopped = true; mDeviceTableView.dataSource = self; } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() } @IBAction func prepareScan(sender: AnyObject) { startScan(); } func startScan() { mLoadingView.startAnimating(); mBtManager.startToScan(); cleanAllFoundDevices(); changeToStopButton(); } private func cleanAllFoundDevices() { mDeviceTableView.reloadData(); } func stopScan() { mLoadingView.stopAnimating(); mBtManager.stopScanning(); changeToScanButton(); } private func changeToStopButton() { let stopScanningButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Stop, target: self, action: #selector(ViewController.stopScan)); self.navigationItem.rightBarButtonItem = stopScanningButton; } private func changeToScanButton() { let scanButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Search, target: self, action: #selector(ViewController.startScan)); self.navigationItem.rightBarButtonItem = scanButton; }}extension ViewController : UITableViewDataSource { func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int { return 2; } func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { switch (section) { case 0: return &quot;Found Devices:&quot;; case 1: return &quot;Connected Devices:&quot;; default: return &quot;Unknow&quot;; } } func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { switch (section) { case 0: return mBtManager.getFoundDevicesSize(); case 1: return 0; default: return 0; } } func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { var deviceName : String?; switch(indexPath.section) { case 0: deviceName = mBtManager.getFoundDeviceName(indexPath.row); default: deviceName = &quot;Unknow&quot;; } let cell: UITableViewCell = UITableViewCell( style:UITableViewCellStyle.Subtitle, reuseIdentifier: &quot;deviceCell&quot;); cell.textLabel?.text = &quot;Device Name: \\(deviceName)&quot;; return cell; }}extension ViewController: BtDelegate { func findBtDevice(name: String?) { print(&quot;Find Device: \\(name)&quot;); let indexPath = NSIndexPath(forRow: mBtManager.getFoundDevicesSize()-1, inSection: 0); mDeviceTableView.insertRowsAtIndexPaths([indexPath], withRowAnimation: UITableViewRowAnimation.Automatic); }}","link":"/2016/08/25/2016/2016_08_25-ios-show_bluetooth_devices/"},{"title":"iOS - 客製化Dialog","text":"此篇主要介紹如何客製化Dialog。 Step 1: 新增 View Controller storyboard中有兩個View Controller一個為主畫面, 畫面中有呼叫Custom Dialog 的 button一個為Dialog畫面. Step 2: 修改為透明背景 將Dialog畫面 (View Object), 設定背景顏色, 並調整透明度 Step 3: 取消Opaque選項 將Dialog畫面 (View Object)的Opaque選項取消 Step 4: 調整UIViewController 將Transition Style 調整為 Cross Dissolve將Presentation 調整為Over Current Context Step 5: 建立Action Segue 在主畫面的Show Custom Dialog按下右鍵並拖曳到Dialog UIViewController選取Action Segue: Present Modally Step 6: 增加View至Dialog UIViewController Step 7: 在View中客製化元件 執行結果","link":"/2016/09/30/2016/2016_09_30-ios-custom_dialog/"},{"title":"iOS - 動態調整Dialog 高度","text":"承上篇 - iOS - 客製化Dialog 若Dialog中有 TextField的時候, 可能會被軟體鍵盤所蓋住因此必須使用動態調整Dialog的方式來解決. Step 1: 監聽與取消監聽軟體鍵盤變化 在viewWillAppear監聽軟體鍵盤變化在viewWillDisappear取消監聽 123456789101112131415161718override func viewWillAppear(animated: Bool) { NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(Dialog.keyboardWillShow(_:)), name: UIKeyboardWillShowNotification, object: nil) NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(Dialog.keyboardWillHidden(_:)), name: UIKeyboardWillHideNotification, object: nil) } override func viewWillDisappear(animated: Bool) { NSNotificationCenter.defaultCenter().removeObserver(self, name: UIKeyboardWillShowNotification, object: nil) NSNotificationCenter.defaultCenter().removeObserver(self, name: UIKeyboardWillHideNotification, object: nil) } func keyboardWillShow(notification: NSNotification) { } func keyboardWillHidden(notification: NSNotification) { } Step 2: Reference TextField and 監聽TextField選取變化 如果有多個TextField時, 每個TextField的位置都不一樣, 所以我們必須得知目前被選到的TextField是哪一個. 設立變數 1var selectedEditText : UITextField? 註冊TextField delegate 12345@IBOutlet weak var mEditText: UITextField! override func viewDidLoad() { super.viewDidLoad() mEditText.delegate = self; } 監聽TextField選取變化 1234567891011121314extension Dialog : UITextFieldDelegate { func textFieldDidBeginEditing(textField: UITextField) { selectedEditText = textField } func textFieldShouldReturn(textField: UITextField) -&gt; Bool { textField.resignFirstResponder() return true } func textFieldDidEndEditing(textField: UITextField) { selectedEditText = nil }} Step 3: 將畫面向上調整 由於我們需要計算Dialog View在整個Frame的y軸位置, 所以必須先reference Dialog View後, 再使用mDialogView.frame.origin.y 得知y軸位置. 取得鍵盤高度 123456func keyboardWillShow(notification: NSNotification) { let userInfo: NSDictionary? = notification.userInfo let aValue: NSValue? = userInfo?.objectForKey(UIKeyboardFrameEndUserInfoKey) as? NSValue let keyboardRect = aValue?.CGRectValue() let keyboardHeight = keyboardRect?.size.height} 計算輸入框和鍵盤高度的差值 由上圖得知 self.view.frame.size.height - keyboardHeight = 畫面剩餘空間 若mDialogVIew.frame.origin.y + frame.origin.y 的數值大於畫面剩餘空間的話,表示輸入框會被鍵盤所覆蓋. 所以我們利用此公式來算出差值. 1let offset = frame.origin.y + mDialogView.frame.origin.y + 36 - (self.view.frame.size.height - keyboardHeight!) 36 這個數值可根據文字的大小來動態調整, 或者使用輸入框的高度 使用動畫來調整畫面 1234567UIView.animateWithDuration(0.3, animations: { () -&gt; Void in if (offset &gt; 0) { self.view.frame.origin.y -= offset; } else { self.view.frame.origin.y = 0; } }) Step 4: 輸入完畢後, 恢復畫面位置 12345func keyboardWillHidden(notification: NSNotification) { UIView.animateWithDuration(0.3, animations: { () -&gt; Void in self.view.frame.origin.y = 0; }) } 執行結果 Source Code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import UIKitclass Dialog: UIViewController { @IBOutlet weak var mEditText: UITextField! @IBOutlet weak var mDialogView: UIView! var selectedEditText : UITextField? override func viewDidLoad() { super.viewDidLoad() mEditText.delegate = self; } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() } override func viewWillAppear(animated: Bool) { NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(Dialog.keyboardWillShow(_:)), name: UIKeyboardWillShowNotification, object: nil) NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(Dialog.keyboardWillHidden(_:)), name: UIKeyboardWillHideNotification, object: nil) } override func viewWillDisappear(animated: Bool) { NSNotificationCenter.defaultCenter().removeObserver(self, name: UIKeyboardWillShowNotification, object: nil) NSNotificationCenter.defaultCenter().removeObserver(self, name: UIKeyboardWillHideNotification, object: nil) } func keyboardWillShow(notification: NSNotification) { let userInfo: NSDictionary? = notification.userInfo let aValue: NSValue? = userInfo?.objectForKey(UIKeyboardFrameEndUserInfoKey) as? NSValue let keyboardRect = aValue?.CGRectValue() let keyboardHeight = keyboardRect?.size.height let frame = selectedEditText!.frame let offset = frame.origin.y + mDialogView.frame.origin.y + 36 - (self.view.frame.size.height - keyboardHeight!) UIView.animateWithDuration(0.3, animations: { () -&gt; Void in if (offset &gt; 0) { self.view.frame.origin.y -= offset; } else { self.view.frame.origin.y = 0; } }) } func keyboardWillHidden(notification: NSNotification) { UIView.animateWithDuration(0.3, animations: { () -&gt; Void in self.view.frame.origin.y = 0; }) }}extension Dialog : UITextFieldDelegate { func textFieldDidBeginEditing(textField: UITextField) { selectedEditText = textField } func textFieldShouldReturn(textField: UITextField) -&gt; Bool { textField.resignFirstResponder() return true } func textFieldDidEndEditing(textField: UITextField) { selectedEditText = nil }}","link":"/2016/10/13/2016/2016_10_13-ios-adjust_dialog_height/"},{"title":"iOS - ImageField 點擊事件與從圖片庫中選取圖片","text":"當畫面中有UIImageView且需從圖片庫中選取圖片時, 該如何實作呢? Step 1: 設定圖片並Reference到Source Code Step 2: 設定點擊圖片的處理 由於UIImageView沒有Click Event, 所以我們使用UITapGestureRecognizer來實現 123456789101112131415@IBOutlet weak var imageField: UIImageView! override func viewDidLoad() { super.viewDidLoad() let tapGestureRecognizer = UITapGestureRecognizer(target:self, action:#selector(ViewController.imageClick(_:))) imageField.userInteractionEnabled = true imageField.addGestureRecognizer(tapGestureRecognizer) } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() } internal func imageClick(img: AnyObject) { } Step 3: 請求使用圖片庫的權限 123456internal func imageClick(img: AnyObject) { if UIImagePickerController.isSourceTypeAvailable(.PhotoLibrary){ } else { print(&quot;Can't read the album!&quot;) }} Step 4: 設定UIImagePickerController 使用UIImagePickerController選取圖片, 並註冊 UIImagePickerControllerDelegate &amp; UINavigationControllerDelegate 12345678910111213internal func imageClick(img: AnyObject) { if UIImagePickerController.isSourceTypeAvailable(.PhotoLibrary){ let picker = UIImagePickerController() picker.delegate = self picker.sourceType = UIImagePickerControllerSourceType.PhotoLibrary picker.allowsEditing = true; self.presentViewController(picker, animated: true, completion: { () -&gt; Void in }) } else { print(&quot;Can't read the album!&quot;) } } 1234567extension ViewController : UIImagePickerControllerDelegate { func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) { }}extension ViewController : UINavigationControllerDelegate {} 如果應用程式只使用Landscape 的話, 會發生UIApplicationInvalidInterfaceOrientation Exception Reason: ‘Supported orientations has no common orientation with the application, and [PUUIAlbumListViewController shouldAutorotate] is returning YES’ 在iOS 的 Docutment 中提到UIUmagePickerController只支援portrait mode. 所以要將Portrait選項打勾 Step 5: 使用客製化UIImagePickerController, 來維持Landscape 若接受螢幕可自動切換 Landscape/Portrait時, 可跳過此步驟. 若你的應用程式為Landscape時, 可使用客製化的UIImagePickerController並覆寫以下程式碼. shouldAutorotate : 將自動旋轉屏幕關閉 supportedInterfaceOrientatios preferredInterfaceOrientationForPresentation : 設定為Landscape CustomImagePicker Source Code: CustomImagePicker.swift1234567891011121314151617181920212223import UIKitclass CustomImagePicker: UIImagePickerController { override func viewDidLoad() { super.viewDidLoad() } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() } override func shouldAutorotate() -&gt; Bool { return false } override func supportedInterfaceOrientations() -&gt; UIInterfaceOrientationMask { return UIInterfaceOrientationMask(rawValue: UIInterfaceOrientationMask.LandscapeRight.rawValue); } override func preferredInterfaceOrientationForPresentation() -&gt; UIInterfaceOrientation { return UIInterfaceOrientation.LandscapeRight; }} 將程式碼改為 12345678910111213internal func imageClick(img: AnyObject) { if UIImagePickerController.isSourceTypeAvailable(.PhotoLibrary){ let picker = CustomImagePicker() picker.delegate = self picker.sourceType = UIImagePickerControllerSourceType.PhotoLibrary picker.allowsEditing = true; self.presentViewController(picker, animated: true, completion: { () -&gt; Void in }) } else { print(&quot;Can't read the album!&quot;) } } Step 6: 設置圖片並關閉UIImagePicker 12345678extension ViewController : UIImagePickerControllerDelegate { func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) { let image = info[UIImagePickerControllerOriginalImage] as! UIImage imageField.image = image; picker.dismissViewControllerAnimated(true, completion: nil) }} 執行結果 點擊並選擇照片 Source Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445import UIKitclass ViewController: UIViewController { @IBOutlet weak var imageField: UIImageView! override func viewDidLoad() { super.viewDidLoad() let tapGestureRecognizer = UITapGestureRecognizer(target:self, action:#selector(ViewController.imageClick(_:))) imageField.userInteractionEnabled = true imageField.addGestureRecognizer(tapGestureRecognizer) } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() } internal func imageClick(img: AnyObject) { if UIImagePickerController.isSourceTypeAvailable(.PhotoLibrary){ let picker = CustomImagePicker() picker.delegate = self picker.sourceType = UIImagePickerControllerSourceType.PhotoLibrary picker.allowsEditing = true; self.presentViewController(picker, animated: true, completion: { () -&gt; Void in }) } else { print(&quot;Can't read the album!&quot;) } }}extension ViewController : UIImagePickerControllerDelegate { func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) { let image = info[UIImagePickerControllerOriginalImage] as! UIImage imageField.image = image; picker.dismissViewControllerAnimated(true, completion: nil) }}extension ViewController : UINavigationControllerDelegate {}","link":"/2016/10/13/2016/2016_10_13-ios-choose_image_from_gallery/"},{"title":"iOS - 跳至下個輸入框","text":"若一個畫面中有多個輸入框, 當輸入完之後, 想要自動跳至下個輸入框, 就算Storyboard中設置為Next, 依舊是無法自動跳轉的, 此時需要使用程式來控制. Step 1: Reference TextFields and 註冊UITextFieldDelegate 123456789101112131415161718import UIKitclass ViewController: UIViewController { @IBOutlet weak var nameField: UITextField! @IBOutlet weak var bdField: UITextField! @IBOutlet weak var heightField: UITextField! @IBOutlet weak var weightField: UITextField! @IBOutlet weak var idField: UITextField! override func viewDidLoad() { super.viewDidLoad() nameField.delegate = self; bdField.delegate = self; heightField.delegate = self; weightField.delegate = self; idField.delegate = self; }} Step 2: 監聽Return Key 12345extension ViewController : UITextFieldDelegate { func textFieldShouldReturn(textField: UITextField) -&gt; Bool { return true }} Step 3: 跳轉控制 12345678910111213141516extension ViewController : UITextFieldDelegate { func textFieldShouldReturn(textField: UITextField) -&gt; Bool { if textField == self.nameField { self.bdField.becomeFirstResponder() } else if textField == self.bdField { self.heightField.becomeFirstResponder() } else if textField == self.heightField { self.weightField.becomeFirstResponder() } else if textField == self.weightField { self.idField.becomeFirstResponder() } else { //nothing else } return true }} Source Code 12345678910111213141516171819202122232425262728293031323334353637383940import UIKitclass ViewController: UIViewController { @IBOutlet weak var nameField: UITextField! @IBOutlet weak var bdField: UITextField! @IBOutlet weak var heightField: UITextField! @IBOutlet weak var weightField: UITextField! @IBOutlet weak var idField: UITextField! override func viewDidLoad() { super.viewDidLoad() nameField.delegate = self; bdField.delegate = self; heightField.delegate = self; weightField.delegate = self; idField.delegate = self; } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() }}extension ViewController : UITextFieldDelegate { func textFieldShouldReturn(textField: UITextField) -&gt; Bool { if textField == self.nameField { self.bdField.becomeFirstResponder() } else if textField == self.bdField { self.heightField.becomeFirstResponder() } else if textField == self.heightField { self.weightField.becomeFirstResponder() } else if textField == self.weightField { self.idField.becomeFirstResponder() } else { //nothing else } return true }}","link":"/2016/10/13/2016/2016_10_13-ios-next_textfield/"},{"title":"iOS - 下拉式選單","text":"iOS 目前沒有提供下拉式選單的UI物件供設計者使用. 若畫面中需要有下拉式選單時, 只能客製化了. 網路上搜尋到使用TextField來模擬, 不過自己實作時會遇到無法隱藏軟體鍵盤的問題.每次點擊時都會出現軟體鍵盤. 因此我改用Button來解決此問題. Step 1: 拉好Button物件, 並Reference到Source Code 可將文字改成黑色, 並設計下拉式icon (image view) 在旁邊, 模擬成下拉式選單 Step 2: 建立PickerView 設定下拉式選單的內容, 在此範例使用選擇 “綠茶”, “紅茶”, “烏龍茶” 12345678910@IBAction func openMenu(sender: AnyObject) { showPicker() } internal func showPicker() { let pickerView = UIPickerView(frame:CGRectMake(0, 0, 200, 100)) pickerView.showsSelectionIndicator = true pickerView.dataSource = self pickerView.delegate = self} 設定選單中欄位與列的個數 123456789extension ViewController : UIPickerViewDataSource { func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -&gt; Int { return self.dataArray.count } func numberOfComponentsInPickerView(pickerView: UIPickerView) -&gt; Int { return 1 }} 設定資料內容和選擇到時該如何更新UI的函數 123456789extension ViewController : UIPickerViewDelegate { func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -&gt; String? { return self.dataArray[row] } func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) { //update UI }} Step 3: 建立ToolBar 設定下拉式選單的畫面與位置 123self.sortView = UIToolbar(frame:CGRectMake(menuField.frame.origin.x, menuField.frame.origin.y + menuField.frame.height, 200, 130)) self.sortView!.barStyle = UIBarStyle.Defaultself.sortView!.backgroundColor = UIColor.blackColor(); 設定完成的按鈕 123456 let doneButton = UIBarButtonItem(title: &quot;Done&quot;, style: UIBarButtonItemStyle.Done, target: self, action: #selector(ViewController.doneClicked))//Using flexibleSpace to setup the position of Done buttonlet flexibleSpace = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.FlexibleSpace, target: nil, action: nil)self.sortView!.setItems([flexibleSpace, doneButton, flexibleSpace], animated: true) 選擇後, 將下拉式選單隱藏 1234567func doneClicked() { if (nil != self.sortView) { self.sortView!.removeFromSuperview() } else { //nothing else } } Step 4: 將PickerView放到下拉式選單中 1234//add pickerview into Pull-Down Menuself.sortView!.addSubview(pickerView);//show Pull-Down Menuself.view.addSubview(self.sortView!) 執行結果 Source Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import UIKitclass ViewController: UIViewController { @IBOutlet weak var menuField: UIButton! var sortView : UIToolbar? let dataArray = [&quot;綠茶&quot;, &quot;紅茶&quot;, &quot;烏龍茶&quot;] override func viewDidLoad() { super.viewDidLoad() } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() } @IBAction func openMenu(sender: AnyObject) { showPicker() } internal func showPicker() { //Create PickerView let pickerView = UIPickerView(frame:CGRectMake(0, 0, 200, 100)) pickerView.showsSelectionIndicator = true pickerView.dataSource = self pickerView.delegate = self //Create Pull-Down Menu, and adjust position self.sortView = UIToolbar(frame:CGRectMake(menuField.frame.origin.x, menuField.frame.origin.y + menuField.frame.height, 200, 130)) self.sortView!.barStyle = UIBarStyle.Default self.sortView!.backgroundColor = UIColor.blackColor(); //Create Done Button let doneButton = UIBarButtonItem(title: &quot;Done&quot;, style: UIBarButtonItemStyle.Done, target: self, action: #selector(ViewController.doneClicked)) //Using flexibleSpace to setup the position of Done button let flexibleSpace = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.FlexibleSpace, target: nil, action: nil) self.sortView!.setItems([flexibleSpace, doneButton, flexibleSpace], animated: true) //add pickerview into Pull-Down Menu self.sortView!.addSubview(pickerView); //show Pull-Down Menu self.view.addSubview(self.sortView!) } func doneClicked() { if (nil != self.sortView) { self.sortView!.removeFromSuperview() } else { //nothing else } }} extension ViewController : UIPickerViewDataSource { func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -&gt; Int { return self.dataArray.count } func numberOfComponentsInPickerView(pickerView: UIPickerView) -&gt; Int { return 1 }} extension ViewController : UIPickerViewDelegate { func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -&gt; String? { return self.dataArray[row] } func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) { //update UI }}","link":"/2016/10/13/2016/2016_10_13-spinner/"},{"title":"iOS - PageViewController &amp; SegmentedControl","text":"若要在一個頁面中使用 SegmentedControl 和 PageViewController 來轉換頁面該如何實作呢？ Step 1: 製作畫面 在主頁面上增加控制項 Segmented Control 新增兩個ViewController頁面, 並設置storyboard id 為firstPage, secondPage Step 2: Reference SegmentedControl 在ViewController.swift中, 設置SegmentedControl物件和點擊事件. 使用UISegmentedControl.selectedSegmentIndex可得知目前所按到的tab為何 Step 3: 設置 PageViewController 設置PageView內容 新增PageViewController 1var pageController: UIPageViewController! 使用水平滾動的方式變換頁面 1pageController = UIPageViewController(transitionStyle: .Scroll, navigationOrientation:.Horizontal, options: nil) 設置PageView顯示位置 1pageController!.view.frame = CGRectMake(0, mPageSegment.frame.origin.y + mPageSegment.frame.height, view.frame.size.width, view.frame.size.height); 設置首頁 12currentPageIndex = 0; pageController.setViewControllers([viewControllers.objectAtIndex(currentPageIndex) as! UIViewController], direction: .Forward, animated: false) {(isFinished:Bool) -&gt; Void in} 監聽頁面變化 UIPageViewControllerDelegate及頁面資料UIPageViewControllerDataSource 123456789101112131415161718192021222324pageController.delegate = self;pageController.dataSource = self;extension ViewController: UIPageViewControllerDataSource { func pageViewController(pageViewController: UIPageViewController, viewControllerBeforeViewController viewController: UIViewController) -&gt; UIViewController? { return nil } func pageViewController(pageViewController: UIPageViewController, viewControllerAfterViewController viewController: UIViewController) -&gt; UIViewController? { return nil }} extension ViewController: UIPageViewControllerDelegate { func pageViewController(pageViewController: UIPageViewController, }} 將PageViewController新增至畫面中 12self.addChildViewController(pageController)self.view.addSubview(pageController.view) Step 4: 設置轉換頁面的資料 由左至右滑動時, 也就是往前翻頁, 若前頁的上一頁的頁數小於０時, 則回傳nil(若目前第二頁時, 往前翻頁為第一頁, 而第一頁的前頁為nil) 123456789func pageViewController(pageViewController: UIPageViewController, viewControllerBeforeViewController viewController: UIViewController) -&gt; UIViewController? { currentPageIndex = viewController.view.tag let pageIndex = viewController.view.tag - 1; if pageIndex &lt; 0 { return nil } return viewControllers[pageIndex] as? UIViewController } 由右至左滑動時, 也就是往後翻頁, 若後頁的下一頁的頁數大於總頁數時, 則回傳nil(若目前第一頁時, 往後翻頁為第二頁, 而第二頁的下頁為nil) 123456789func pageViewController(pageViewController: UIPageViewController, viewControllerAfterViewController viewController: UIViewController) -&gt; UIViewController? { currentPageIndex = viewController.view.tag let pageIndex = viewController.view.tag + 1; if pageIndex &gt; 1 { return nil } return viewControllers[pageIndex] as? UIViewController } 以上我們完成了PageViewController的控制, 接下來要結合Segmented Controll來控制PageView Step 5: Segment的變換 對於SegmentControll的變換, 使用SegmentControll.selectedSegmentIndex來改變選取的Tab 在Step 4 的兩個步驟中, 加入 mPageSegment.selectedSegmentIndex = currentPageIndex; Step 6: 點擊SegmentControll來改變PageView 之前發生過使用點擊來轉換頁面太快時, 會出NSInternalInconsistencyException 原因是切換PageView時設定了轉移動畫, 當動畫還未結束時, 又再一次要求改變PageView所導致. 解決方式： 轉換PageView時, 不設定動畫 1pageController!.setViewControllers([self.viewControllers[index] as! UIViewController], direction: .Reverse, animated: false, completion:nil) 必須等動畫完成後, 才能再轉換PageView 在此我們採用第二種方式, 當點擊SegmentedControll時, 將enabled設為false.動畫結束後再設定為true. 設定轉換動畫若當前頁碼小於選擇頁碼時 (往前翻頁)direction: UIPageViewControllerNavigationDirection.Forward 若當前頁碼大於選擇頁碼時 (往後翻頁)direction: UIPageViewControllerNavigationDirection.Reverse 12345678910111213141516@IBAction func tapSegment(sender: AnyObject) { mPageSegment.enabled = false; let index = (sender as! UISegmentedControl).selectedSegmentIndex; if (currentPageIndex &lt; index) { pageController!.setViewControllers([self.viewControllers[index] as! UIViewController], direction: .Forward, animated: true, completion:{(isFinished: Bool) in self.mPageSegment.enabled = true; }) } else { pageController!.setViewControllers([self.viewControllers[index] as! UIViewController], direction: .Reverse, animated: true, completion:{(isFinished: Bool) in self.mPageSegment.enabled = true; }) } currentPageIndex = index } 使用滑動翻頁時, 當動畫結束後, 須將SegmentControll.enabled設為true 12345extension ViewController: UIPageViewControllerDelegate { func pageViewController(pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool) { mPageSegment.enabled = true; }} Source Code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283import UIKitclass ViewController: UIViewController { @IBOutlet weak var mPageSegment: UISegmentedControl! @IBAction func tapSegment(sender: AnyObject) { mPageSegment.enabled = false; let index = (sender as! UISegmentedControl).selectedSegmentIndex; if (currentPageIndex &lt; index) { pageController!.setViewControllers([self.viewControllers[index] as! UIViewController], direction: .Forward, animated: true, completion:{(isFinished: Bool) in self.mPageSegment.enabled = true; }) } else { pageController!.setViewControllers([self.viewControllers[index] as! UIViewController], direction: .Reverse, animated: true, completion:{(isFinished: Bool) in self.mPageSegment.enabled = true; }) } currentPageIndex = index } var pageController: UIPageViewController! var viewControllers = NSMutableArray() var currentPageIndex : Int! override func viewDidLoad() { super.viewDidLoad() let storyboard = UIStoryboard(name: &quot;Main&quot;, bundle: nil) let firstViewController = storyboard.instantiateViewControllerWithIdentifier(&quot;firstPage&quot;) firstViewController.view.tag = 0; viewControllers.addObject(firstViewController) let secondViewController = storyboard.instantiateViewControllerWithIdentifier(&quot;secondPage&quot;) secondViewController.view.tag = 1; viewControllers.addObject(secondViewController) pageController = UIPageViewController(transitionStyle: .Scroll, navigationOrientation:.Horizontal, options: nil) pageController!.view.frame = CGRectMake(0, mPageSegment.frame.origin.y + mPageSegment.frame.height, view.frame.size.width, view.frame.size.height); currentPageIndex = 0; pageController.setViewControllers([viewControllers.objectAtIndex(currentPageIndex) as! UIViewController], direction: .Forward, animated: false) {(isFinished:Bool) -&gt; Void in } pageController.delegate = self; pageController.dataSource = self; self.addChildViewController(pageController) self.view.addSubview(pageController.view) } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() }}extension ViewController: UIPageViewControllerDataSource { func pageViewController(pageViewController: UIPageViewController, viewControllerBeforeViewController viewController: UIViewController) -&gt; UIViewController? { currentPageIndex = viewController.view.tag mPageSegment.selectedSegmentIndex = currentPageIndex; let pageIndex = viewController.view.tag - 1; if pageIndex &lt; 0 { return nil } return viewControllers[pageIndex] as? UIViewController } func pageViewController(pageViewController: UIPageViewController, viewControllerAfterViewController viewController: UIViewController) -&gt; UIViewController? { currentPageIndex = viewController.view.tag mPageSegment.selectedSegmentIndex = currentPageIndex; let pageIndex = viewController.view.tag + 1; if pageIndex &gt; 1 { return nil } return viewControllers[pageIndex] as? UIViewController }}extension ViewController: UIPageViewControllerDelegate { func pageViewController(pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool) { mPageSegment.enabled = true; }} 執行結果","link":"/2016/10/18/2016/2016_10_18-ios-pageviewcontroller_segmentedcontrol/"},{"title":"iOS - 模糊效果 UIBlurEffect","text":"有些場景, 我們可能需要背景模糊的效果. 在 iOS 8 之後, Apple 官方提供了API 讓我們更容易實現此效果. UIBlurEffect Step 1: 先在畫面中設置好ImageView Step 2: 設置模糊效果 1let blurEffect = UIBlurEffect(style: UIBlurEffectStyle.Light) UIBlurEffectStyle 共有三種效果 ExtraLight : 極亮Light : 亮Dark : 暗 Step 3: 設置模糊視窗並添加至畫面中 123let blurView = UIVisualEffectView(effect: blurEffect)blurView.frame = CGRect(x: 100.0, y: 120.0, width: 300.0, height: 300.0)self.view.addSubview(blurView); 執行結果 Source Code 123456789101112131415import UIKitclass ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let blurEffect = UIBlurEffect(style: UIBlurEffectStyle.ExtraLight) let blurView = UIVisualEffectView(effect: blurEffect) blurView.frame = CGRect(x: 100.0, y: 120.0, width: 300.0, height: 300.0) self.view.addSubview(blurView); } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() }}","link":"/2016/10/27/2016/2016_10_27-ios-uiblureffect/"},{"title":"iOS - UIImage &amp; UIContentMode","text":"當圖片超過螢幕大小時, 我們可選用幾種方式來縮放圖片. UIViewContentMode.ScaleAspectFill : 按照原比例呈現此模式下可搭配 UIImageView.clipsToBounds = true 來裁切圖片 UIViewContentMode.ScaleAspectFit : 按照等比例縮放UIViewContentMode.ScaleToFill : 按照UIImageView的大小縮放圖片 目前有張圖片為1920x1080, 而螢幕大小為1024x768 若沒有指定UIImageView大小時, 則呈現圖片如下, 且UIImageView所使用的大小為1920x1080 12345678910let image = UIImage(named: &quot;mi.jpg&quot;)var imageView: UIImageView!override func viewDidLoad() { super.viewDidLoad() imageView = UIImageView(image: image); imageView.center = view.center print(&quot;W: \\(imageView.frame.width), H: \\(imageView.frame.height)&quot;) view.addSubview(imageView);} 執行結果 若指定UIImageView的大小, 並使用 UIViewContentMode.ScaleAspectFill, ScaleAspectFit, ScaleToFill時UIImageView的大小皆為1024x768 UIViewContentMode.ScaleAspectFill : 按照原比例呈現 UIViewContentMode.ScaleAspectFit : 按照等比例縮放 UIViewContentMode.ScaleToFill : 按照UIImageView的大小縮放圖片","link":"/2016/10/27/2016/2016_10_27-ios-uiimage-scale/"},{"title":"iOS - 模糊效果 UIVibrancyEffect","text":"續上篇 iOS - 模糊效果 UIBlurEffect 我們可在畫面中製作模糊效果. 但如果想在模糊效果中, 再疊加文字時, 可使用UIVibrancyEffect讓文字也具有模糊效果. 如果不使用UIVibrancyEffect時, 則添加的Lable會以不透明顏色呈現 接下來我們使用UIVibrancyEffect來達成模糊效果. Step 1: 先在畫面中設置好ImageView, 並添加UIBlurEffect模糊效果 1234let blurEffect = UIBlurEffect(style: UIBlurEffectStyle.ExtraLight)let blurView = UIVisualEffectView(effect: blurEffect)blurView.frame = CGRect(x: 100.0, y: 120.0, width: 300.0, height: 300.0)self.view.addSubview(blurView); Step 2: 設置UIVibrancyEffect模糊效果 由於UIVibrancyEffect必須建設於UIBlurEffect的效果上, 因此初始設定時, 需帶入UIBlurEffect. 1let vibrancyEffect = UIVibrancyEffect(forBlurEffect: blurEffect) Step 3: 設置模糊視窗並添加至畫面中 由Apple 官方文件得知 UIVibrancyEffect 需添加於UIBlurEffect效果的畫面上 A UIVibrancyEffect object amplifies and adjusts the color of the content layered behind a UIVisualEffectView object, allowing the content placed inside of the contentView to become more vivid. 1234let vibrancyEffect = UIVibrancyEffect(forBlurEffect: blurEffect)let vibrancyView = UIVisualEffectView(effect: vibrancyEffect)vibrancyView.frame = CGRect(x: 0.0, y: 150.0, width: 300.0, height: 150.0)blurView.contentView.addSubview(vibrancyView); 注意vibrancyView並不像blurView加入在self.view中, 而是加在blurView.contentView中. Step 4: 添加Label於 Vibrancy 效果的畫面上 1234567let label = UILabel(frame: vibrancyView.bounds)label.textAlignment = NSTextAlignment.Centerlabel.text = &quot;Blur&quot;label.font = UIFont(name: &quot;SnellRoundhand-Black&quot;, size: 50.0)label.textColor = UIColor.whiteColor()vibrancyView.contentView.addSubview(label); 執行結果 Source Code 123456789101112131415161718192021222324252627282930313233import UIKitclass ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let blurEffect = UIBlurEffect(style: UIBlurEffectStyle.ExtraLight) let blurView = UIVisualEffectView(effect: blurEffect) blurView.frame = CGRect(x: 100.0, y: 120.0,width: 300.0, height: 300.0) self.view.addSubview(blurView); let vibrancyEffect = UIVibrancyEffect(forBlurEffect: blurEffect) let vibrancyView = UIVisualEffectView(effect: vibrancyEffect) vibrancyView.frame = CGRect(x: 0.0, y: 150.0,width: 300.0, height: 150.0) blurView.contentView.addSubview(vibrancyView); let label = UILabel(frame: vibrancyView.bounds) label.textAlignment = NSTextAlignment.Center label.text = &quot;Blur&quot; label.font = UIFont(name: &quot;SnellRoundhand-Black&quot;, size: 50.0) label.textColor = UIColor.whiteColor() vibrancyView.contentView.addSubview(label); } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() }}","link":"/2016/10/27/2016/2016_10_27-ios-uivibrancyeffect/"},{"title":"iOS - UIButton 將 icon 設置在右邊","text":"當我們建立一個按鈕時, 可以同時設置好icon和文字. 注意文字顏色, 預設為白色, 在畫面中會看不到 但是預設的icon是在文字的左邊, 當我們想移動到右邊時, 可調整 Edge 為 image 再選擇right調整位置到右邊 若想調整文字位置時, 可調整Edge 為title 再調整位置即可","link":"/2016/10/31/2016/2016_10_31-ios-uibutton_change_icon_pos/"},{"title":"iOS - UITextField 限制輸入","text":"有時候使用輸入時, 想要限制輸入框只能輸入數字, 該如何實作呢？ 我們可使用 NSCharacterSet 來達成此功能。 Step 1: 委託 UITextFieldDelegate Step 2: 監聽輸入變化 shouldChangeCharactersInRange Step 3: 設定限制字元 Source Code 12345678910111213141516171819202122232425import UIKitclass ViewController: UIViewController { @IBOutlet weak var numTextField: UITextField! override func viewDidLoad() { super.viewDidLoad() numTextField.delegate = self; } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() }}extension ViewController : UITextFieldDelegate { func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -&gt; Bool { let inverseSet = NSCharacterSet(charactersInString:&quot;0123456789.&quot;).invertedSet let components = string.componentsSeparatedByCharactersInSet(inverseSet) let filtered = components.joinWithSeparator(&quot;&quot;) return string == filtered }}","link":"/2016/10/31/2016/2016_10_31-ios-uitextfidle/"},{"title":"Android - Firebase 專案開發準備工作","text":"若在Tools 底下有 Firebase的選項, 可跳過此篇文章 （如下圖） 如果沒有請依照以下步驟 Step 1: 確認 Google Repository 及 Android SDK Tools皆為最新版本 Step 2: 安裝 Plugins - Firebase 將Firebase相關都勾選後, 點選 Apply並重新啟動 AndroidStudio Step 3: 確認Tools有Firebase即算成功","link":"/2017/04/19/2017/2017_04_19-android-firebase-install/"},{"title":"Android - Firebase 註冊","text":"簡介 Firebase原本為一家提供雲端服務的公司, 在2014年被Google所收購. Google所提供的雲端服務最一開始為Cloud to Device Messaging （C2DM）,在2012年時停用C2DM, 並更改為Google Cloud Messaging (GCM)收購Firebase後, 在2016年提出了Firebase Cloud Messaging (FCM) FCM base on GCM 提供網頁, 手機應用程式可將資料儲存於雲端, 以及從雲端取得資料. 註冊/登入Firebase帳號 Firebase 首頁找到首頁中的「登入」（如下圖）, 使用Google帳號登入 登入後出現授予權限畫面, 選擇「允許」即完成Firebase的註冊(如下圖)","link":"/2017/04/19/2017/2017_04_19-android-firebase-register/"},{"title":"Android - 開發Firebase專案 - Database 篇","text":"開始之前, 需要先完成Firebase的註冊和AndroidStudio的環境設定請參考文章Android - Firebase 註冊Android - Firebase 專案開發準備工作 Step 1: 新增Firebase 專案 在Firebase首頁中, 點選右上角的「前往控制台」 點擊「新增專案」 Step 2: 將 Firebase 引入 Module AndroidStudio 中新增Module，再點選Tools -&gt; Firebase 選擇Realtime Database Connect to Firebase &amp; Select your app Step 3: 將 Realtime Database 引入 Module 選取「Add the Realtime Database to your app」 引入成功 Step 4:建立Database資料 回到Firebase網頁, 在左邊欄位中選擇「Database」 在應用程式右方按下「+」, 可新增資料 由於Firebase並不是以傳統關聯式資料庫的表格, 而是以「JSON」的格式來儲存資料. 所以會以JSON的樹狀結構來呈現. 我們以聯絡人的案例來設計資料庫, 在資料名稱中填入「聯絡人/01/name」, 值填入「Nick」, 然後按下「新增」 再新增一位聯絡人資料名稱中填入「02/name」, 值填入「Curry」 JSON Tree（如下圖）, 我們也可以利用右邊的設定, 將JSON格式匯出(如下圖紅框) 匯出格式如下 Step 5:設定安全性 Firebase 預設只有經過驗證過得帳號, 才能讀取/寫入資料.在此範例中, 我們先將讀寫資料開放, 讓任何對象都可存取. 若在開發產品App階段, 請勿更改預設設定. 選取「規則」TAB, read/write權限原先預設為「auth != null」在此將read/write接改為「true」後, 按下發佈 Step 6:取得Firebase資料 回到AndroidStudio, 我們在Layout中增加一個Listview。 在OnCreate中, 設定好ListView和ArrayAdapter 1234567891011121314151617public class MainActivity extends AppCompatActivity { ArrayAdapter&lt;String&gt; fileDBAdapter; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ListView list = (ListView) findViewById(R.id.listView); fileDBAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_list_item_1, android.R.id.text1); list.setAdapter(fileDBAdapter); }} MainActivity 實現 ChildEventListener及其Function 在onChildAdded和onChildRemoved中, 將資料設定給ArrayAdapter, 使得資料顯示於ListView上 1234567891011@Overridepublic void onChildAdded(DataSnapshot dataSnapshot, String s) { fileDBAdapter.add( String.valueOf(dataSnapshot.child(&quot;name&quot;).getValue()));}@Overridepublic void onChildRemoved(DataSnapshot dataSnapshot) { fileDBAdapter.remove( String.valueOf(dataSnapshot.child(&quot;name&quot;).getValue()));} 最後在OnCreate中, 設定FirebaseDatabase 123FirebaseDatabase fireDB = FirebaseDatabase.getInstance();DatabaseReference myRef = fireDB.getReference(&quot;聯絡人&quot;);myRef.addChildEventListener(this); 執行結果 Source Code 123456789101112131415161718192021222324252627282930313233343536373839404142public class MainActivity extends AppCompatActivity implements ChildEventListener { ArrayAdapter&lt;String&gt; fileDBAdapter; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ListView list = (ListView) findViewById(R.id.listView); fileDBAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_list_item_1, android.R.id.text1); list.setAdapter(fileDBAdapter); FirebaseDatabase fireDB = FirebaseDatabase.getInstance(); DatabaseReference myRef = fireDB.getReference(&quot;聯絡人&quot;); myRef.addChildEventListener(this); } @Override public void onChildAdded(DataSnapshot dataSnapshot, String s) { fileDBAdapter.add( String.valueOf(dataSnapshot.child(&quot;name&quot;).getValue())); } @Override public void onChildRemoved(DataSnapshot dataSnapshot) { fileDBAdapter.remove( String.valueOf(dataSnapshot.child(&quot;name&quot;).getValue())); } @Override public void onChildChanged(DataSnapshot dataSnapshot, String s) { } @Override public void onChildMoved(DataSnapshot dataSnapshot, String s) { } @Override public void onCancelled(DatabaseError databaseError) { }}","link":"/2017/04/20/2017/2017_04_20-android-firebase-database/"},{"title":"Android - ConstraintLayout _ Relative Position","text":"在上一篇文章 Android - ConstraintLayout 基本介紹 中,我們知道ConstraintLayout基本概念和設計目的. 在此篇中我們將介紹ConstraintLayout的相對位置的解說 ConstraintLayout的設定共有13種, 在此我們使用兩個Button來解說, 水平方向 對於水平方向中的 Start/End 與 Left/Right 的不同點, 請參考 Android - RelativeLayout : Start/End 與 Left/Right 的不同 layout_constraintLeft_toLeftOf : 元件的左邊界和相對元件的左邊界對齊 （類似於android:layout_alignLeft） Souce BT 的左邊界和Target BT 的左邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintLeft_toLeftOf=&quot;@+id/button&quot;/&gt; layout_constraintLeft_toRightOf : 元件的左邊界和相對元件的右邊界對齊（類似於android:layout_toRightOf） Souce BT 的左邊界和Target BT 的右邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot;/&gt; layout_constraintRight_toLeftOf: 元件的右邊界和相對元件的左邊界對齊（類似於android:layout_toLeftOf） Souce BT 的右邊界和Target BT 的左邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintRight_toLeftOf=&quot;@+id/button&quot;/&gt; layout_constraintRight_toRightOf: 元件的右邊界和相對元件的右邊界對齊（類似於android:layout_alignRight） Souce BT 的右邊界和Target BT 的右邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintRight_toRightOf=&quot;@+id/button&quot;/&gt; layout_constraintStart_toEndOf: 元件的開始邊界和相對元件的結束邊界對齊（類似於android:layout_toEndOf） Souce BT 的開始邊界和Target BT 的結束邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintStart_toEndOf=&quot;@+id/button&quot;/&gt; layout_constraintStart_toStartOf: 元件的開始邊界和相對元件的開始邊界對齊（類似於android:layout_alignStart） Souce BT 的開始邊界和Target BT 的開始邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintStart_toStartOf=&quot;@+id/button&quot;/&gt; layout_constraintEnd_toStartOf: 元件的結束邊界和相對元件的開始邊界對齊（類似於android:layout_toStartOf） Souce BT 的結束邊界和Target BT 的開始邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintEnd_toStartOf=&quot;@+id/button&quot;/&gt; layout_constraintEnd_toEndOf: 元件的結束邊界和相對元件的結束邊界對齊（類似於android:layout_alignEnd） Souce BT 的結束邊界和Target BT 的結束邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintEnd_toEndOf=&quot;@+id/button&quot;/&gt; 垂直方向 layout_constraintTop_toTopOf: 元件的上邊界和相對元件的上邊界對齊（類似於android:layout_alignTop） Souce BT 的上邊界和Target BT 的上邊界對齊 XML 表示方式 123456789&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot; android:layout_marginLeft=&quot;30dp&quot; app:layout_constraintTop_toTopOf=&quot;@+id/button&quot;/&gt; layout_constraintTop_toBottomOf: 元件的上邊界和相對元件的下邊界對齊（類似於android:layout_below） Souce BT 的上邊界和Target BT 的下邊界對齊 XML 表示方式 123456789&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot; android:layout_marginLeft=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot;/&gt; layout_constraintBottom_toTopOf: 元件的下邊界和相對元件的上邊界對齊（類似於android:layout_above） Souce BT 的下邊界和Target BT 的上邊界對齊 XML 表示方式 123456789&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot; android:layout_marginLeft=&quot;30dp&quot; app:layout_constraintBottom_toTopOf=&quot;@+id/button&quot;/&gt; layout_constraintBottom_toBottomOf: 元件的上邊界和相對元件的上邊界對齊（類似於android:layout_alignTop） Souce BT 的下邊界和Target BT 的下邊界對齊 XML 表示方式 123456789&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot; android:layout_marginLeft=&quot;30dp&quot; app:layout_constraintBottom_toBottomOf=&quot;@+id/button&quot;/&gt; layout_constraintBaseline_toBaselineOf: 元件的baseline和相對元件的baseline對齊（類似於android:layout_alignBaseline） Souce BT 的baseline和Target BT 的baseline對齊 XML 表示方式 123456789&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;158dp&quot; android:layout_height=&quot;87dp&quot; android:id=&quot;@+id/button3&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintBaseline_toBaselineOf=&quot;@+id/button&quot;/&gt;","link":"/2017/04/25/2017/2017_04_25-android_constraintlayout%20_relative_position/"},{"title":"Android - ConstraintLayout _ Relative Position","text":"在上一篇文章 Android - ConstraintLayout 基本介紹 中,我們知道ConstraintLayout基本概念和設計目的. 在此篇中我們將介紹ConstraintLayout的相對位置的解說 ConstraintLayout的設定共有13種, 在此我們使用兩個Button來解說, 水平方向 對於水平方向中的 Start/End 與 Left/Right 的不同點, 請參考 Android - RelativeLayout : Start/End 與 Left/Right 的不同 layout_constraintLeft_toLeftOf : 元件的左邊界和相對元件的左邊界對齊 （類似於android:layout_alignLeft） Souce BT 的左邊界和Target BT 的左邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintLeft_toLeftOf=&quot;@+id/button&quot;/&gt; layout_constraintLeft_toRightOf : 元件的左邊界和相對元件的右邊界對齊（類似於android:layout_toRightOf） Souce BT 的左邊界和Target BT 的右邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot;/&gt; layout_constraintRight_toLeftOf: 元件的右邊界和相對元件的左邊界對齊（類似於android:layout_toLeftOf） Souce BT 的右邊界和Target BT 的左邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintRight_toLeftOf=&quot;@+id/button&quot;/&gt; layout_constraintRight_toRightOf: 元件的右邊界和相對元件的右邊界對齊（類似於android:layout_alignRight） Souce BT 的右邊界和Target BT 的右邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintRight_toRightOf=&quot;@+id/button&quot;/&gt; layout_constraintStart_toEndOf: 元件的開始邊界和相對元件的結束邊界對齊（類似於android:layout_toEndOf） Souce BT 的開始邊界和Target BT 的結束邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintStart_toEndOf=&quot;@+id/button&quot;/&gt; layout_constraintStart_toStartOf: 元件的開始邊界和相對元件的開始邊界對齊（類似於android:layout_alignStart） Souce BT 的開始邊界和Target BT 的開始邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintStart_toStartOf=&quot;@+id/button&quot;/&gt; layout_constraintEnd_toStartOf: 元件的結束邊界和相對元件的開始邊界對齊（類似於android:layout_toStartOf） Souce BT 的結束邊界和Target BT 的開始邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintEnd_toStartOf=&quot;@+id/button&quot;/&gt; layout_constraintEnd_toEndOf: 元件的結束邊界和相對元件的結束邊界對齊（類似於android:layout_alignEnd） Souce BT 的結束邊界和Target BT 的結束邊界對齊 XML 表示方式 12345678&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; android:layout_marginTop=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot; app:layout_constraintEnd_toEndOf=&quot;@+id/button&quot;/&gt; 垂直方向 layout_constraintTop_toTopOf: 元件的上邊界和相對元件的上邊界對齊（類似於android:layout_alignTop） Souce BT 的上邊界和Target BT 的上邊界對齊 XML 表示方式 123456789&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot; android:layout_marginLeft=&quot;30dp&quot; app:layout_constraintTop_toTopOf=&quot;@+id/button&quot;/&gt; layout_constraintTop_toBottomOf: 元件的上邊界和相對元件的下邊界對齊（類似於android:layout_below） Souce BT 的上邊界和Target BT 的下邊界對齊 XML 表示方式 123456789&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot; android:layout_marginLeft=&quot;30dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/button&quot;/&gt; layout_constraintBottom_toTopOf: 元件的下邊界和相對元件的上邊界對齊（類似於android:layout_above） Souce BT 的下邊界和Target BT 的上邊界對齊 XML 表示方式 123456789&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot; android:layout_marginLeft=&quot;30dp&quot; app:layout_constraintBottom_toTopOf=&quot;@+id/button&quot;/&gt; layout_constraintBottom_toBottomOf: 元件的上邊界和相對元件的上邊界對齊（類似於android:layout_alignTop） Souce BT 的下邊界和Target BT 的下邊界對齊 XML 表示方式 123456789&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button3&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot; android:layout_marginLeft=&quot;30dp&quot; app:layout_constraintBottom_toBottomOf=&quot;@+id/button&quot;/&gt; layout_constraintBaseline_toBaselineOf: 元件的baseline和相對元件的baseline對齊（類似於android:layout_alignBaseline） Souce BT 的baseline和Target BT 的baseline對齊 XML 表示方式 123456789&lt;Button android:text=&quot;Source Button&quot; android:layout_width=&quot;158dp&quot; android:layout_height=&quot;87dp&quot; android:id=&quot;@+id/button3&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/button&quot; android:layout_marginLeft=&quot;8dp&quot; app:layout_constraintBaseline_toBaselineOf=&quot;@+id/button&quot;/&gt;","link":"/2017/04/25/2017/2017_04_25-android_constraintlayout_relative_position/"},{"title":"Android - RelativeLayout Start&#x2F;End 與 Left&#x2F;Right 的不同","text":"在RelativeLayout的設計中, 一般來說Start = Left, End = Right 所以 android:layout_alignStart/End = android:layout_alignLeft/Rightandroid:layout_toStart/EndOf = android:layout_toLeft/RightOf 但以上規則只適用於讀法規則為由左而右開始的國家 如果讀法規則為由右開始的國家時, 會有以下的錯誤情況 XML的寫法使用 Left .xml12345678910111213141516171819202122232425&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;Button android:id=&quot;@+id/button_1&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentTop=&quot;true&quot; android:layout_alignParentLeft=&quot;true&quot; android:layout_marginLeft=&quot;10dp&quot; android:layout_marginTop=&quot;10dp&quot; android:text=&quot;1-Button&quot; /&gt; &lt;Button android:id=&quot;@+id/button_2&quot; android:layout_width=&quot;200dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;10dp&quot; android:layout_below=&quot;@+id/button_1&quot; android:layout_alignLeft=&quot;@+id/button_1&quot; android:text=&quot;2-Button&quot; /&gt;&lt;/RelativeLayout&gt; 執行結果 這對由右而左的國家來說是很不習慣的, 因為應該是要以右邊來對齊才對 因此Android 在API 17 (Android 4.2) 提出了通用的法則 Start / End, 可適用於 由左而右或由右而左的國家 XML的寫法使用 Start .xml12345678910111213141516171819202122232425&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;Button android:id=&quot;@+id/button_1&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentTop=&quot;true&quot; android:layout_alignParentStart=&quot;true&quot; android:layout_marginStart=&quot;10dp&quot; android:layout_marginTop=&quot;10dp&quot; android:text=&quot;1-Button&quot; /&gt; &lt;Button android:id=&quot;@+id/button_2&quot; android:layout_width=&quot;200dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;10dp&quot; android:layout_below=&quot;@+id/button_1&quot; android:layout_alignStart=&quot;@+id/button_1&quot; android:text=&quot;2-Button&quot; /&gt;&lt;/RelativeLayout&gt; 執行結果","link":"/2017/04/25/2017/2017_04_25-relativelayout_start_left_diff/"},{"title":"Android - ConstraintLayout 基本介紹","text":"ConstraintLayout為一個Support Library, 從Android 2.3 （API level 9）開始支援.之前的版面設計, 大多數的畫面只要用LinearLayout或RelativeLayout就能夠實作. 缺點是Layout層級太多, 造成設計更動上的困難, 且也較耗資源.要解決此缺點, 必須將Layout平面化, 因此推出了ConstraintLayout元件來達成此目的.(類似於iOS的AutoLayout) 在編寫畫面時, 一般都是利用XML代碼完成, 在AndroidStudio 2.2中已支持可視化的方式來編寫ConstraintLayout可讓使用者可以更直覺地設計界面. 在開始之前, 需要在build.gradle文件中添加函式庫 build.gradle123dependencies { compile 'com.android.support.constraint:constraint-layout:1.0.2'} ConstraintLayout和RelativeLayout類似, 元件必須和某一個元件相對.若我們將一個畫面拉到編輯畫面中, 如下圖 在角落會有四個藍色方框, 可用來調整元件大小 而四個白色圓點, 則是用來對齊某元件的.若按下紅框部份, 會顯示內容的baseline, 如下圖 可利用白色橢圓長條的部份來坐Baseline的對齊方式. 假設我們要使得物件位於中央時, 我們可拉動四個白色圓點, 分別拉到畫面的Top, Bottom, Left, Right 置中結果按下上圖中的紅框按鈕, 可將所有對齊條件清除 我們來看一下 xml 的寫法為 main_layout.xml12345678910111213&lt;Button android:text=&quot;Button A&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; android:layout_marginTop=&quot;8dp&quot; android:layout_marginLeft=&quot;8dp&quot; android:layout_marginBottom=&quot;8dp&quot; android:layout_marginRight=&quot;8dp&quot; /&gt; layout_constraintLeft_toLeftOf : 元件的左邊界和parent的左邊界對齊layout_constraintRight_toRightOf: 元件的右邊界和parent的右邊界對齊layout_constraintTop_toTopOf: 元件的上邊界和parent的上邊界對齊layout_constraintBottom_toBottomOf: 元件的下邊界和parent的下邊界對齊 以上為ConstraintLayout的基本介紹","link":"/2017/04/25/2017/2017_04_25_android_constraintlayout/"},{"title":"Ubuntu - 設置AndroidStudio快速執行鍵","text":"在Ubuntu上安裝AndroidStudio後，無法在桌面產生快捷鍵可供使用。 我們可使用以下的方式，自行建立快捷鍵來使用。 在官網下載AndroidStudio並解壓縮後，會產生android-studio資料夾。進入android-studio/bin資料夾中後，按下右鍵 「新增文件-&gt;空白文件」在此我們取名為 「AndroidStudio.desktop」。 打開此文件，或是使用Vim輸入以下字串 AndroidStudio.desktop12345[Desktop Entry]Name=AndroidStudioType=ApplicationIcon=/您目錄的絕對路徑/android-studio/bin/studio.pngExec=sh /您目錄的絕對路徑/android-studio/bin/studio.sh 接著在「AndroidStudio.desktop」上點擊右鍵，將「屬性&gt;權限&gt;允許作為程序執行文件」打勾後會發現文件圖案變了。 此時已可雙擊執行，也可將此圖標拖曳到左邊快速功能鍵中， 鎖定在啟動欄中。 但在Ubuntu 18.04中，必須再執行以下動作。 將捷徑加入 dock bar 將AndroidStudio.desktop複製到 ~/.local/share/applications/ 便可在應用程式中找到AndroidStudio，並且可加入喜好中。 cms1sudo cp AndroidStudio.desktop ~/.local/share/applications/","link":"/2017/05/17/2017/2017_05_17-ubuntu-androidstudio-shortcut/"},{"title":"Android 人臉偵測","text":"這篇主要來介紹 Android API - FaceDetector 實做人臉偵測 設備環境Device : Acrer Iconia Tab 10Version : Android 6.0 (API 23, M) FaceDetector畫面中使用 ImageView 和 Button，ImageView用來顯示偵測的圖片點擊Button後，標示出人臉的部份。 ImageView預設讀入Resources中的圖片 點擊按鈕後，先讀取圖片再進行偵測 12345678910111213141516@Overridepublic void onClick(View v) { switch(v.getId()) { case R.id.button: ImageView imageView = findViewById(R.id.imageView); //讀取目前在ImageView 顯示的圖片 Bitmap source = ((BitmapDrawable)imageView.getDrawable()).getBitmap(); //人臉辨識 Bitmap detectMap = detectFace(source); //顯示辨識好的圖片 imageView.setImageBitmap(detectMap); break; default: break; }} 由於Android的人臉辨識，需要使用 RGB565的圖片，所以我們必須先轉換格式 1Bitmap source = bitmap.copy(Bitmap.Config.RGB_565, true); 轉換格式後，再透過 FaceDetector 進行人臉偵測 12345678910111213public Bitmap detectFace(Bitmap bitmap) { Bitmap source = bitmap.copy(Bitmap.Config.RGB_565, true); //設定最多可偵測臉數 int MAX_FACES = 5; FaceDetector faceDet = new FaceDetector(source.getWidth(), source.getHeight(), MAX_FACES); FaceDetector.Face[] faceArray = new FaceDetector.Face[MAX_FACES]; faceDet.findFaces(source, faceArray); //標示偵測到的區域 drawDetectRect(source, faceArray); return source;} 繪製偵測到的區域 12345678910111213141516171819202122232425262728293031public void drawDetectRect(Bitmap source, FaceDetector.Face[] faceArray) { int findFaceCount = faceArray.length; if (findFaceCount == 0) { return; } Canvas canvas = new Canvas(source); Paint p = new Paint(); p.setAntiAlias(true); p.setStrokeWidth(4); p.setStyle(Paint.Style.STROKE); p.setColor(Color.RED); PointF pf = new PointF(); RectF rf = new RectF(); for(int i = 0; i &lt; findFaceCount; i++) { FaceDetector.Face face = faceArray[i]; if (null != face) { //取得兩眼的中間點 face.getMidPoint(pf); //eyesDistance: 兩眼間的距離 rf.left = pf.x - face.eyesDistance(); rf.right = pf.x + face.eyesDistance(); rf.top = pf.y - face.eyesDistance(); rf.bottom = pf.y + face.eyesDistance(); canvas.drawRect(rf, p); } }} 執行結果","link":"/2018/07/09/2018/2018_07_09-facedetect/"},{"title":"Android Permissions Request","text":"在 Android 6 (API 23, M) 之後，除了在AndroidManifest中宣告權限之外，還必須在程式中動態請求權限。 Permissions Request 相關API如下： //檢查是否已取得權限ActivityCompat.checkSelfPermission//確認是否已在請求權限中ActivityCompat.shouldShowRequestPermissionRationale//請求權限ActivityCompat.requestPermissions 首先在AndroidManifest.xml中宣告權限。 AndroidManifest.xml12345678910&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.nickthomas55.camera.facedetect&quot;&gt; &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; &lt;application&gt; ... &lt;/application&gt;&lt;/manifest&gt; 在onCreate時，檢查是否已取得權限。 MainActivity.java12345678910111213@Overrideprotected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); int rc = ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA); if (rc == PackageManager.PERMISSION_GRANTED) { //do something } else { //請求權限 requestPermissions(); }} 可將所有需要的權限，命名一個String Array，之後做一次性的請求。 MainActivity.java12345private static String[] PERMISSIONS_STORAGE = { Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA}; 先利用ActivityCompat.shouldShowRequestPermissionRationale檢查現在是否已經在請求中。若應用程式沒有在請求時，我們再向系統請求權限。 MainActivity.java123456private void requestPermissions() { if (!ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.CAMERA)) { ActivityCompat.requestPermissions(this, PERMISSIONS_STORAGE, RC_HANDLE_CAMERA_PERM); return; }} 執行結果 取得權限後，我們可由 Settings -&gt; Apps -&gt; 您的應用程式名稱 -&gt; Permissions 中，查看並管理權限。","link":"/2018/07/12/2018/2018_07_12-permission/"},{"title":"Android Camera2","text":"Android 5 (API 21, L) 新增加了Camera2，和之前的Camera使用起來較複雜，但是多了許多功能，支援RAW輸出、調整對焦模式、曝光模式等。 Camera2 首先先了解幾個重要的Class CameraManager : 管理攝影設備，主要功用是獲取所有攝影設備和打開指定的攝影鏡頭。 CameraDevice : 攝影設備，可透過CameraManager.openCamera()來取得。 CameraCaptureSession : 用於處理拍照及預覽工作。 CaptureRequest ：捕捉畫面請求，用來定義輸出緩衝區及顯示 (TextureView or SurfaceView) 我們在畫面中加入一個TextureView，用來預覽攝影鏡頭目前捕捉到的畫面。並設定Listener監聽TextureView是否已設置好。 程式參數 MainActivity.java123456789101112131415161718private TextureView mTextureView;private Size mPreviewSize;private CameraDevice mCameraDevice;private String mCameraId;private ImageReader mImageReader;private CaptureRequest.Builder mCaptureRequestBuilder;private CaptureRequest mCaptureRequest;private CameraCaptureSession mPreviewSession;private static String[] PERMISSIONS_STORAGE = { Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA};private static final int RC_HANDLE_CAMERA_PERM = 2; MainActivity: onCreate12mTextureView = findViewById(R.id.textureView);mTextureView.setSurfaceTextureListener(textureListener); 當TextureView設置好之後，再來設置並打開攝影鏡頭。 MainActivity.java123456789TextureView.SurfaceTextureListener textureListener = new TextureView.SurfaceTextureListener() { @Override public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) { //設置攝影鏡頭 setupCamera(width, height); //打開攝影鏡頭。 openCamera(); }}; 利用CamaraManager取得所有攝影鏡頭的資訊，此例子使用後置鏡頭，我們可根據CameraCharacteristics屬性略過前置鏡頭並開啟後置鏡頭。 由於攝影鏡頭支援眾多格式和大小，可由StreamConfigurationMap取得這些屬性。根據TextureView的長寬，設定攝影鏡頭的格式與大小。 MainActivity.java12345678910111213141516171819202122private void setupCamera(int width, int height) { CameraManager manager = (CameraManager) getSystemService(Context.CAMERA_SERVICE); try { //獲取所有攝影設備 String[] cameraList = manager.getCameraIdList(); for (String cameraId: cameraList) { //取得攝影設備屬性 CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId); //不擷取前置鏡頭的畫面 if (characteristics.get(CameraCharacteristics.LENS_FACING) == CameraCharacteristics.LENS_FACING_FRONT) continue; //取得StreamConfigurationMap，取得攝影鏡頭支持的所有輸出格式和尺寸 StreamConfigurationMap map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP); //根據TextureView的尺寸設置預覽尺寸 mPreviewSize = getOptimalSize(map.getOutputSizes(SurfaceTexture.class), width, height); mCameraId = cameraId; break; } } catch (CameraAccessException e) { e.printStackTrace(); }} MainActivity.java123456789101112131415161718192021222324//選擇sizeMap中最接近width和height的尺寸private Size getOptimalSize(Size[] sizeMap, int width, int height) { List&lt;Size&gt; sizeList = new ArrayList&lt;&gt;(); for (Size option : sizeMap) { if (width &gt; height) { if (option.getWidth() &gt; width &amp;&amp; option.getHeight() &gt; height) { sizeList.add(option); } } else { if (option.getWidth() &gt; height &amp;&amp; option.getHeight() &gt; width) { sizeList.add(option); } } } if (sizeList.size() &gt; 0) { return Collections.min(sizeList, new Comparator&lt;Size&gt;() { @Override public int compare(Size lhs, Size rhs) { return Long.signum(lhs.getWidth() * lhs.getHeight() - rhs.getWidth() * rhs.getHeight()); } }); } return sizeMap[0];} 根據mCameraId來決定要開啟的鏡頭，並設置CameraDevice.StateCallback監聽狀態。 MainActivity.java123456789101112131415private void openCamera() { CameraManager manager = (CameraManager) getSystemService(Context.CAMERA_SERVICE); try { //檢查權限 if (ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) { //請求權限 ActivityCompat.requestPermissions(this, PERMISSIONS_STORAGE, RC_HANDLE_CAMERA_PERM); return; } //根據mCameraId來決定要開啟的鏡頭 manager.openCamera(mCameraId, mStateCallback, null); } catch (CameraAccessException e) { e.printStackTrace(); }} MainActivity.java123456789101112131415161718private final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() { @Override public void onOpened(CameraDevice camera) { mCameraDevice = camera; //預覽畫面 startPreview(); } @Override public void onDisconnected(@NonNull CameraDevice camera) { Log.e(TAG, &quot;onDisconnected&quot;); } @Override public void onError(@NonNull CameraDevice camera, int error) { Log.e(TAG, &quot;onError: &quot; + error); }}; 設置預覽畫面，將捕捉到的畫面顯示於TextureView中。 MainActivity.java1234567891011121314151617private void startPreview() { SurfaceTexture mSurfaceTexture = mTextureView.getSurfaceTexture(); //設置TextureView的緩衝區大小 mSurfaceTexture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight()); //獲取Surface顯示預覽數據 Surface mSurface = new Surface(mSurfaceTexture); try { //創建預覽請求CaptureRequestBuilder，TEMPLATE_PREVIEW mCaptureRequestBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW); //設置Surface作為預覽顯示界面 mCaptureRequestBuilder.addTarget(mSurface); //創建捕捉畫面，並設置callback mCameraDevice.createCaptureSession(Arrays.asList(mSurface),mCaptureCallback, null); } catch (CameraAccessException e) { e.printStackTrace(); }} 當預覽請求設置好之後，設定Repeat，讓畫面持續更新。 MainActivity.java12345678910111213141516171819private final CameraCaptureSession.StateCallback mCaptureCallback = new CameraCaptureSession.StateCallback() { @Override public void onConfigured(CameraCaptureSession session) { try { //創建捕獲請求 mCaptureRequest = mCaptureRequestBuilder.build(); mPreviewSession = session; //設置反覆捕獲數據，持續畫面更新 mPreviewSession.setRepeatingRequest(mCaptureRequest, null, null); } catch (CameraAccessException e) { e.printStackTrace(); }} @Override public void onConfigureFailed(CameraCaptureSession session) { }}; 執行結果","link":"/2018/07/17/2018/2018_07_17-camera2/"},{"title":"Android adb no permission","text":"在Ubuntu開發Android時，有時會遇到adb無法使用的情況。 這次遇到的情況是 no permissions (user in plugdev group; are your udev rules wrong? )。 解決方式 新增ADB USB 裝置資訊 首先先查看usb裝置資訊，打開終端機輸入 lsusb。 以此例子裝置資訊為 : 2207。 新增USB裝置資訊於 adb_usb.ini，此檔案位於根目錄底下的隱藏資料夾 .android 中。 cmd1vim .android/adb_usb.ini 打開檔案後新增USB裝置資訊 0x2207 增加Rules 切換成root，並在 /etc/udev/rules.d 資料夾中增加rules檔案。 cmd12sudo -ivim /etc/udev/reuls.d/box-android.rules 輸入資訊 box-android.rules12SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;2207&quot;,MODE=&quot;0666&quot;, GROUP=&quot;plugdev&quot;, SYMLINK+=&quot;android_adb&quot;, OWNER=&quot;nick&quot; 儲存後，再修改rules檔案權限。 cmd1chmod a+rx box-android.rules 最後再重新開機，就可以找到裝置了。","link":"/2018/07/24/2018/2018_07_24-adb_no_permissions/"},{"title":"Android aar檔打包與引用","text":"開發專案時，Android可選擇.jar檔或.aar檔的方式，提供 API 供第三方開發者所使用。 但.jar檔只包含.class和文件清單，無法引用資源檔，如圖片等所有res中的文件，而.aar檔可引用所有檔案。 此篇主要針對 .aar 檔案的打包與引用來做介紹。 打包 .aar 檔 由於我們只提供API，而沒有畫面操作，所以選擇沒有Activity的Module來製作。 此時右上角區域顯示無法執行 or build。 到 Edit Configurations 中，將 Launch Options 更改為 Nothing Step 1: 更改為輸出library Gradle 中對於 apply plugin的定義為 12apply plugin: 'com.android.application' //預設值為输出 apkapply plugin: 'com.android.library' //输出 library 要輸出.aar檔，在build.gradle中將Module配置為 library。 build.gradle1apply plugin: 'com.android.library' //输出 library Step 2: 刪除 applicationId** build.gradle1234defaultConfig { //applicationId &quot;com.nickthomas55gmail.testaar&quot; ... } Step 3: 產生.aar檔 打開 Gradle Projects (View -&gt; Tool Windows -&gt; Gradle) 或是點擊畫面右方的Gradle icon 到根目錄 Projects中，點擊assemble 執行成功後，可在module中 build -&gt; outputs -&gt; aar 找到相關的 aar檔。 module_name-debug.aarmodule_name-release.aar 引用 .aar 檔 打開Project Structure，選擇Import Jar/Aar Package，引用aar檔。 並在build.gradle的dependencies中增加compile project *** :module_name*** build.gradle12345dependencies { compile project(':module_name-release') ...} 此時就可在專案中，使用.aar中的class與資源檔了。","link":"/2018/08/03/2018/2018_08_03-aar_packaged_import/"},{"title":"Android GradientDrawable 漸變效果","text":"一般我們繪製背景圖時，會使用.9.png來設置。遇到漸層背景時，除了透過.9.png設置之外，還可以使用Android本身所提供的shape標籤來實現。 GradientDrawable靜態使用 在drawable中創建一個xml文件 123456789101112131415161718192021&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot; &gt; &lt;size android:width=&quot;200dp&quot; android:height=&quot;200dp&quot;/&gt; &lt;corners android:radius=&quot;10dp&quot;/&gt; &lt;gradient android:startColor=&quot;@android:color/white&quot; android:centerColor=&quot;@android:color/holo_red_light&quot; android:endColor=&quot;@android:color/black&quot; android:useLevel=&quot;false&quot; android:angle=&quot;90&quot; android:type=&quot;radial&quot; android:centerX=&quot;0.5&quot; android:centerY=&quot;0.5&quot; android:gradientRadius=&quot;50&quot;/&gt;&lt;/shape&gt; android:shape = [“rectangle” | “oval” | “line” | “ring”] shape形狀，默認為矩形 rectangle，亦可設置橢圓形oval、線性line、環形ring android:radius : 圓角大小 漸變顏色android:startColor : 起始顏色android:centerColor : 中間值顏色，從起始顏色到結束顏色的變化過程中的中繼顏色android:endColor: 結束顏色 android:useLevel : true (無漸變) | false (有漸變) android:angle : 漸變角度 以45度為一個單位。0 - 由左至右 ; 90 - 由下至上 ; 180 - 由右至左 ; 270 - 由上至下 android:type : 漸變樣式 [linear | radial | sweep] linear 線性漸變 (默認設置) radial 放射式漸變 sweep 雷達式漸變、掃描線式漸變 android:centerX, android:centerY : 中心點相對位置 值域從 0.0 ~ 1.0，此案例設定在中心點，所以 android:centerX和 android:centerY皆為0.5。 android:gradientRadius: 漸變色半徑 當設定android:type=radial 時，一定要設定此項目，否則會發生XmlPullParserException。 動態使用 使用xml來設定shape，最終都是轉成GradientDrawable，並非為ShapeDrawable, 也不是 OvalShape，RoundRectShape等。 程式設計如下：(使用Kotlin語法) 123456789101112var imageView = findViewById&lt;ImageView&gt;(R.id.photo)var gd = GradientDrawable()gd.gradientType = GradientDrawable.RECTANGLE //android:shapegd.cornerRadius = 10.0F //android:radius gd.colors = intArrayOf(Color.WHITE, Color.RED, Color.BLACK) //android:centerColor, android:startColor, android:endColorgd.useLevel = false //android:useLevelgd.gradientType = GradientDrawable.RADIAL_GRADIENT //android:type gd.setGradientCenter(0.5F, 0.5F) //android:centerX, android:centerYgd.gradientRadius = 50.0F //android:gradientRadiusimageView.background = gd android:angle 在 Kotlin中已被取消，必須透過GradientDrawable.Orientation.* 來達成功能。 如: 1gd.orientation = GradientDrawable.Orientation.TOP_BOTTOM 動態更改 既然我們可以動態配置GradientDrawable，那也可以透過動態修改來改變其背景。相關設定如下 123var imageView = findViewById&lt;ImageView&gt;(R.id.photo)var gd = imageView.background as GradientDrawablegd.colors = intArrayOf(Color.WHITE, Color.BLUE, Color.BLACK)","link":"/2018/08/07/2018/2018_08_07-gradientdrawable/"},{"title":"Android 更新Aar檔案","text":"在開發時，有時需要引用第三方library - jar檔或者aar檔。這次遇到要更新aar檔案時，發生沒有更新成功的問題。 將新的aar檔覆蓋舊的aar檔後，參考網路上的方式，rebuild / sync gradle / File -&gt; Invalidate Caches and Restart… 都無法成功 最後使用以下方式可成功更新 aar 檔 Step 1: 在你的 Project資料夾下，顯示所有隱藏檔 Step 2: 再到 /.idea/libraries 資料夾下 Step 3: 找到Gradle__artifacts_[aar_name].xml，刪除此檔案 Step 4: 回到Android Studio，File -&gt; Sync Projech with Gradle Files 即可","link":"/2018/08/09/2018/2018_08_09-update_aar/"},{"title":"AndroidStudio Clean Project 錯誤","text":"最近將buildToolsVersion更改為 27.0.3及更新NDK 17r後，使用Clean Project時，發生Error。 在網路上搜尋解法，使用了以下的方式都無法解決。 配置ndk 在build.gradle加入 ndk 及 sourceSets。 將 NDK 降板 心想有可能是Android NDK 17r的問題，因此嘗試將NDK降回到16r，依舊無解。 增加屬性multiDexEnabled 有文章指出可能是library重複了或者是使用了65K以上的Method，可以採取增加屬性multiDexEnabled來解決。 文章出處 以上方式都無法解決後，只好一步一步解析到底是在哪邊發生錯誤。 在Terminal中輸入以下指令。 terminal1./gradlew assembleDebug --info 錯誤原因：jni_gstreamer 中armeabi ABI 已不再被支援。 查看Android Developer文件 ，armeabi在NDK 17r已移除，須改用armeabi-v7a。 解決方式 修改 /jni_gstreamer/src/main/jni/Application.mk，將APP_ABI := armeabi更改為 Application.mk1APP_ABI := armeabi-v7a 再重新Clean Project和Build即可。","link":"/2018/08/31/2018/2018_08_31-non_zero_exit_value_2/"},{"title":"Android loadLibrary - dlopen failed","text":"先前具有系統權限下，使用System.loadLibrary可正常的讀取到system/lib底下的.so檔但在Android 8 (SDK 26, M) 卻得到以下訊息而Crash java.lang.UnsatisfiedLinkError: dlopen failed: library “/system/lib/libcutils.so” is not accessible for the namespace “classloader-namespace” 原因是Anroid 7 (SDK 24, N) 避免載入非公開API時，會使得APP Crash。 網路上解決方式有以下幾種 修改system/etc/public.libraries.txt 將非官方library的名稱libgstreamer.so加入到public.libraries.txt中。 但此方式在我開發的機器上會失敗而無法進入到Android 桌面，或許是需要燒image的方式才能成功。 指定讀取 vendor lib 可將第三方library放到vendor/lib中，此方法試過是可行的。 device manufactures 機制 在Android 9提供了device manufactures 機制，依然可將library放到system/lib之中，但是必須將library命名為 lib*COMPANYNAME.so 如 libgstreamer.qisda.so 並在system/etc/中增加 public.libraries-COMPANYNAME.txt 由於手上無Android 9 的機器，此方式還未測試過。 Reference source.android.com","link":"/2019/03/27/2019/2019_03_27-system_loadlibrary_linkerror/"},{"title":"架設HttpServer - NanoHttpd","text":"NanoHttpd是一個輕量級的Http Server，可在本地端接收Http Client所傳來的訊息。 Step 1: 下載 .jar 檔 NanoHttpd jar 下載網址https://github.com/NanoHttpd/nanohttpd/releases Step 2: 將下載的.jar檔案，放置到 (App Name)/lib 資料夾底下 Step 3: build.gradle 中添加 .jar檔的資訊 build.gradle12345678android { ...}dependencies { ... compile files('libs/nanohttpd-2.3.1.jar')} Step 4: 新增加class，並繼承NanoHTTPD NanoHttpServer.java12345public class NanoHttpServer extends NanoHTTPD { public NanoHttpServer(int port) { super(port); }} Step 5: 建立NanoHttpServer並啟動HttpServer 設定一組port來進行溝通，此例子使用6600 port來監聽socket間的溝通 MainActivity.java12mHttpServer = new NanoHttpServer(6600);mHttpServer.start(); Step 6: 接收Client端的訊息 當Client連接上，並傳送訊息時，可由serve(IHTTPSession session) 接收訊息並回傳Response NanoHttpServer.java123456789101112131415161718@Override public Response serve(IHTTPSession session) { String uri = session.getUri(); String method = session.getMethod().name(); String remoteIp = session.getRemoteIpAddress(); NxLog.e(TAG, &quot;uri: &quot; + uri); NxLog.e(TAG, &quot;method: &quot; + method); NxLog.e(TAG, &quot;remoteIp: &quot; + remoteIp); InputStream is = session.getInputStream(); ... String msg = &quot;Send response to client&quot;; return newFixedLengthResponse(msg); } 不過需要注意的是IHTTPSession的getInputStream，讀完數據流後不會回傳 -1 或者結束符號，必須自己控制何時結束。 我們可取一個buffer size來控制，當讀入的數據長度小於此buffer size則跳出迴圈表示已讀完數據流。 1234567891011121314try { InputStream is = session.getInputStream(); int buffer_szie = 1024; byte[] buffer = new byte[buffer_szie]; int length = 0; do { length = is.read(buffer); //... } while(length &gt;= buffer_szie );} catch (IOException e) { e.printStackTrace();}","link":"/2019/04/01/2019/2019_04_01-nanohttpd/"},{"title":"How to build GStreamer","text":"Step 1: 下載GStreamer 先到官網下載GStreamer source codehttps://gstreamer.freedesktop.org/data/pkg/android/ Step 2: 下載gst-docs cmd1git clone git://anongit.freedesktop.org/gstreamer/gst-docs Step 3: 在AndroidStudio新增Project 在此我們選擇android-tutorial-3(gst-docs/examples/tutorials/android-tutorial-3) Step 4: 增加 GSTREAMER_ROOT_ANDROID 路徑 在/examples/tutorials/android/android-tutorial-3/jni/Android.mk中增加GSTREAMER_ROOT_ANDROID 路徑, 路徑為剛剛在步驟一所下載的GStreamer Android.mk1234567include $(BUILD_SHARED_LIBRARY)GSTREAMER_ROOT_ANDROID := /home/nick/Git/gstreamerifndef GSTREAMER_ROOT_ANDROID$(error GSTREAMER_ROOT_ANDROID is not defined!)endif Step 5: 修改GSTREAMER_ROOT的判斷 根據支援的cpu 架構，刪除其餘的判斷式以armv7為例 Android.mk1GSTREAMER_ROOT:= $(GSTREAMER_ROOT_ANDROID)/armv7 Step 6: 修改build.grade 在/examples/tutorials/android/android-tutorial-3/build.gradle中刪除gstRoot的code 刪除以下程式碼 android-tutorial-3/build.gradle1234567891011def gstRootif (project.hasProperty('gstAndroidRoot')) gstRoot = project.gstAndroidRootelse gstRoot = System.env.GSTREAMER_ROOT_ANDROIDif (gstRoot == null) throw new GradleException...arguments &quot;NDK_APPLICATION_MK=jni/Application.mk&quot;, &quot;GSTREAMER_JAVA_SRC_DIR=src&quot;, &quot;GSTREAMER_ROOT_ANDROID=$gstRoot&quot;, &quot;GSTREAMER_ASSETS_DIR=src/assets&quot; Step 7: 過濾ABI 修改build.grade build.grade123456externalNativeBuild { ndkBuild { targets &quot;tutorial-3&quot; abiFilters 'armeabi-v7a' } } Step 8:更改/examples/tutorials/android/settings.gradle 將include ‘:android-tutorial-1’, include ‘:android-tutorial-2’include ‘:android-tutorial-4’, include ‘:android-tutorial-5’ 刪除 Step 9: 重新編譯 編譯後，可在/examples/tutorials/android/android-tutorial-3/gst-build-armeabi-v7a中取得libgstreamer_android.so","link":"/2019/04/03/2019/2019_04_03-build_gstreamer/"},{"title":"Android 區域網路 - JCIFS Library","text":"在Android 機器上想要讀取Windows 或 Linux 網路芳鄰中檔案時, 可使用第三方Library : Jcifs 來實現. Jcifs 屬於 LGPL License, 只要不更改到 Jcifs 相關source code就不須將Souce Code 公開. 但Jcifs目前只支援smb 1，不支援smb 2/smb 3。若要支援smb 2/3 可使用 jcifs-ng smbj Step 1: 取得 Jcifs jar 檔案 可從官網 ：https://jcifs.samba.org/ 下載 jar 檔. 將jar檔案複製到 /project_name/libs 中 Step 2: 設定 Library 在Project檔案列表中, 在libs/jcifs-1.3.19.jar按右鍵, 選擇 Add to Library Step 3: 取得遠端檔案 無使用者帳號密碼 String remoteURL = “smb://192.168.0.155”;SmbFile dir = new SmbFile(remoteURL); 需要使用者帳號密碼 NtlmPasswordAuthentication auth = new NtlmPasswordAuthentication(null, userName, password);String remoteURL = “smb://192.168.0.155”;SmbFile dir = new SmbFile(remoteURL, auth); Step 4: 下載遠端檔案 123456789101112131415161718String remoteURL = &quot;smb://192.168.0.155&quot;;String remoteFile = &quot;//qtytr01publicnb//cmsfiles//test.csv&quot;;NtlmPasswordAuthentication auth = new NtlmPasswordAuthentication(null, userName, password);SmbFile dir = new SmbFile(remoteURL + remoteFile, auth);SmbFileInputStream inputSmbFileStream = new SmbFileInputStream(smbFile);File localFile = new File(filePath);FileOutputStream outputFileStream = new FileOutputStream(localFile);byte[] buffer = new byte[4096];int length = 0;while ((length = inputSmbFileStream.read(buffer)) &gt; 0) { outputFileStream.write(buffer, 0, length);}outputFileStream.close();inputSmbFileStream.close();","link":"/2019/04/08/2019/2019_04_08-jcifs/"},{"title":"Android 區域網路 - Jcifs-ng","text":"Android 與 Windows之間可透過smb socket技術在區網中上傳或下載檔案。 之前提過使用Jcifs library來達成此功能，但是Jcifs只支援smb 1，而不支援smb 2/smb 3。 因此需要透過其他library來完成，如smbj或jcifs-ng。 由於smbj需要使用Android SDK 26 (Android O, Android 8)，目前手邊沒有這些設備，所以本篇使用jcifs-ng來實做。 Step 1: 引用 Jcifs -ng 在Jcifs-ng官網中說明，引用Jcifs-ng只要在build.gradle中添加 build.gradle12345&lt;dependency&gt; &lt;groupId&gt;eu.agno3.jcifs&lt;/groupId&gt; &lt;artifactId&gt;jcifs-ng&lt;/artifactId&gt; &lt;version&gt;2.1.2&lt;/version&gt;&lt;/dependency&gt; 亦可更改為 build.gradle12345678android { ...}dependencies { ... compile 'eu.agno3.jcifs:jcifs-ng:2.1.2'} Step 2: 取得遠端檔案 1234567891011121314151617181920212223String userName = &quot;user&quot;;String password = &quot;1234&quot;;String remoteFile = &quot;/files/test.csv&quot;;String remoteURL = &quot;smb://nickpublicpc&quot;;CIFSContext baseCxt = new BaseContext(new PropertyConfiguration(System.getProperties()));NtlmPasswordAuthenticator auth = new NtlmPasswordAuthenticator(userName, password);CIFSContext ct = baseCxt.withCredentials(auth);SmbFile smbFile = new SmbFile(remoteURL + remoteFile, ct);SmbFileInputStream inputSmbFileStream = new SmbFileInputStream(smbFile);File localFile = new File(filePath);FileOutputStream outputFileStream = new FileOutputStream(localFile);byte[] buffer = new byte[4096];int length = 0;while ((length = inputSmbFileStream.read(buffer)) &gt; 0) { outputFileStream.write(buffer, 0, length);}outputFileStream.close();inputSmbFileStream.close(); 以上便可透過smb server來取得區域網路中的文件，但Jcifs-ng只支援部份smb 3，需要看看往後版本會不會再更新了。","link":"/2019/04/09/2019/2019_04_09-jcifs_ng/"},{"title":"Android TensorFlow Lite 辨識物品","text":"由於最近需要去研究人臉辨識的實作方式，雖然目前網路上提供很多SDK，不過大多數都是要付費使用，畢竟一個Machine Learning的資料庫也需要維護，所以大部分不會有免費使用的SDK。 在網路上搜尋後，找到了一個輕量化的開源資料庫 - TensorFlow Lite 本篇先以辨識圖像的例子來解說，往後再介紹人臉辨識的方式。 參考文章 Step 1: 下載TensorFlow模型 使用MobileNet_v1_1.0_224的模型 下載點 解壓縮之後可以找到 mobilenet_v1_1.0_224.tflite這個檔案 Step 2: 下載模型Label 上述的模型共有1001個分類，不過壓縮檔內沒有包含分類好的標籤，已分類好的標籤可由此下載 下載點 Step 3: 引用TensorFlow Lite 在build.gradle的dependencies中加入libraries build.gradle12345dependencies { ... implementation 'com.github.bumptech.glide:glide:4.3.1' implementation 'org.tensorflow:tensorflow-lite:0.0.0-nightly'} 然後在android的項目中加入以下代碼，主要是避免壓縮tensor lite的模型 build.gradle123456android { ... aaptOptions { noCompress &quot;tflite&quot; }} Step 4: 添加模型 在main目錄下創建assets，將剛剛.tflite和label .txt檔案放到此處。 在畫面中使用兩個按鈕: 引用模型和分析圖片 點擊引用模型的代碼如下 loadModeFile : 把模型文件讀取成ByteBuffer，並交給Interpreter初始化。load_mode : 取得Interpreter後，使用這個物件來分析圖像，並設置使用的Thread 數量 (tflite.setNumThreads) MainActivity.java12345678910111213141516171819202122232425262728293031323334353637private final String MODEL_NAME = &quot;mobilenet_v1_1.0_224&quot;;private Interpreter tflite = null;@Overridepublic void onClick(View v) { switch(v.getId()) { case R.id.load_model: load_model(MODEL_NAME); break; ... }}private void load_model(String model) { try { tflite = new Interpreter(loadModelFile(model)); Toast.makeText(MainActivity.this, model + &quot; model load success&quot;, Toast.LENGTH_SHORT).show(); Log.d(TAG, model + &quot; model load success&quot;); tflite.setNumThreads(4); load_result = true; } catch (IOException e) { Toast.makeText(MainActivity.this, model + &quot; model load fail&quot;, Toast.LENGTH_SHORT).show(); Log.d(TAG, model + &quot; model load fail&quot;); load_result = false; e.printStackTrace(); }}private ByteBuffer loadModelFile(String model) throws IOException { AssetFileDescriptor fileDescriptor = getApplicationContext().getAssets().openFd(model + &quot;.tflite&quot;); FileInputStream inputStream = new FileInputStream(fileDescriptor.getFileDescriptor()); FileChannel fileChannel = inputStream.getChannel(); long startOffset = fileDescriptor.getStartOffset(); long declaredLength = fileDescriptor.getDeclaredLength(); return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);} Step 5: 添加Label 在程式開始時，先讀入Label文件 MainActivity.java1234567891011121314151617181920@Overrideprotected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ... readCacheLabelFromLocalFile();}private void readCacheLabelFromLocalFile() { try { AssetManager assetManager = getApplicationContext().getAssets(); BufferedReader reader = new BufferedReader(new InputStreamReader(assetManager.open(LABEL_NAME + &quot;.txt&quot;))); String readLine = null; while ((readLine = reader.readLine()) != null) { resultLabel.add(readLine); } reader.close(); } catch (Exception e) { Log.e(&quot;labelCache&quot;, &quot;error &quot; + e); }} Step 6: 分析圖片 predict_image ：先取得圖片後，對圖片進行壓縮，之後把圖片轉成ByteBuffer格式後，再調用Interpreter.run()進行分析。get_max_result : 取得分析之後，機率最高的Label MainActivity.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101private List&lt;String&gt; resultLabel = new ArrayList&lt;&gt;();private ImageView mImage;private int[] ddims = {1, 3, 224, 224};private TextView mResult;@Overridepublic void onClick(View v) { switch(v.getId()) { ... case R.id.use_photo: RequestOptions options = new RequestOptions().skipMemoryCache(true).diskCacheStrategy(DiskCacheStrategy.NONE); File file = new File(&quot;/storage/sdcard1/mouse.jpeg&quot;); Uri photoUri = Uri.fromFile(file); Glide.with(MainActivity.this).load(photoUri).apply(options).into(mImage); predict_image(file.getAbsolutePath()); break; default: break; }}private void predict_image(String image_path) { // picture to float array Bitmap bmp = getScaleBitmap(image_path); ByteBuffer inputData = getScaledMatrix(bmp, ddims); try { float[][] labelProbArray = new float[1][1001]; long start = System.currentTimeMillis(); // get predict result tflite.run(inputData, labelProbArray); long end = System.currentTimeMillis(); long time = end - start; float[] results = new float[labelProbArray[0].length]; System.arraycopy(labelProbArray[0], 0, results, 0, labelProbArray[0].length); // show predict result and time int r = get_max_result(results); String show_text = &quot;result：&quot; + r + &quot;\\nname：&quot; + resultLabel.get(r) + &quot;\\nprobability：&quot; + results[r] + &quot;\\ntime：&quot; + time + &quot;ms&quot;; mResult.setText(show_text); } catch (Exception e) { e.printStackTrace(); }}private Bitmap getScaleBitmap(String filePath) { BitmapFactory.Options opt = new BitmapFactory.Options(); opt.inJustDecodeBounds = true; BitmapFactory.decodeFile(filePath, opt); int bmpWidth = opt.outWidth; int bmpHeight = opt.outHeight; int maxSize = 500; // compress picture with inSampleSize opt.inSampleSize = 1; while (true) { if (bmpWidth / opt.inSampleSize &lt; maxSize || bmpHeight / opt.inSampleSize &lt; maxSize) { break; } opt.inSampleSize *= 2; } opt.inJustDecodeBounds = false; return BitmapFactory.decodeFile(filePath, opt);}private ByteBuffer getScaledMatrix(Bitmap bitmap, int[] ddims) { ByteBuffer imgData = ByteBuffer.allocateDirect(ddims[0] * ddims[1] * ddims[2] * ddims[3] * 4); imgData.order(ByteOrder.nativeOrder()); // get image pixel int[] pixels = new int[ddims[2] * ddims[3]]; Bitmap bm = Bitmap.createScaledBitmap(bitmap, ddims[2], ddims[3], false); bm.getPixels(pixels, 0, bm.getWidth(), 0, 0, ddims[2], ddims[3]); int pixel = 0; for (int i = 0; i &lt; ddims[2]; ++i) { for (int j = 0; j &lt; ddims[3]; ++j) { final int val = pixels[pixel++]; imgData.putFloat(((((val &gt;&gt; 16) &amp; 0xFF) - 128f) / 128f)); imgData.putFloat(((((val &gt;&gt; 8) &amp; 0xFF) - 128f) / 128f)); imgData.putFloat((((val &amp; 0xFF) - 128f) / 128f)); } } if (bm.isRecycled()) { bm.recycle(); } return imgData;}private int get_max_result(float[] result) { float probability = result[0]; int r = 0; for (int i = 0; i &lt; result.length; i++) { if (probability &lt; result[i]) { probability = result[i]; r = i; } } return r;} 執行結果","link":"/2019/04/10/2019/2019_04_10-tensorflow_lite_object_recognition/"},{"title":"Android TensorFlow Lite 人臉辨識","text":"在上一篇，我們介紹過使用TensorFlow Lite來辨識物品，此篇我們來探討如何達成人臉辨識。由於無法取得TensorFlow Lite的人臉模型，因此我們必須自已訓練模型來分析圖片。 參考文章 Step 1: 安裝TensorFlow 我們在Ubuntu機器上先安裝TensorFlow cmd12pip install --upgrade &quot;tensorflow==1.7.*&quot;pip install PILLOW Step 2: 下載TensorFlow Script cmd12git clone https://github.com/googlecodelabs/tensorflow-for-poets-2cd tensorflow-for-poets-2 Step 3: 下載訓練圖片 我們在網路上擷取一些圖片，來當作訓練資料。 每種圖片至少要20張。 將下載好的圖片放置/tensorflow-for-poets-2/tf_files中，並使用一個父類別的資料夾，如/tensorflow-for-poets-2/tf_files/people/cheryl/tensorflow-for-poets-2/tf_files/people/fivebear/tensorflow-for-poets-2/tf_files/people/sonia 在父類別資料夾中的子資料夾名稱，之後會成為我們訓練出來的Label名稱 Step 4: 設定Config 繼續在終端機輸入 IMAGE_SIZE : 圖像解析度，若設的太高，則分析起來會花比較長的時間。可設定的值為 128,160,192, or 224pxARCHITECTURE : 設定比對值，可設定為 1.0, 0.75, 0.50, or 0.25。 cmd12IMAGE_SIZE=224ARCHITECTURE=&quot;mobilenet_0.50_${IMAGE_SIZE}&quot; Step 5: 訓練資料 在終端機輸入 cmd123456789python -m scripts.retrain --bottleneck_dir=tf_files/bottlenecks --how_many_training_steps=500 --model_dir=tf_files/models/ --summaries_dir=tf_files/training_summaries/&quot;${ARCHITECTURE}&quot; --output_graph=tf_files/retrained_graph.pb --output_labels=tf_files/peopleLabels.txt --architecture=&quot;${ARCHITECTURE}&quot; --image_dir=tf_files/people 程式會執行Python script : scripts.retrain，根據我們的訓練圖資會產生訓練資訊-retrained_graph.pb以及Label - peopleLabels.txt Step 6: 轉譯為Mobile訓練資料 首先我們必須先安裝bazel, freeze_graph, toco等工具。 安裝bazel : 可參考官網的安裝方式 下載TensorFlow Source code cmd1git clone https://github.com/tensorflow/tensorflow.git 編譯 reeze_graph, toco cmd123cd tensorflow/bazel build tensorflow/python/tools:freeze_graphbazel build tensorflow/contrib/lite/toco:toco 回到tensorflow-for-poets-2資料夾後輸入 cmd12345678910toco --input_file=tf_files/retrained_graph.pb --output_file=tf_files/people.tflite --input_format=TENSORFLOW_GRAPHDEF --output_format=TFLITE --input_shape=1,${IMAGE_SIZE},${IMAGE_SIZE},3 --input_array=input --output_array=final_result --inference_type=FLOAT --input_data_type=FLOAT 執行完後會產生Mobile所使用的訓練資料檔people.tflite，再將people.tflite和peopleLabels.txt 放到Project的/src/main/assets中。 並更改前篇文章程式中的MODEL_NAME和LABEL_NAME即可。 cmd12MODEL_NAME = &quot;people&quot;;LABEL_NAME = &quot;peopleLabels&quot;; 執行結果","link":"/2019/04/11/2019/2019_04_11-tensorflow_lite_face_recognition/"},{"title":"Android Baidu Text To Speech","text":"Text To Speech (TTS) 文字語音，也就是將使用者輸入的文字轉化為語音。百度TTS 是一個免費的文字語音SDK，本篇將以百度TTS SDK 來達成文字語音的功能。 Step 1: 創建應用 首先必須要註冊百度雲 帳號，註冊好之後，點擊管理控制台來創建應用。 選擇語音技術 再選擇創建應用 填入相關資訊， 記得要填對package name Step 2: 下載SDK和library 點選左邊Menu Bar的SDK下載，再選取語音合成，下載Android版本的SDK。 在project/src/main 新增資料夾jniLibs。 將下載後壓縮檔解壓縮後，將Baidu-TTS-Android-2.3.5.20180713_6101c2a/app/src/main/jniLibs/armeabi資料夾複製到剛剛新增的jniLibs資料夾中。 再將Baidu-TTS-Android-2.3.5.20180713_6101c2a/app/libs/com.baidu.tts_2.3.2.jar複製到project/libs中 Step 3: 引用jar檔 在build.gradle的dependencies中增加compile jar檔 build.gradle1234dependencies { ... compile files('libs/com.baidu.tts_2.3.2.jar')} Step 4: 初始化TTS 取得SpeechSynthesizer實例 1234private SpeechSynthesizer mSpeechSynthesizer;mSpeechSynthesizer = SpeechSynthesizer.getInstance();mSpeechSynthesizer.setContext(this); 設置TTS Listener 12345678910111213141516171819202122232425262728public class MainActivity extends AppCompatActivity implements SpeechSynthesizerListener { private void initTTS() { ... mSpeechSynthesizer.setSpeechSynthesizerListener(this); } @Override public void onSynthesizeStart(String s) { } @Override public void onSynthesizeDataArrived(String s, byte[] bytes, int i) { } @Override public void onSynthesizeFinish(String s) { } @Override public void onSpeechStart(String s) { } @Override public void onSpeechProgressChanged(String s, int i) { } @Override public void onSpeechFinish(String s) { } @Override public void onError(String s, SpeechError speechError) { }} Step 5: 設置AppId, AppKey 和 AppSecretKey 在百度雲創建應用程式後，會有AppId, AppKey 和 AppSecretKey 12int result = mSpeechSynthesizer.setAppId(appId);result = mSpeechSynthesizer.setApiKey(appKey, secretKey); Step 6: 驗證並下載授權文件 TtsMode.ONLINE : 純在線模式，自動下載授權文件，每次啟用時可能需要更新授權文件TtsMode.MIX : 離線與在線模式 12345678910private boolean checkAuth() { AuthInfo authInfo = mSpeechSynthesizer.auth(ttsMode); if (!authInfo.isSuccess()) { String errorMsg = authInfo.getTtsError().getDetailMessage(); return false; } else { Log.i(TAG, &quot;checkAuth success!&quot;); return true; }} Step 7: 導入TTS 模型 複製 Baidu-TTS-Android-2.3.5.20180713_6101c2a/app/src/main/assets資料夾到project/src/main中 在程式開始前，將檔案複製到SD Card中 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869private String MODEL_FILENAME ; private String TEXT_FILENAME ; private static final String SPEECH_FEMALE_MODEL_NAME = &quot;bd_etts_common_speech_f7_mand_eng_high_am-mix_v3.0.0_20170512.dat&quot;; private static final String TEXT_MODEL_NAME = &quot;bd_etts_text.dat&quot;; @Overrideprotected void onResume() { super.onResume(); copyModelFileToSD(); initTTS();}private void copyModelFileToSD() { String folder = MainActivity.this.getFilesDir().getAbsolutePath(); MODEL_FILENAME = folder + &quot;/&quot; + TEXT_MODEL_NAME; TEXT_FILENAME = folder + &quot;/&quot; + SPEECH_FEMALE_MODEL_NAME; InputStream is = null; FileOutputStream fos = null; try { Context context = MainActivity.this.getApplicationContext(); File textFile = new File(TEXT_FILENAME); File modelFile = new File(MODEL_FILENAME); if (!textFile.exists()) { textFile.createNewFile(); is = context.getAssets().open(TEXT_MODEL_NAME); fos = new FileOutputStream(textFile); copyFile(is, fos); } else { //ignore } if (!modelFile.exists()) { modelFile.createNewFile(); is = context.getAssets().open(SPEECH_FEMALE_MODEL_NAME); fos = new FileOutputStream(modelFile); copyFile(is, fos); } else { //ignore } } catch (IOException e) { Log.e(TAG, &quot;Error: &quot; + e.toString()); } finally { closeObject(is); closeObject(fos); }}private void copyFile(InputStream is, FileOutputStream fos) throws IOException { byte[] buffer = new byte[2048]; int byteCount = 0; while((byteCount=is.read(buffer))!=-1) { fos.write(buffer, 0, byteCount); } fos.flush();}private void closeObject(Closeable obj) { try { if (null != obj) { obj.close(); } } catch (IOException e) { Log.e(TAG, &quot;Error: &quot; + e.toString()); }} 在checkAuth成功後，設置模型參數 123456789101112131415private void setupParam() { mSpeechSynthesizer.setParam(SpeechSynthesizer.PARAM_TTS_TEXT_MODEL_FILE, TEXT_FILENAME); mSpeechSynthesizer.setParam(SpeechSynthesizer.PARAM_TTS_SPEECH_MODEL_FILE, MODEL_FILENAME); //人聲種類, 0 : 普通女聲, 1:普通男聲, 2:特別男聲, 3:情感男, 4:兒童聲 mSpeechSynthesizer.setParam(SpeechSynthesizer.PARAM_SPEAKER, &quot;0&quot;); //音量: 0 ~ 9 mSpeechSynthesizer.setParam(SpeechSynthesizer.PARAM_VOLUME, &quot;9&quot;); //速度: 0~9 mSpeechSynthesizer.setParam(SpeechSynthesizer.PARAM_SPEED, &quot;4&quot;); //語調: 0 ~ 9 mSpeechSynthesizer.setParam(SpeechSynthesizer.PARAM_PITCH, &quot;4&quot;); //請求模式 mSpeechSynthesizer.setParam(SpeechSynthesizer.PARAM_MIX_MODE, SpeechSynthesizer.MIX_MODE_DEFAULT); } MIX_MODE_DEFAULT: 有wifi時，使用在線模式，無wifi時使用離線模式。在線狀態下，請求超過6秒自動轉離線。MIX_MODE_HIGH_SPEED_SYNTHESIZE_WIFI: 與MIX_MODE_DEFAULT相同，但請求超過1.2秒自動轉離線。MIX_MODE_HIGH_SPEED_NETWORK: 可使用3G/4G or Wifi, 但請求超過1.2秒自動轉離線。 完整設定TTS模型流程如下 1234567891011121314151617181920private void initTTS() { mSpeechSynthesizer = SpeechSynthesizer.getInstance(); mSpeechSynthesizer.setContext(this); mSpeechSynthesizer.setSpeechSynthesizerListener(this); int result = mSpeechSynthesizer.setAppId(appId); result = mSpeechSynthesizer.setApiKey(appKey, secretKey); if (!checkAuth()) { return; } setupParam(); result = mSpeechSynthesizer.loadModel(TEXT_FILENAME, MODEL_FILENAME); result = mSpeechSynthesizer.initTts(TtsMode.MIX); if (result != 0) { Log.e(TAG, &quot;init failed&quot;); } else { Log.e(TAG, &quot;init success&quot;); }} Step 8: 讀出文字 如果需要馬上讀出語音的話，使用speak api。只需要先合成可使用synthesize。 12String text = &quot;測試百度TTS&quot;;mSpeechSynthesizer.speak(text);","link":"/2019/04/12/2019/2019_04_12-baidu_tts/"},{"title":"Android 多屏顯示","text":"Android在SDK 17時，提供了多屏異步顯示。本篇將敘述如何在兩個屏幕中透過HDMI來達成異步顯示的方式。 Step 1: 檢視屏幕數量 123456DisplayManager mDisplayManager = context.getSystemService(Context.DISPLAY_SERVICE);Display[] displays = mDisplayManager.getDisplays();Log.i(TAG, &quot;Display Counts: &quot; + displays.length);//display[0] : 主要屏幕//display[1] : 副屏幕 Step 2: 創建Presentation類別 首先我們要先創建class並繼承Presentation。(Presentation類繼承Dialog類別) 123456789101112131415161718192021public class SubDislay extends Presentation { public SubDislay(Context outerContext, Display display) { super(outerContext, display); } public SubDislay(Context outerContext, Display display, int theme) { super(outerContext, display, theme); } @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.sub_view); //ImageView 的內容必須在此設置, 否則不會呈現 Resources r = getContext().getResources(); ImageView image = findViewById(R.id.imageView3); image.setImageDrawable(r.getDrawable(R.drawable.pic2)); }} Step 3: 呈現畫面於副屏幕 在MainActivity.java中宣告SubDislay，並將畫面給予副屏幕呈現。 1234SubDislay mPresentation =new SubDislay (this,displays[1]);if(null != mPresentation) { mPresentation.show();}","link":"/2019/04/29/2019/2019_04_29-multi_displays/"},{"title":"Android 影片截圖","text":"Android針對影片截圖的方式，可使用MediaMetadataRetriever來完成。 1234567891011String videoFilePath = &quot;/storage/sdcard0/Shadows_Die_Twice.mp4&quot;MediaMetadataRetriever retriever = new MediaMetadataRetriever();retriever.setDataSource(videoFilePath);Bitmap bitmap = retriever.getFrameAtTime(1000000);ByteArrayOutputStream baos = new ByteArrayOutputStream();bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos); //bm is the bitmap objectImageView mView = findViewById(R.id.image);mView.setImageBitmap(bitmap); 執行結果","link":"/2019/05/10/2019/2019_05_10-movie-screenshot/"},{"title":"Android CursorLoader  - onLoadFinished not called","text":"先前為了不影響UI Thread的執行，等到程式都Ready時，才執行CursorLoader的初始化。 執行程式時都很正常也能收到onLoadFinished callback event，但旋轉屏幕時卻無法再次收到onLoadFinished callback event。 按照網路所使用的方式，先destroyLoader在restartLoader也是無法收到event。 MainActivity.java12345678910111213private static final int LOADER_UI_EVENT = 1;private void loadEvent() { LoaderManager loaderManager = getLoaderManager(); Loader eventLoader = loaderManager.getLoader(LOADER_UI_EVENT); if (null != eventLoader) { loaderManager.destroyLoader(LOADER_UI_EVENT); loaderManager.restartLoader(LOADER_UI_EVENT, null, this); } else { loaderManager.initLoader(LOADER_UI_EVENT, null, this); }} 重新看了Android 官方文件後，CursorLoader初始化必須在Activity onCreate時，才會收到onLoadFinished callback event。 將程式修改為onCreate先初始化Loader，旋轉屏幕時也能收到event了，之後如果要重新讀取Loader再呼叫loadEvent 函式即可。 MainActivity.java12345@Overrideprotected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getLoaderManager().initLoader(LOADER_UI_EVENT, null, this);}","link":"/2019/05/16/2019/2019_05_16-cursorloader_onloadfinished/"},{"title":"Android 圖片轉成字串傳輸","text":"本篇要來探討如何將圖片轉成JSON格式做傳輸的方式。 我們可利用Base64 encode的方式將圖片轉成字串，再放置到JSON格式中做傳輸。 首先我們必須先將圖片轉成byte陣列 123456String filePath = &quot;/mnt/sdcard/test.jpg&quot;;Bitmap bitmap = BitmapFactory.decodeFile(filePath, getBitmapOption(2));ByteArrayOutputStream baos = new ByteArrayOutputStream();bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);byte[] bytes = baos.toByteArray(); 在使用Base64 encode成字串 1String enStr = Base64.encodeToString(bytes, Base64.DEFAULT); 之後我們就可以將enStr字串封裝成JSon格式傳送給對方，當對方收到後便可將此字串轉回圖片了。","link":"/2019/05/23/2019/2019_05_23-image_base64_tostring/"},{"title":"Android - 設定開機畫面","text":"首先必須先具備以下條件 裝置必須具有Root權限 開機設定壓縮檔bootanimation.zip必須為無損壓縮 (uncompresser arcgive) 開機畫面壓縮檔位於 /system/media 中，使用 cmd1adb pull /system/media/bootanimation.zip . 取得並解壓縮後，會得到設定檔desc.txt及畫面檔案目錄。 desc.txt123512 128 30p 1 0 part0p 1 60 part1 設定檔第一行說明使用512x128大小的圖檔，30為FPS。 接下來為撥放內容，皆以p為開頭，第一個數字表示撥放次數，若設為0則表示不限定撥放次數，第二個數字表示暫停時間，以60為例，由於播放為30 fps，所以會暫停2秒。最後一個參數表示圖檔目錄。 最後將所有檔案壓縮為bootanimation.zip檔，並選擇使用無損壓縮，壓縮後再放入/system/media中重開機即可。 Ubuntu中使用7Zip做無損壓縮將圖檔目錄和說明檔放到資料夾中，輸入 cmd17z a –mx=0 bootanimation.zip Windows中使用7Zip做無損壓縮壓縮模式/層級，選擇封存(Store/Copy) 最後將開機設定壓縮檔bootanimation.zip放到/system/media/中，重新開機即可。","link":"/2019/10/16/2019/2019_10_16-bootanimation/"},{"title":"Hexo - Icarus 使用 Google AdSense","text":"使用Hexo主題Icarus來架設網站，想要使用Google AdSense來增加廣告收益時，搜尋網站資料，大多是使用Hexo的Next主題來架設。 經過一番研究之後，終於在自己的網站上嵌入Google AdSense了。以下為嵌入Google AsSense的步驟。 只支援Icarus 3.0之前的版本 Step 1: 註冊Google AsSense帳號 申請前，網站內容需要先豐富，否則會申請不過。 首先先登入Google 帳號，並填入你的網站。 接下來就填入你的相關資料，以及驗證，完成註冊。 Step 2: 驗證網站 完成註冊後，Google需要驗證你的網站。 Google AdSense會給你一段Script ，將此Script放在/hexo/theme/hexo-theme-icarus/layout/layout.ejs的head之中 layout.ejs1234567&lt;!DOCTYPE html&gt;&lt;html &lt;%- has_config('language') ? ' lang=&quot;' + get_config('language').substring(0, 2) + '&quot;' : '' %&gt;&gt;&lt;head&gt; &lt;%- _partial('common/head') %&gt; &lt;script data-ad-client=&quot;ca-pub-xxxxxxxxxx&quot; async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; ... &lt;/body&gt; 然後在Google AdSense上點擊驗證即可。 一般會在三天之內收到通知信，就可以得知是否通過Google AdSense的審核。 Step 3: 建立廣告 通過審核後，可在Google AdSense上建立廣告，在此我是使用「按廣告單元 - 多媒體廣告」來建立。 建立好之後，會得到一段Script 將此Script貼到你所想要的Widget中 Ex: Footer : /hexo/theme/hexo-theme-icarus/layout/common/footer.ejs 1234567891011121314151617&lt;footer class=&quot;footer&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;level&quot;&gt; &lt;/div&gt; &lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt; &lt;!-- 橫式廣告 --&gt; &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-xxxxxxxx&quot; data-ad-slot=&quot;xxxxxxx&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt; &lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt; &lt;/div&gt;&lt;/footer&gt; Profile : /hexo/theme/hexo-theme-icarus/layout/widget/profile.ejs 123456789101112131415&lt;div class=&quot;card widget&quot;&gt; &lt;div class=&quot;card-content&quot;&gt; &lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt; &lt;!-- 方形廣告 --&gt; &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-xxxxxxxxx&quot; data-ad-slot=&quot;xxxxx&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt; &lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt; &lt;/div&gt;&lt;/div&gt; Link : /hexo/theme/hexo-theme-icarus/layout/widget/link.ejs 123456789101112131415&lt;div class=&quot;card widget&quot;&gt; &lt;div class=&quot;card-content&quot;&gt; &lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt; &lt;!-- 方形廣告 --&gt; &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-xxxxxxxxx&quot; data-ad-slot=&quot;xxxxx&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt; &lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt; &lt;/div&gt;&lt;/div&gt; 大約過30分鐘後，就可以看到嵌入的廣告了。","link":"/2019/10/25/2019/2019_10_25-icarus-google-adsense/"},{"title":"讓Google也能搜尋到 Hexo - Icarus Blog","text":"我們想讓自己的Blog也能讓Google搜尋的到，該如何做呢？ Google Search Console提供了Sitemap的方式，讓我們的Blog也能被搜尋到囉。 步驟如下: Step 1: 安裝Hexo sitemap 先到hexo根目錄底下，輸入 cmd1npm install hexo-generator-sitemap --save Step 2: 加入 sitemap 路徑 打開hexo根目錄底下的 _config.yml ，並增加以下內容 /hexo/_config.yml12sitemap: path: sitemap.xml Step 3: 創建sitemap檔案 在終端機中輸入 cmd1hexo s 驗證是否創建成功 在本地端網址後加入/sitemap.xml，若有出現以下訊息表示創建成功。 Step 4: 申請Google Search Console 打開Google Search Console , 並將網址填入。 Step 5: 驗證 Google Search Console有多種驗證方式，我們選用HTML標記的方式驗證。 將這段meta的資訊填入/hexo/theme/hexo-theme-icarus/layout/layout.ejs中 layout.ejs123456&lt;!DOCTYPE html&gt;&lt;html &lt;%- has_config('language') ? ' lang=&quot;' + get_config('language').substring(0, 2) + '&quot;' : '' %&gt;&gt;&lt;head&gt; &lt;meta name=&quot;google-site-verification&quot; content=&quot;XXXXX&quot; /&gt;&lt;/head&gt;&lt;body&gt; ... &lt;/body&gt; 再回到Google Search Console中點擊驗證。 Step 6: 提交網頁 到Google Search Console中選擇前往資源，在側邊欄中選取Sitemap，在新增Sitemap中填入sitemap.xml並提交即可。","link":"/2019/10/25/2019/2019_10_25-icarus-google-sitemap/"},{"title":"Android ImageView 被 Button 覆蓋","text":"在一個UI 設計中，我們要在Button的左邊設計icon 原本使用Button的屬性android:drawableLeft來設計，但是相對位置上非常難調整成UI 設計人員所制定的位置。 後來使用RelativeLayout並加上ImageView, Button的設計 12345678910111213141516171819202122&lt;RelativeLayout android:id=&quot;@+id/relativeLayout1&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;Button android:id=&quot;@+id/bt_logout&quot; style=&quot;@style/MenuButtonStyle&quot; android:layout_below=&quot;@+id/relativeLayout2&quot; android:layout_marginTop=&quot;200dp&quot; android:layout_centerHorizontal=&quot;true&quot; android:text=&quot;@string/logout&quot; android:gravity=&quot;center&quot;/&gt; &lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignLeft=&quot;@id/bt_logout&quot; android:layout_alignTop=&quot;@id/bt_logout&quot; android:layout_marginLeft=&quot;24dp&quot; android:layout_marginTop=&quot;17dp&quot; android:src=&quot;@drawable/log_out&quot;/&gt;&lt;/RelativeLayout&gt; 發現ImageView會被Button所覆蓋。 原因是Android制定Button的Z-Order的層級比ImageView高，所以Button總是在ImageView的上方。 替代方案 由於Button是繼承TextView，而TextView和ImageView為同層級，所以我們可以將Button換成TextView，便可讓ImageView疊在TextView的上方了。 12345678910111213141516171819202122&lt;RelativeLayout android:id=&quot;@+id/relativeLayout1&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;TextView android:id=&quot;@+id/bt_logout&quot; style=&quot;@style/MenuButtonStyle&quot; android:layout_below=&quot;@+id/relativeLayout2&quot; android:layout_marginTop=&quot;200dp&quot; android:layout_centerHorizontal=&quot;true&quot; android:text=&quot;@string/logout&quot; android:gravity=&quot;center&quot;/&gt; &lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignLeft=&quot;@id/bt_logout&quot; android:layout_alignTop=&quot;@id/bt_logout&quot; android:layout_marginLeft=&quot;24dp&quot; android:layout_marginTop=&quot;17dp&quot; android:src=&quot;@drawable/log_out&quot;/&gt;&lt;/RelativeLayout&gt;","link":"/2019/10/25/2019/2019_10_25-imageview-over-button/"},{"title":"Android Text Click Color","text":"當點擊Button時，想要改變Button上文字的顏色，我們可使用resource xml的方式來實現。 步驟如下 Step 1: 建立color資料夾 在res底下建立color資料夾。 Step 2: 建立color檔案 在color資料夾底下建立xml檔案, 內容如下 text_color.xml12345&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt; &lt;item android:state_pressed=&quot;true&quot; android:color=&quot;#ffffffff&quot;/&gt; &lt;item android:state_focused=&quot;true&quot; android:color=&quot;#ffffffff&quot;/&gt; &lt;item android:color=&quot;#d0b9ff&quot;/&gt;&lt;/selector&gt; Step 3: 設定文字顏色 main_layout.xml12345678&lt;Button android:id=&quot;@+id/bt_adv&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerHorizontal=&quot;true&quot; android:text=&quot;@string/adv_settings&quot; android:textColor=&quot;@color/text_color&quot;/&gt;","link":"/2019/10/25/2019/2019_10_25-text-click-color/"},{"title":"Android RecyclerView HighLight","text":"當使用RecyclerView，針對點擊項目後，要將背景Highlight，可依照以下步驟實現此功能。 Step 1: 建立項目內容 首先我們先建立項目內容，在此我們使用一個RelativeLayout及TextView，之後選取項目時，更改RelativeLayout背景，達到Highlight功能。 layout_item.xml123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;580dp&quot; android:layout_height=&quot;66dp&quot;&gt; &lt;TextView android:id=&quot;@+id/tx_device&quot; android:layout_width=&quot;398dp&quot; android:layout_height=&quot;64dp&quot; android:layout_centerInParent=&quot;true&quot; android:textSize=&quot;26sp&quot; android:textColor=&quot;@color/color_media_check&quot; android:gravity=&quot;center&quot; /&gt;&lt;/RelativeLayout&gt; Step 2: 建立ViewHolder 其中mRootView指的是剛剛所建立的RelativeLayout 123456789class ItemViewHolder(view: View): RecyclerView.ViewHolder(view) { val mRootView: View val mDevice: TextView init { mRootView = view mDevice = view.findViewById(R.id.tx_device) }} Step 3: 建立Adapter 123456class ItemRecyclerViewAdapter() : RecyclerView.Adapter&lt;ItemViewHolder&gt;(){ override fun onCreateViewHolder(parent: ViewGroup, pos: Int): MediaItemViewHolder { val itemView = LayoutInflater.from(parent.context).inflate(R.layout.layout_item, parent, false) return MediaItemViewHolder(itemView) } } Step 4: 更換Highlight背景 設定RelativeLayout的Click Event，當點擊時將選取到的項目position保存下來，並更新畫面(this.notifyDataSetChanged())。 當項目position等於剛剛所保存的position時，更新背景圖案 12345678910111213141516class ItemRecyclerViewAdapter() : RecyclerView.Adapter&lt;ItemViewHolder&gt;(){ private var mSelectedPos = -1 override fun onBindViewHolder(holder: MediaItemViewHolder, pos: Int) { holder.mRootView.setOnClickListener(View.OnClickListener { v: View -&gt; mSelectedPos = pos this.notifyDataSetChanged() }) if (pos == mSelectedPos) { holder.mRootView.setBackgroundResource(R.drawable.list_select_hover_bg) } else { holder.mRootView.background = null } }} 執行結果 未選取時 選取效果","link":"/2019/11/06/2019/2019_11_06-recyclerview-highlight/"},{"title":"Android SQL 查詢null值","text":"在SQLlite語法中，NULL表示一個缺失數值的值，與空白不同。空白是不佔用空間的，而NULL值是佔用空間的。 在Android的寫法中，若DB欄位值為NULL，使用以下的方式是無法查詢到的。 1234ContentResolver resolver = myContext.getContentResolver();int count = resolver.delete(getDataUri(), Contract.DataColumns.TIME + &quot;=? &quot;, new String[] { null });Log.e(TAG, &quot;count of Null Item: &quot; + count); 可使用 1column_name is null or column_name=&quot;&quot; 的方式查詢NULL值 1234ContentResolver resolver = myContext.getContentResolver();int count = resolver.delete(getDataUri(), Contract.DataColumns.TIME + &quot; is null or &quot; + Contract.DataColumns.TIME + &quot; =? &quot;, new String[] { &quot;&quot; });Log.e(TAG, &quot;count of Null Item: &quot; + count);","link":"/2019/11/13/2019/2019_11_13-sql-query-null-item/"},{"title":"Android 複製assets檔案至SD卡","text":"若想要在程式啟動時，將檔案預載至SD卡中，該如何實做呢？ Step 1: 建立assets資料夾 在專案main 目錄下(專案名稱/module name/src/main)，建立assets資料夾，並將預先載入的檔案放到此目錄中。 Step 2: 取得AssetManager 使用Contex.getAssets() 的方式可取得AssetManager Step 3: 取得檔案流 再使用AssetManager.open(檔案名稱)的方式取得InputStream AssetManager.open(“photo.jpg”); 若檔案在assets的子目錄中時，需要將子目錄名稱帶入 1AssetManager.open(&quot;picture/photo.jpg&quot;); Source Code 123456789101112131415161718192021222324252627282930313233343536private void copyAssetFile() { InputStream is = null; FileOutputStream fos = null; try { File sdFile = new File(&quot;/mnt/sdcard/sd_photo.jpg&quot;); if (!sdFile.exists()) { sdFile.createNewFile(); } is = context.getAssets().open(&quot;picture/photo.jpg&quot;); fos = new FileOutputStream(sdFile); byte[] buffer = new byte[2048]; int byteCount = 0; while ((byteCount = is.read(buffer)) != -1) { fos.write(buffer, 0, byteCount); } fos.flush(); } catch (IOException e) { } finally { closeQuietly(is); closeQuietly(fos); } } private void closeQuietly(Closeable closeable) { if (closeable != null) { try { closeable.close(); } catch (IOException ex) { // ignore } } }","link":"/2019/11/15/2019/2019_11_15-cpoy-assets-file/"},{"title":"Ubuntu boot 空間不足","text":"當時安裝Ubuntu的時候，切給boot的空間為200MB，要更新Kernel時，系統告知boot 空間不足的問題。 原因是Ubuntu更新系統後，並不會將舊的Kernel package移除所導致。 以下為解決方式。 Step 1: 查看當前Kernel版本 使用 cmd1uname -a 來查看當前Kernel版本 Step 2: 查看已安裝Kernel版本 cmd1dpkg --get-selections | grep linux-image Step 3: 刪除Kernel版本 cmd1sudo apt purge linux-image-x.x.x-x-generic linux-image-x.x.x-x-generic 填入版本較舊的名稱 Step 4: 刪除相關檔案 可使用auto reomve或者完整清除的方式來刪除不需要的檔案。 cmd1sudo apt autoremove 完整清除 cmd1sudo apt-get purge *x.x.x-xx* Step 5: 重新開機","link":"/2019/11/15/2019/2019_11_15-ubuntu-boot-not-space/"},{"title":"Android onConfigurationChanged not called for Landscape and Reverselandscape","text":"當螢幕方向改變時，我們通常會在Activity中Override function : onConfigurationChanged 的方式來接收變化。 但目前只有當 Landscape 與 Portrait 之間互轉時才會收到event.所以landscape轉成reverse landscape並不會由onConfigurationChanged收到變化. onConfigurationChanged onConfigurationChanged接收orientation變化的方式如下 在AndroidManifest.xml的填入android:configChanges AndroidManifest.xml123456&lt;application ... &gt; &lt;activity android:name=&quot;.MainActivity&quot; android:screenOrientation=&quot;sensorLandscape&quot; android:configChanges=&quot;orientation|screenSize|keyboardHidden&quot;/&gt;&lt;/application&gt; 在MainActivity.java中增加Override function : onConfigurationChanged 。 AndroidManifest.xml123override fun onConfigurationChanged(newConfig: Configuration?) { super.onConfigurationChanged(newConfig)} 以上的方式無法得知 landscape轉成reverse landscape的訊息。 我們可監聽Ratation的變化來實現此功能。 Rotation Changed Listener Step 1: 建立callback : RotationCallback 新增kotlin interface : RotationCallback RotationCallback.kt123interface RotationCallback { fun onRotationChanged(lastRotation: Int, newRotation: Int)} Step 2: 建立Listerner : RotationListener 新增kotlin class : RotationListener其中mOrientationEventListener監聽Rotation的變化，並透過mCallback傳遞給上層 RotationListener.kt123456789101112131415161718192021222324252627282930313233343536class RotationListener { private var mOrientationEventListener: OrientationEventListener? = null private var mCallback: RotationCallback? = null private var lastRotation: Int = 0 constructor(callback: RotationCallback) { mCallback = callback } fun listen(context: Context) { mOrientationEventListener = object : OrientationEventListener(context, SensorManager.SENSOR_DELAY_NORMAL) { override fun onOrientationChanged(orientation: Int) { val localWindowManager = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager if (null != localWindowManager &amp;&amp; null != mCallback) { val newRotation = localWindowManager.defaultDisplay.rotation if (newRotation != lastRotation) { mCallback!!.onRotationChanged(lastRotation, newRotation) lastRotation = newRotation } } } } mOrientationEventListener!!.enable() lastRotation = (context.getSystemService(Context.WINDOW_SERVICE) as WindowManager).defaultDisplay.rotation } fun stop() { if (null != mOrientationEventListener) { mOrientationEventListener!!.disable() } mOrientationEventListener = null mCallback = null }} Step 3: MainActivity監聽與解除接聽 MainActivity繼承RotationCallback且實現其onRotationChanged function，並在onCreate時建立監聽Rotation變化, 而在onDestroy時取消監聽 MainActivity.kt123456789101112131415161718192021222324252627class MainActivity : AppCompatActivity(), RotationCallback { private val TAG = &quot;MainActivity &quot; private var mRotationListener : RotationListener? = null override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) mRotationListener = RotationListener(this) mRotationListener!!.listen(this.applicationContext) } override fun onDestroy() { super.onDestroy() Log.e(TAG, &quot;onDestroy()&quot;) mRotationListener!!.stop() mRotationListener = null } //RotationCallback override fun onRotationChanged(lastRotation: Int, newRotation: Int) { Log.d(TAG, &quot;onRotationChanged: last &quot; + (lastRotation) +&quot; new &quot; + (newRotation)); }} 這樣就可以得知landscape與reverse landscape的變化了。","link":"/2019/11/21/2019/2019_11_21-reverselandscape-event/"},{"title":"Android HttpURLConnection 繞過證書訪問Https網址","text":"針對訪問Https網站，必須具有認可的證書，經過驗證後才能訪問該網站。 通常需要機構所發行的證書，但在開發階段還未申請到核可的證書時，我們可透過繞過證書的方式，來訪問Https網站。 要繞過證書的方式，主要是重寫HostnameVerifier的驗證方式及配合X509TrustManager來處理授權。 Step 1: 建立class : CustomHostnameVerifier 首先，先在文件中建立CustomHostnameVerifier, 並複寫HostnameVerifier的驗證方法，通過所有的驗證。 Connection.java123456private class CustomHostnameVerifier implements HostnameVerifier { @Override public boolean verify(String hostname, SSLSession session) { return true; }} Step 2: 建立class : CustomTrustManager 建立CustomTrustManager來處理授權。 Connection.java12345678910111213141516171819private class CustomTrustManager implements X509TrustManager { public CustomTrustManager(KeyStore keystore) throws NoSuchAlgorithmException, KeyStoreException { super(); } @Override public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException { } @Override public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { } @Override public X509Certificate[] getAcceptedIssuers() { return null; }} Step 3: 設定SSL及建立連線 在建立HttpURLConnection連線之前，我們必須先設定好SSL相關設定。 Connection.java1234567891011121314151617SSLContext sc = SSLContext.getInstance(&quot;TLS&quot;);sc.init(null, new TrustManager[] { new CustomTrustManager(null) }, new SecureRandom());HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());HttpsURLConnection.setDefaultHostnameVerifier(new CustomHostnameVerifier());URL url = new URL(api);HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();httpConn.setRequestMethod(&quot;POST&quot;);httpConn.setUseCaches(true);httpConn.setAllowUserInteraction(true);httpConn.setDoOutput(true);httpConn.setDoInput(true);httpConn.setConnectTimeout(3000);httpConn.setReadTimeout(3000);... 這樣就能夠繞過證書，達到免簽的方式訪問Https的網站了。","link":"/2019/12/10/2019/2019_12_10-httpurlconnection_ssl/"},{"title":"Hexo - Icarus 多國語系","text":"目前Hexo並沒有支援多國語系，網路上的方式都是以Next主題實做多國語系為主，本篇將以Icarus主題來實做多國語系的Blog。 Step 1: 建立英文站點 在原本Hexo的根目錄下建立en 資料夾(在此命名為blog_en)，將原本Hexo根目錄下的所有檔案/資料夾複製一份到en資料夾中。 node_modules不必複製到en資料夾中 Step 2: 修改Config檔 修改blog_en中的 _config.yml (非icarus主題的config.yml)，修改language為en, url 設定為英文站台的網址 _config.yml1234567891011# Sitetitle: Nick Blogsubtitle:description:keywords:author: Nick Linlanguage: entimezone:# URLurl: https://nickcarter9.github.io/en 在en 資料夾(blog_en)中執行npm install就會自動安裝Hexo所需的插件，安裝完畢後，就可執行hexo g命令產生英文站點。 cmd1nick@Nick-Lin:~/Blog/blog_en$ npm install Step 3: 增加語言切換按鈕 本篇設定在navigation bar的search按鈕旁邊，首先我們先增加英文站點的連結。 修改icarus的 _config.icarus.yml, 在最後一行增加 _config.icarus.yml1blog_en: https://nickcarter9.github.io/en/ 並在blog_en/themes/icarus 的 _config.icarus.yml, 增加中文站點連結 blog_en/themes/icarus/_config.icarus.yml1blog_tw: https://nickcarter9.github.io/ 在中文站點 themes/icarus/layout/common/navbar.jsx的module.exports增加config的對應（blog_en） navbar.jsx1const { logo, title, navbar, widgets, search, blog_en } = config; 在英文站點也增加其對應(blog_en/themes/icarus/layout/common/navbar.jsx) navbar.jsx12 const { logo, title, navbar, widgets, search, blog_tw } = config;} 在return時，返回url(中文站點及英文站點都要設定) navbar.jsx1234567891011121314return { logo, logoUrl: url_for(logo), siteUrl: url_for('/'), siteTitle: title, menu, links, showToc, tocTitle: _p('widget.catalogue', Infinity), showSearch: search &amp;&amp; search.type, searchTitle: __('search.search'), blog_en, langUrl: url_for(blog_en) }; 在中文站點及英文站點增加menu文字(/themes/icarus/languages/en.yml, zh-TW.yml) en.yml12menu: chang-lang: ' Chinese' zh-TW.yml12menu: chang-lang: ' English' 在search按鈕旁邊增加語系按鈕(/themes/icarus/layout/common/navbar.jsx) 在render中增加const變數: langTitle navbar.jsx12345678910111213const { logo, logoUrl, siteUrl, siteTitle, menu, links, showToc, tocTitle, showSearch, searchTitle, langTitle} = this.props; 在 module.exports return 時，傳回變數langTitle navbar.jsx123456789101112131415return { logo, logoUrl: url_for(logo), siteUrl: url_for('/'), siteTitle: title, menu, links, showToc, tocTitle: _p('widget.catalogue', Infinity), showSearch: search &amp;&amp; search.type, searchTitle: __('search.search'), blog_en, langUrl: url_for(blog_en), langTitle: __('menu.chang-lang')}; search按鈕旁邊增加語系按鈕 navbar.jsx123{showSearch ? &lt;a class=&quot;navbar-item search&quot; title={searchTitle} href=&quot;javascript:;&quot;&gt; &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt;&lt;/a&gt; : null}&lt;a class=&quot;navbar-item&quot; href={langUrl}&gt;{langTitle}&lt;/a&gt; Step 4: Build &amp; Push 中文及英文站點 由於執行的步驟有點多，所以撰寫了一隻可執行的script。在中文站點Hexo的根目錄下，建立build.sh，並將權限設定為可執行檔 cmd1nick@Nick-Lin:~/Blog$ chmod 777 build.sh build.sh的內容為 build.sh12345678910111213141516echo &quot;clean en blog...&quot;cd /home/nick/Blog/blog_enhexo cleanecho &quot;build en blog...&quot;hexo gecho &quot;clean zh-TW blog...&quot;/home/nick/Bloghexo cleanecho &quot;build zh-TW blog...&quot;hexo gecho &quot;move en blog to public...&quot;cp -r /home/nick/Blog/blog_en/public/. /home/nick/Blog/public/en/ 執行此script後，再執行hexo d即完成發布，就可實現多國語系的Blog了。 Reference Hexo添加多语言支持「国际化i18n」","link":"/2019/12/11/2019/2019_12_11-icarus-multi-language/"},{"title":"Android ImageView 透明背景","text":"針對ImageView的來源圖片為透明底色時, 需要將底色設定為透明.否則的話，會將底下的物件覆蓋住. 將ImageView背景設定為透明的方式有以下幾種 靜態設置 在xml中設定background顏色為 #00000000 activity.xml12345&lt;ImageView android:layout_width=&quot;218dp&quot; android:layout_height=&quot;247dp&quot; android:src=&quot;@drawable/test2&quot; android:background=&quot;#00000000&quot;/&gt; 亦可使用android color : transparent activity.xml12345&lt;ImageView android:layout_width=&quot;218dp&quot; android:layout_height=&quot;247dp&quot; android:src=&quot;@drawable/test2&quot; aandroid:background=&quot;@android:color/transparent&quot;/&gt; 動態設置 在程式中, 我們可以使用setBackgroundColor API 來設置 MainActivity.java12var imageView = findViewById&lt;ImageView&gt;(R.id.test1)imageView.setBackgroundColor(Color.parseColor(&quot;#00000000&quot;)) 或者使用Color.TRANSPARENT MainActivity.java12var imageView = findViewById&lt;ImageView&gt;(R.id.test1)imageView.setBackgroundColor(Color.TRANSPARENT) 執行結果","link":"/2019/12/26/2019/2019_12_26-imageview-transparent-background/"},{"title":"ActiveMQ MQTT Server 架設","text":"Android 開發上需要和MQTT Server做溝通，在此之前必須先架設MQTT Server來協助開發. 此篇主要在Window 10中使用Apache ActiveMQ來做架設 Step 1: 下載 ActiveMQ 下載位址 ActiveMQ 此例中使用ActiveMQ 5 Classic Step 2: 執行activemq 打開命令提示字元, 到apache-activemq-5.15.11/bin底下輸入activemq start Step 3: 開啟activemq首頁 cmd視窗中會告知Server的訊息 使用瀏覽器輸入 http://127.0.0.1:port/admin ，其中port為上圖中紅框所表示的數字 並輸入帳號/密碼 admin/admin 即可打開管理界面, 這也表示已架設好MQTT Server","link":"/2020/02/14/2020/2020_02_14-activemq/"},{"title":"Android MQTT Client","text":"在上篇『ActiveMQ MQTT Server 架設』中我們已架設好MQTT Server，此篇我們將在Android上建立MQTT Client與MQTT Server做溝通. 此篇使用org.eclipse.paho來架設MQTT Client Step 1: 引用org.eclipse.paho 在build.gradle中引用org.eclipse.paho build.gradle12345678910111213141516 android { ... } repositories { maven { url &quot;https://repo.eclipse.org/content/repositories/paho-snapshots/&quot; }}dependencies { ... implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.0' implementation 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'} Step 2: 建立MqttService 在AndroidManifest.xml中宣告權限及建立MqttService AndroidManifest.xml12345678&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot;/&gt; &lt;application&gt; &lt;service android:name=&quot;org.eclipse.paho.android.service.MqttService&quot;/&gt;&lt;/application&gt; Step 3: Implement MqttCallbackExtended MainActivity.kt12345678910111213141516171819private class MqttCallback : MqttCallbackExtended { override fun connectComplete(reconnect: Boolean, serverURI: String?) { Log.i(TAG, &quot;connect Complete&quot; + Thread.currentThread().id) } override fun messageArrived(topic: String?, message: MqttMessage?) { Log.i(TAG, &quot;topic: &quot; + topic + &quot; message: &quot;+ String(message!!.payload, Charset.forName(&quot;utf-8&quot;))) } override fun connectionLost(cause: Throwable?) { Log.i(TAG, &quot;connection Lost &quot;) } override fun deliveryComplete(token: IMqttDeliveryToken?) { Log.i(TAG, &quot;delivery Complete &quot;) } } 在這四個函式中，不可進行UI的操作。可使用Handler後再做UI的處理。 Step 4: 初始化MQTT Client MainActivity.kt12345678910private var mMqttClient: MqttAsyncClient? = nullprivate val host = &quot;tcp://192.168.0.98:1883&quot;private val mClientID = &quot;xx:xx:xx:xx:xx:xx&quot;...if (null == mMqttClient) { mMqttClient = MQTTUtils.initClient(host, mClientID, MqttCallback())} 我們使用一個公用object MQTTUtils 來處理初始化。 MQTTUtils.kt12345678910object MQTTUtils { fun initClient(serverURI: String, clientId: String, callback: MqttCallback) :MqttAsyncClient? { var client: MqttAsyncClient? = null var persistence = MemoryPersistence() client = MqttAsyncClient (serverURI, clientId, persistence) client.setCallback(callback) return client }} serverURI: MQTT Server網址clientId： 唯一識別碼，告知Broker知道是哪個Clientcallback: 回調函式 在上篇『ActiveMQ MQTT Server 架設』中，啟動Server時會得到Server的資訊，其中會有MQTT的資訊。 在此port為1883 在程式中MQTT Server的網址設定為 tcp://xxx.xxx.xxx.xxx:1883 Step 5: 設定連接參數 在MQTTUtils中設置連接參數 MQTTUtils.kt123456789101112131415object MQTTUtils { fun initMqttConnectionOptions(): MqttConnectOptions { var mOptions = MqttConnectOptions() mOptions.isAutomaticReconnect = false mOptions.isCleanSession = true mOptions.connectionTimeout = 10 mOptions.userName = &quot;admin&quot; mOptions.password = &quot;admin&quot;.toCharArray() mOptions.keepAliveInterval = 10 mOptions.maxInflight = 10 mOptions.mqttVersion = MqttConnectOptions.MQTT_VERSION_3_1_1 return mOptions }} 參數說明isAutomaticReconnect: 連接中斷時，是否會自動連接isCleanSession： 若斷開連線時是否清除連接資訊connectionTimeout: 連線逾時時間，以秒為單位userName：帳號password: 密碼keepAliveInterval: Heartbeat，每隔幾秒會再度確認是否連線maxInflight: 允許同時發送幾條訊息mqttVersion: MQTT 版本 Step 6: 與MQTT Server連線 MainActivity.kt12345678910111213141516private val mTopicID = &quot;topic1&quot;var options = MQTTUtils.initMqttConnectionOptions()mMqttClient!!.connect(options, null, object : IMqttActionListener { override fun onSuccess(asyncActionToken: IMqttToken) { mMqttClient!!.subscribe(mTopicID, 1) } override fun onFailure(asyncActionToken: IMqttToken, exception: Throwable) { } }) 連線成功後，傳送溝通的Topic: mTopicID 執行結果 連接上後，透過ActiveMQ的管理界面，可看到Topics有剛剛所設定的mTopicID: topic1。 透過此Topic 可與MQTT Client做溝通。 Source Code MainActivity.kt12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273class MainActivity : AppCompatActivity(), View.OnClickListener { private val host = &quot;tcp://xxx.xxx.xxx.xxx:1883&quot; private val mClientID = &quot;xx:xx:xx:xx:xx:xx&quot; private val mTopicID = &quot;topic1&quot; private var mMqttClient: MqttAsyncClient? = null override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) var btConnect = findViewById&lt;Button&gt;(R.id.bt_connect) btConnect.setOnClickListener(this) } override fun onDestroy() { super.onDestroy() if (null != mMqttClient) { mMqttClient!!.disconnect() } } private fun connect() { Thread(Runnable { try { if (null == mMqttClient) { mMqttClient = MQTTUtils.initClient(host, mClientID, MqttCallback()) } var options = MQTTUtils.initMqttConnectionOptions() mMqttClient!!.connect(options, null, object : IMqttActionListener { override fun onSuccess(asyncActionToken: IMqttToken) { mMqttClient!!.subscribe(mTopicID, 1) } override fun onFailure(asyncActionToken: IMqttToken, exception: Throwable) { } }) } catch (e: Exception) { e.printStackTrace() } }).start() } private class MqttCallback : MqttCallbackExtended{ val TAG = &quot;MqttCallback&quot; override fun connectComplete(reconnect: Boolean, serverURI: String?) { Log.i(TAG, &quot;connect Complete&quot; + Thread.currentThread().id) } override fun messageArrived(topic: String?, message: MqttMessage?) { Log.i(TAG, &quot;topic: &quot; + topic + &quot; message: &quot;+ String(message!!.payload, Charset.forName(&quot;utf-8&quot;))) } override fun connectionLost(cause: Throwable?) { Log.i(TAG, &quot;connection Lost &quot;) } override fun deliveryComplete(token: IMqttDeliveryToken?) { Log.i(TAG, &quot;delivery Complete &quot;) } } override fun onClick(v: View?) { when(v!!.id) { R.id.bt_connect -&gt; connect() } }} MQTTUtils.kt1234567891011121314151617181920212223object MQTTUtils { fun initMqttConnectionOptions(): MqttConnectOptions { var mOptions = MqttConnectOptions() mOptions.isAutomaticReconnect = false mOptions.isCleanSession = true mOptions.connectionTimeout = 10 mOptions.userName = &quot;admin&quot; mOptions.password = &quot;admin&quot;.toCharArray() mOptions.keepAliveInterval = 10 mOptions.maxInflight = 10 mOptions.mqttVersion = MqttConnectOptions.MQTT_VERSION_3_1_1 return mOptions } fun initClient(serverURI: String, clientId: String, callback: MqttCallback) :MqttAsyncClient? { var client: MqttAsyncClient? = null var persistence = MemoryPersistence() client = MqttAsyncClient (serverURI, clientId, persistence) client.setCallback(callback) return client }}","link":"/2020/02/14/2020/2020_02_14-android_mqtt_client/"},{"title":"Android App Sign key","text":"針對需要具有系統權限的app，可以使用以下兩種方式來達成。 編譯後再使用signapk.jar來sign key編譯時sign key 編譯後再使用signapk.jar來sign key Step 1: 下載signapk.jar 下載位址signapk.jar Step 2: 使用signapk.jar 指令如下 cmd12java -jar signapk.jar platform.x509.pem platform.pk8 unsign.apk signed.apk 編譯時sign key 首先我們必須先將platform.x509.pem和platform.pk8轉成編譯時所使用的keystore 文件 Step 1: 下載keytool-importkeypair 下載位址keytool-importkeypair Step 2: 產生keystore 文件 將platform.x509.pem和platform.pk8放到keytool-importkeypair的目錄下 輸入指令 cmd12./keytool-importkeypair -k ./release.keystore -p you_password -pk8 platform.pk8 -cert platform.x509.pem -alias your_alias -k : keystore 文件的名稱-p : keystore 的密碼-pk8 : 導入的 platform.pk8 文件-cert : 導入的platform.x509.pem-alias : release.keystore 的名稱 Step 3: Sign key 我們可透過AndroidStudio中的 Build -&gt; Generated Signed Bundle/Apk來sign key或者寫入build.gradle中來自動sign key. build.gradle123456789101112android { ... signingConfigs { releaseconfig { keyAlias 'your_alias' keyPassword 'you_password' storeFile file('your_keystore_path') storePassword 'you_password' } }}","link":"/2020/02/14/2020/2020_02_14-apk-sign-key/"},{"title":"Ethernet Adapter Chipset","text":"最近開發的產品中，需透過USB轉Ethernet來連接網路，但底層只燒錄AX88772B chipset的Driver。 本篇說明如何確認手邊的Ethernet Adapter支援哪種Driver。 使用Ubuntu電腦，打開終端機並輸入指令dmesg cmd12nick:~$ dmesg Esense RJU166 資訊如下 可看到晶片組為ASIX AX88772與製造商為ASIX Elec. Corp. ASUS USB Ethernet Cable 資訊如下 晶片組為Realtek r8152與製造商為Realtek ACER USB Ethernet Cable 資訊如下 晶片組為ASIX AX88772B與製造商為ASIX Elec. Corp.","link":"/2020/02/27/2020/2020_02_27-ethernet_chipset/"},{"title":"Android Hide Navigation Bar","text":"根據 Android官方文件可在程式中隱藏Navigation Bar MainActivity.kt1234window.decorView.apply { systemUiVisibility = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or View.SYSTEM_UI_FLAG_FULLSCREEN} 但使用滑鼠點擊後，會顯示Navigation Bar，必須再呼叫此函式再將Navigation Bar隱藏起來即可。 何時觸發便是本篇所要談論的重點 我們先將之前Hide Navigation Bar的程式碼寫成函式：hideNavigationBar()。 MainActivity.kt123456private fun hideNavigationBar() { window.decorView.apply { systemUiVisibility = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or View.SYSTEM_UI_FLAG_FULLSCREEN } } 利用偵測螢幕大小的變化，當作觸發的時機。 MainActivity.kt1234567891011override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) var relativeLayout = findViewById&lt;RelativeLayout&gt;(R.id.main_view) relativeLayout.addOnLayoutChangeListener( View.OnLayoutChangeListener { v, left, top, right, bottom, oldLeft, oldTop, oldRight, oldBottom -&gt; }) } 但由於OnLayoutChangeListener為Callback函式，處理UI變化時，不可在函式中處理。 所以我們必須創建一個Handler來呼叫hideNavigationBar函式 Source Code MainActivity.kt12345678910111213141516171819202122232425262728293031323334353637383940 class MainActivity : AppCompatActivity() { private var mUiHandler : UiHandler? = null private val HANDLER_HIDE_NAVIGATION_BAR = 1 override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) mUiHandler = UiHandler(this) var relativeLayout = findViewById&lt;RelativeLayout&gt;(R.id.main_view) relativeLayout.addOnLayoutChangeListener( View.OnLayoutChangeListener { v, left, top, right, bottom, oldLeft, oldTop, oldRight, oldBottom -&gt; if (bottom &lt; oldBottom){ mUiHandler!!.sendEmptyMessageDelayed( HANDLER_HIDE_NAVIGATION_BAR, 3000) } }) hideNavigationBar() } private fun hideNavigationBar() { window.decorView.apply { systemUiVisibility = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or View.SYSTEM_UI_FLAG_FULLSCREEN } } private inner class UiHandler(obj: MainActivity) : Handler() { private val mObj: WeakReference&lt;MainActivity&gt; = WeakReference(obj) override fun handleMessage(msg: Message) { super.handleMessage(msg) when(msg.what) { HANDLER_HIDE_NAVIGATION_BAR -&gt; { hideNavigationBar() } } } }} activity_main.xml1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/main_view&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/test&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; android:text=&quot;Hello World!&quot; /&gt;&lt;/RelativeLayout&gt;","link":"/2020/03/02/2020/2020_03_02-hide_navigation_bar/"},{"title":"Android Change Resolution","text":"在Android系統中，我們可以通過編譯系統檔案來更改Resolution。 必須具有root權限，才能編譯系統檔案。 先取得root權限並remount後，使用adb shell進入Android系統中。 cmd1234adb rootadb remountadb shell Adb 修改方式 Step 1: 更改解析度 1080p cmd12echo 1080p60hz &gt; /sys/class/display/mode 720p cmd12echo 720p60hz &gt; /sys/class/display/mode Step 2: 更改視窗大小 當我們執行完步驟一後，會發現畫面會錯亂或是沒有被縮放。以下為由720p更改為1080p的結果。 原因是因為視窗大小沒有被改變的原因。 更改視窗大小1080p cmd12echo 0 0 1919 1079 &gt; /sys/class/graphics/fb0/window_axis 720p cmd12echo 0 0 1279 719 &gt; /sys/class/graphics/fb0/window_axis Step 3: 更改控制範圍 步驟二執行完畢後，發現畫面有正常顯示了，但是滑鼠的移動範圍依舊為1280x720的位置，而無法正常的移到最下方或最右方。 因此我們必須調整控制範圍。1080p cmd12echo 1920 1080 1920 1080 &gt; /sys/class/graphics/fb1/scale_axis 720p cmd12echo 1920 1080 1280 720 &gt; /sys/class/graphics/fb1/scale_axis 以上為使用adb shell進入Android系統來更改Resolution的方式。 程式修改方式 在程式中修改的方式如下: 首先必須先確認Android 系統的su指令位於何處，可能在/system/xbin中或/system/bin中。 使用ProcessBuilder.command的方式來執行。 720p 12345678910111213private void change720p() { try { ProcessBuilder pb = new ProcessBuilder(); pb.command(&quot;/system/xbin/su&quot;, &quot;-c&quot;, &quot;echo 720p60hz &gt; /sys/class/display/mode&quot;).start().waitFor(); pb.command(&quot;/system/xbin/su&quot;, &quot;-c&quot;, &quot;echo 0 0 1279 719 &gt; /sys/class/graphics/fb0/window_axis&quot;).start().waitFor(); pb.command(&quot;/system/xbin/su&quot;, &quot;-c&quot;, &quot;echo 1920 1080 1280 720 &gt; /sys/class/graphics/fb1/scale_axis&quot;).start().waitFor(); } catch (IOException e) { e.printStackTrace(); } catch (InterruptedException e) { e.printStackTrace(); } } 1080p 12345678910111213private void change1080p() { try { ProcessBuilder pb = new ProcessBuilder(); pb.command(&quot;/system/xbin/su&quot;, &quot;-c&quot;, &quot;echo 1080p60hz &gt; /sys/class/display/mode&quot;).start().waitFor(); pb.command(&quot;/system/xbin/su&quot;, &quot;-c&quot;, &quot;echo 0 0 1919 1079 &gt; /sys/class/graphics/fb0/window_axis&quot;).start().waitFor(); pb.command(&quot;/system/xbin/su&quot;, &quot;-c&quot;, &quot;echo 1920 1080 1920 1080 &gt; /sys/class/graphics/fb1/scale_axis&quot;).start().waitFor(); } catch (IOException e) { e.printStackTrace(); } catch (InterruptedException e) { e.printStackTrace(); } }","link":"/2020/03/09/2020/2020_03_09-change_resolution/"},{"title":"Android 播放 Gif 檔","text":"Android 要在app上播放gif的方式有很多種, 可以使用ImageView輪撥, WebView來播放等等。在網路上收尋到第三方Library : GifImageView搭配Glide來播放gif檔。Android上的Glide主要是處理圖片與影片的技術，讓原本的加載流程更加順暢。 Step 1: 引用Library 在app的build.gradle中引用 pl.droidsonroids.gif:android-gif-drawable:1.1.17 build.gradle12345dependencies { ... implementation 'pl.droidsonroids.gif:android-gif-drawable:1.1.17'} Step 2: 使用GifImageView GifImageView繼承ImageView，使用方式與一般使用ImageView一樣。 在xml檔案中使用pl.droidsonroids.gif.GifImageView即可。 activity_main.xml1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;pl.droidsonroids.gif.GifImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; android:src=&quot;@drawable/gif_image_view&quot; /&gt;&lt;/RelativeLayout&gt; 執行結果","link":"/2020/03/18/2020/2020_03_18-gif_imageview/"},{"title":"Android Google TTS","text":"Google TTS相對於其他TTS的使用方式來講非常的容易上手，網路上也有很多教學文章可參考。 但由於開發所使用的機器Android版本較舊，只有早期的Pico TTS可以使用，必須上網下載Google TTS apk才能使用Google文字轉語音引擎。 下載並安裝好Google TTS後，遇到以下幾種問題及解決方式。 只有出現Pico TTS，無顯示Google TTS 進入[設定 -&gt; 語言與輸入設定 -&gt; 文字轉語音輸出] 發現只有出現Pico TTS卻沒有Google文字轉語音引擎。 遇到此問題時，必須先將Pico TTS停用。 從[設定-&gt;應用程式]中選擇Pico TTS後，選擇停用。 再度進入文字轉語音輸出中就可以看到Google文字轉語音引擎。 無法進入文字轉語音輸出 由於客製化的設備中，將語言與輸入設定隱藏起來。 經由Log trace後，此設定頁面為TextToSpeechSettings，它是一個Fragment，由Settings app中的SubSetting所使用。 我們可以透過adb 來launch此Fragment，網路上搜尋到的方式為： cmd12adb shell am start -n com.android.settings/com.android.settings.SubSettings -e :android:show_fragment com.android.settings.tts.TextToSpeechSettings 但此方式喚起後會Crash: NullPointerException，改用以下的方式才能成功喚起此Fragment。 cmd12adb shell am start -n com.android.settings/com.android.settings.SubSettings -e :settings:show_fragment com.android.settings.tts.TextToSpeechSettings 執行結果 成功喚起後，可透過Google文字轉語音引擎，將語音設定為 中文(台灣)的模式。 本篇使用android.speech.tts.TextToSpeech package來實做TTS。 Step 1: 初始化TTS 初始化時設定初始化Listener : TextToSpeech.OnInitListener ，初始化完成會由onInit 函數返回結果。 MainActivity12345678910111213141516171819202122232425public class MainActivity extends AppCompatActivity implements TextToSpeech.OnInitListener { private TextToSpeech mTextToSpeech; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mTextToSpeech = new TextToSpeech(this.getApplicationContext(), this); } @Override protected void onDestroy() { if (mTextToSpeech != null) { mTextToSpeech.shutdown(); } super.onDestroy(); } @Override public void onInit(int status) { Log.e(&quot;MainActivity&quot;, &quot;onInit : &quot; + status); }} Step 2: 設定語系 初始化成功後，可設定語系並檢測是否支援此語系。 MainActivity123456789101112@Overridepublic void onInit(int status) { Log.e(&quot;Nick Main&quot;, &quot;onInit : &quot; + status); if (status == TextToSpeech.SUCCESS) { int result = mTextToSpeech.setLanguage(Locale.TRADITIONAL_CHINESE); if (result != TextToSpeech.LANG_COUNTRY_AVAILABLE &amp;&amp; result != TextToSpeech.LANG_AVAILABLE){ Log.e(&quot;MainActivity&quot;, &quot;TTS 不支持此語言！&quot;); } }} Step 3: 監聽TTS進度 當開始讀出語音時，我們可能需要在開始朗讀或結束朗讀時，執行一些動作。所以必須使用UtteranceProgressListener來監聽進度。 可在初始化成功時，設置監聽。 MainActivity123456789101112131415161718192021222324252627@Overridepublic void onInit(int status) { Log.e(&quot;Nick Main&quot;, &quot;onInit : &quot; + status); if (status == TextToSpeech.SUCCESS) { mTextToSpeech.setOnUtteranceProgressListener(new UtteranceProgressListener() { @Override public void onStart(String s) { Log.e(&quot;MainActivity&quot;, &quot;onStart: &quot; + s); } @Override public void onDone(String s) { Log.e(&quot;MainActivity&quot;, &quot;onDone: &quot; + s); } @Override public void onError(String s) { Log.e(&quot;MainActivity&quot;, &quot;onError: &quot; + s); } }); int result = mTextToSpeech.setLanguage(Locale.TRADITIONAL_CHINESE); if (result != TextToSpeech.LANG_COUNTRY_AVAILABLE &amp;&amp; result != TextToSpeech.LANG_AVAILABLE){ Log.e(&quot;MainActivity&quot;, &quot;TTS 不支持此語言！&quot;); } }} 使用 mTextToSpeech.speak(“測試Google中文語音”, TextToSpeech.QUEUE_ADD, null); 執行時文字有讀出聲音，但是Callback函式都沒有收到訊息，原因是因為沒有設定utteranceId，所以TTS library不知該返回給誰。 Step 4: 設定utteranceId 在呼叫speak API時必須傳入utteranceId，使用Random來產生一組utteranceId。 MainActivity123456789Random random = new Random();random.setSeed(Calendar.getInstance().getTimeInMillis());HashMap&lt;String, String&gt; myHashAlarm = new HashMap&lt;String, String&gt;();myHashAlarm.put(TextToSpeech.Engine.KEY_PARAM_STREAM, String.valueOf(AudioManager.STREAM_ALARM));myHashAlarm.put(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID, String.valueOf(random.nextInt()));int result = mTextToSpeech.speak(&quot;測試Google中文語音&quot;, TextToSpeech.QUEUE_ADD, myHashAlarm); 執行後就會在UtteranceProgressListener中的onStart與onDone中，看見返回結果。","link":"/2020/03/20/2020/2020_03_20-google_tts/"},{"title":"Android 自動填入 Autofill Framework","text":"Android 8 (Oreo, SDK 26)增加了自動填入的框架，使我們在填寫表單時更快速較不易出錯。 本篇中使用基礎元件(EditText, SharedPreferences)，來完成自動填入的功能。 Step 1: 畫面布局 在主畫面中，我們只使用了一個EditText來實做。 activity_main.xml123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;EditText android:id=&quot;@+id/editText&quot; android:layout_width=&quot;348dp&quot; android:layout_height=&quot;79dp&quot; android:ems=&quot;10&quot; android:inputType=&quot;textPersonName&quot; android:text=&quot;Name&quot; android:autofillHints=&quot;user_name&quot; android:importantForAutofill=&quot;yes&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintEnd_toEndOf=&quot;parent&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt; 值得注意的是android:autofillHints, android:importantForAutofill這兩個屬性。 android:autofillHint: 註明autofill的tag，tag內容可以自己定義，也可以使用Android 官方文件HintConstants所定義的tag, 共有38個種類。 android:importantForAutofill : 自動填入服務 此屬性內容值說明如下 IMPORTANT_FOR_AUTOFILL_AUTO 預設值, 由系統決定是否使用自動填入 IMPORTANT_FOR_AUTOFILL_NO 不使用自動填入,但是子view可以使用 IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS 不使用自動填入,子view也不使用 IMPORTANT_FOR_AUTOFILL_YES 使用自動填入,包括子view IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS 使用自動填入,但子view不使用 Step 2: 創建AutofillService 新增class MyAutofillService繼承AutofillService，並實現兩個函式onFillRequest及onSaveRequest onFillRequest為執行自動填入時所呼叫的函式，在此文章中會介紹當執行自動填入時，顯示視窗讓使用者選擇填入的值。 onSaveRequest為保存自動填入的內容值所呼叫。 MyAutofillService.java123456789101112131415public class MyAutofillService extends AutofillService { private String TAG = &quot;Nick AutofillService&quot;; //執行自動填入 @Override public void onFillRequest(@NonNull FillRequest request, @NonNull CancellationSignal cancellationSignal, @NonNull FillCallback fillCallback) { Log.e(TAG, &quot;onFillRequest&quot;); } //保存自動填入的值 @Override public void onSaveRequest(@NonNull SaveRequest request, @NonNull SaveCallback callback) { }} 在AndroidManifest.xml中宣告此Service AndroidManifest.xml123456789101112131415161718192021&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.nickthomas55.autofill.test&quot;&gt; &lt;application ... &gt; &lt;activity android:name=&quot;.MainActivity&quot;&gt; ... &lt;/activity&gt; &lt;service android:name=&quot;.MyAutofillService&quot; android:label=&quot;Autofill Service Test&quot; android:permission=&quot;android.permission.BIND_AUTOFILL_SERVICE&quot;&gt; &lt;meta-data android:name=&quot;android.autofill&quot; android:resource=&quot;@xml/autofill_filler&quot;/&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.service.autofill.AutofillService&quot;/&gt; &lt;/intent-filter&gt; &lt;/service&gt; &lt;/application&gt;&lt;/manifest&gt; 在使用自動填入服務之前，我們必須先開啟自動填入服務的功能。從[設定-&gt;系統-&gt;語言與輸入設定-&gt;進階-&gt;自動填入服務] 在此頁面中可看見我們在AndroidManifest.xml中所定義的android:label名稱，選取此服務為自動填入服務。 在Project res資料夾中新增xml 資料夾，並在此資料夾中新增autofill_filler.xml內容如下 autofill_filler.xml1234&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;autofill-service xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:settingsActivity=&quot;[your package name].MainActivity&quot;/&gt; Step 3: 初始化 當程式一開始時, 我們先在SharedPreferences中加入自動填入的內容。宣告AutofillManager和AutofillCallback，在onResume與onPause註冊與解註冊callback。 MainActivity.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class MainActivity extends AppCompatActivity { private AutofillManager mAutofillManager; private MyAutofillCallback mAutofillCallback; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); init(); mAutofillManager = this.getSystemService(AutofillManager.class); mAutofillCallback = new MyAutofillCallback(); } @Override protected void onResume() { super.onResume(); mAutofillManager.registerCallback(mAutofillCallback); } @Override protected void onPause() { super.onPause(); mAutofillManager.unregisterCallback(mAutofillCallback); } private void init() { SharedPreferences.Editor editor = getSharedPreferences(&quot;People_Info&quot;, MODE_PRIVATE).edit(); editor.putString(&quot;user_name&quot;, &quot;nick&quot;); editor.commit(); } private class MyAutofillCallback extends AutofillManager.AutofillCallback { @Override public void onAutofillEvent(@NonNull View view, int event) { super.onAutofillEvent(view, event); } @Override public void onAutofillEvent(@NonNull View view, int virtualId, int event) { super.onAutofillEvent(view, virtualId, event); } }} Step 4: 取得自動填入的元件 在執行自動填入和保存自動填入資料時，我們必須先取得自動填入的元件。 MyAutofillService.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354 public class MyAutofillService extends AutofillService { private String TAG = &quot;Nick AutofillService&quot;; //執行自動填入 @Override public void onFillRequest(@NonNull FillRequest request, @NonNull CancellationSignal cancellationSignal, @NonNull FillCallback fillCallback) { Log.e(TAG, &quot;onFillRequest&quot;); //取得畫面中所有元件 List&lt;FillContext&gt; context = request.getFillContexts(); AssistStructure structure = context.get(context.size() - 1).getStructure(); //在所有元件中, 收集需要自動填入的元件 List&lt;AssistStructure.ViewNode&gt; fields = new ArrayList&lt;&gt;(); traverseStructure(structure, fields); } //保存自動填入的值 @Override public void onSaveRequest(@NonNull SaveRequest request, @NonNull SaveCallback callback) { Log.e(TAG, &quot;onSaveRequest&quot;); //取得畫面中所有元件 List&lt;FillContext&gt; context = request.getFillContexts(); AssistStructure structure = context.get(context.size() - 1).getStructure(); //在所有元件中, 收集自動填入的元件 List&lt;AssistStructure.ViewNode&gt; fields = new ArrayList&lt;&gt;(); traverseStructure(structure, fields); } //掃描畫面上所有元件 private void traverseStructure(AssistStructure structure, List&lt;AssistStructure.ViewNode&gt; fields) { int nodes = structure.getWindowNodeCount(); for (int i = 0; i &lt; nodes; i++) { AssistStructure.WindowNode windowNode = structure.getWindowNodeAt(i); AssistStructure.ViewNode viewNode = windowNode.getRootViewNode(); traverseNode(viewNode, fields); } } //收集自動填入的元件 private void traverseNode(AssistStructure.ViewNode viewNode, List&lt;AssistStructure.ViewNode&gt; fields) { if (viewNode == null || viewNode.getClassName() == null) return; if (viewNode.getAutofillHints() != null &amp;&amp; viewNode.getAutofillHints().length &gt; 0) { fields.add(viewNode); } for (int i = 0; i &lt; viewNode.getChildCount(); i++) { AssistStructure.ViewNode childNode = viewNode.getChildAt(i); traverseNode(childNode, fields); } }} 從SharedPreferences, DB, 或文件中取得自動填入的資料內容 MyAutofillService.java123 SharedPreferences sharedPreferences = getSharedPreferences(&quot;People_Info&quot;, MODE_PRIVATE);String userName = sharedPreferences.getString(&quot;user_name&quot;, &quot;&quot;); 設定一個浮動視窗來顯示資料內容 MyAutofillService.java1234RemoteViews afRemoteView = new RemoteViews(getPackageName(), R.layout.user_suggestion);afRemoteView.setTextViewText(R.id.user_suggestion_item, userName);afRemoteView.setImageViewResource(R.id.icon, R.mipmap.ic_launcher_round); user_suggestion_item.xml 畫面設定如下 user_suggestion_item.xml1234567891011121314151617181920212223 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;horizontal&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;TextView android:id=&quot;@+id/user_suggestion_item&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:padding=&quot;5dp&quot; android:textSize=&quot;18sp&quot; android:textStyle=&quot;bold&quot;/&gt; &lt;ImageView android:id=&quot;@+id/icon&quot; android:layout_gravity=&quot;center&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginEnd=&quot;?android:attr/listPreferredItemPaddingEnd&quot; android:layout_width=&quot;wrap_content&quot; android:src=&quot;@drawable/people&quot; /&gt;&lt;/LinearLayout&gt; 將浮動視窗和自動填入元件做Mapping MyAutofillService.java123456//設定元件的顯示視窗AssistStructure.ViewNode userField = fields.get(0);Dataset primaryEmailDataSet = new Dataset.Builder(afRemoteView) .setValue(userField.getAutofillId(), AutofillValue.forText(userName)) .build(); 封裝返回數據並通知自動填入框架 MyAutofillService.java1234567//封裝數據FillResponse response = new FillResponse.Builder() .addDataset(primaryEmailDataSet) .build();//通知自動填入的框架fillCallback.onSuccess(response); Source Code MainActivity.java請參考上面內容，以下為MyAutofillService.java完整內容。 MyAutofillService.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576 public class MyAutofillService extends AutofillService { private String TAG = &quot;Nick AutofillService&quot;; //執行自動填入 @Override public void onFillRequest(@NonNull FillRequest request, @NonNull CancellationSignal cancellationSignal, @NonNull FillCallback fillCallback) { Log.e(TAG, &quot;onFillRequest&quot;); //取得畫面中所有元件 List&lt;FillContext&gt; context = request.getFillContexts(); AssistStructure structure = context.get(context.size() - 1).getStructure(); //在所有元件中, 收集需要自動填入的元件 List&lt;AssistStructure.ViewNode&gt; fields = new ArrayList&lt;&gt;(); traverseStructure(structure, fields); //設定要自動填入的資料內容, 從SharedPreferences, DB, 文件中取得資料內容 SharedPreferences sharedPreferences = getSharedPreferences(&quot;People_Info&quot;, MODE_PRIVATE); String userName = sharedPreferences.getString(&quot;user_name&quot;, &quot;&quot;); //用於顯示內容的視窗 RemoteViews afRemoteView = new RemoteViews(getPackageName(), R.layout.user_suggestion); afRemoteView.setTextViewText(R.id.user_suggestion_item, userName); afRemoteView.setImageViewResource(R.id.icon, R.mipmap.ic_launcher_round); //設定元件的顯示視窗 AssistStructure.ViewNode userField = fields.get(0); Dataset primaryEmailDataSet = new Dataset.Builder(afRemoteView) .setValue(userField.getAutofillId(), AutofillValue.forText(userName) ).build(); //封裝數據 FillResponse response = new FillResponse.Builder() .addDataset(primaryEmailDataSet) .build(); //通知自動填入的框架 fillCallback.onSuccess(response); } //保存自動填入的值 @Override public void onSaveRequest(@NonNull SaveRequest request, @NonNull SaveCallback callback) { Log.e(TAG, &quot;onSaveRequest&quot;); //取得畫面中所有元件 List&lt;FillContext&gt; context = request.getFillContexts(); AssistStructure structure = context.get(context.size() - 1).getStructure(); //在所有元件中, 收集自動填入的元件 List&lt;AssistStructure.ViewNode&gt; fields = new ArrayList&lt;&gt;(); traverseStructure(structure, fields); //保存於SharedPreferences, DB, 文件中 callback.onSuccess(); } private void traverseStructure(AssistStructure structure, List&lt;AssistStructure.ViewNode&gt; fields) { int nodes = structure.getWindowNodeCount(); for (int i = 0; i &lt; nodes; i++) { AssistStructure.WindowNode windowNode = structure.getWindowNodeAt(i); AssistStructure.ViewNode viewNode = windowNode.getRootViewNode(); traverseNode(viewNode, fields); } } private void traverseNode(AssistStructure.ViewNode viewNode, List&lt;AssistStructure.ViewNode&gt; fields) { if (viewNode == null || viewNode.getClassName() == null) return; if (viewNode.getAutofillHints() != null &amp;&amp; viewNode.getAutofillHints().length &gt; 0) { fields.add(viewNode); } for (int i = 0; i &lt; viewNode.getChildCount(); i++) { AssistStructure.ViewNode childNode = viewNode.getChildAt(i); traverseNode(childNode, fields); } }} 執行結果","link":"/2020/05/21/2020/2020_05_21-autofill/"},{"title":"Android AutoSize TextView","text":"當一個元件所顯示的內容過長時，可能會顯得不完整。在Android 8 (Oreo, SDK 26)增加了自動調整字體大小，讓TextView文字大小自動擴展或收縮，使得輸入時可以看到完整內容。 Step 1: 畫面布局 首先我們先設定一個輸入框及所要顯示的內容，並且限制TextView的大小為100dp並且使用單行顯示。 activity_main.xml1234567891011121314151617181920212223242526272829303132333435&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#FF97BFFF&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/textView&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;88dp&quot; android:text=&quot;Hello&quot; android:textSize=&quot;18sp&quot; android:maxLines=&quot;1&quot; app:layout_constraintEnd_toEndOf=&quot;parent&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt; &lt;EditText android:id=&quot;@+id/editText&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;28dp&quot; android:ems=&quot;10&quot; android:hint=&quot;Enter...&quot; android:inputType=&quot;textPersonName&quot; app:layout_constraintEnd_toEndOf=&quot;parent&quot; app:layout_constraintHorizontal_bias=&quot;0.537&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/textView&quot; /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt; 在Android 8之前，如果我們輸入的文字超過此TextView的寬度時，會無法顯示完整內容。 Step 2: 設定AutoSize 在TextView的元件上增加android:autoSizeTextType=”uniform”， autoSizeTextType有兩種參數可設定，預設值為 none。 AUTO_SIZE_TEXT_TYPE_NONE (none)：關閉自動調整功能。AUTO_SIZE_TEXT_TYPE_UNIFORM (uniform)：開啟自動調整功能。 activity_main.xml12345678910111213&lt;TextView android:id=&quot;@+id/textView&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;88dp&quot; android:text=&quot;Hello&quot; android:textSize=&quot;18sp&quot; android:maxLines=&quot;1&quot; android:autoSizeTextType=&quot;uniform&quot; app:layout_constraintEnd_toEndOf=&quot;parent&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt; 執行結果 當輸入文字超過顯示框時，會自動調整字體大小","link":"/2020/06/15/2020/2020_06_15-autosize_textview/"},{"title":"Xcode - 發佈遇到IPA processing failed","text":"發布應用程式時，遇到 IPA processing failed 解決方式 Step 1: open Finder–&gt; Application (應用程式) Step 2: 在 Xcode右鍵選擇—-&gt; 取得資訊 Step 3: 勾選use Rosetta 再重新發布一次即可．","link":"/2021/03/05/2021/2021_03_05-ipa_process_failed/"},{"title":"iOS 輸入框-提示文字","text":"在 iOS 6+ 以上，針對輸入框提供了attributedPlaceholder來設置提示文字的顏色． 使用方式UITextField *nameTextUIColor *color = [UIColor grayColor]; nameText.attributedPlaceholder = [[NSAttributedString alloc] initWithString:@”Full Name” attributes:@{NSForegroundColorAttributeName:color}];","link":"/2021/03/09/2021/2021_03_09-edittext_hint_color/"},{"title":"SwiftUI 物件階層","text":"設計App時，除了空件的位置之外，階層也是很重要的一環，它將決定A元件覆蓋B元件，還是被B元件所覆蓋． 在SwiftUI中主要有ZStack, Overlay 和 Background三種技術可以調整階層． ZStack ZStack和其他stack元件一樣，可在{ }中設定物件排列的順序，和HStack, VStack不一樣的是，ZStack是可以在三維空間中疊加的． { }中的元件，後面的元件會覆蓋於前一個元件． 以下例來說，會先加入一個Image後，Text會覆蓋在Image的上方． ContentView.swift12345678struct ContentView: View { var body: some View { ZStack { Image(&quot;testImage&quot;) Text(&quot;Hello, world!&quot;) } }} alignment ZStack 預設為將元件全部置中，但可以透過alignment參數控制對其的方式． 以alignment: .buttom為例，將圖片與文字對齊底部． ContentView.swift12345678struct ContentView: View { var body: some View { ZStack(alignment: .bottom) { Image(&quot;testImage&quot;) Text(&quot;Curry&quot;) } }} padding &amp; offset 我們也可以利用padding 和 offset來調整ZStack元件之間的間距． ContentView.swift12345678struct ContentView: View { var body: some View { ZStack(alignment: .bottom) { Image(&quot;testImage&quot;).padding(.bottom, 20) Text(&quot;Curry&quot;).offset(x: -80, y: 0) } }} Overlay 如果不使用ZStack，我們也可以使用Overlay的方式達到此效果． Overlay的作用是將物件疊加在自己身上． ContentView.swift12345struct ContentView: View { var body: some View { Image(&quot;testImage&quot;).overlay(Text(&quot;Curry&quot;)) }} 效果和第一張圖一樣，預設會將物件對齊於中間． 也可透過alignment的屬性來設置對齊方式． ContentView.swift12345struct ContentView: View { var body: some View { Image(&quot;testImage&quot;).overlay(Text(&quot;Curry&quot;), alignment: .bottom) }} 結合padding &amp; offset達到其第三圖的效果． ContentView.swift12345678struct ContentView: View { var body: some View { Image(&quot;testImage&quot;) .padding(.bottom, 20) .overlay(Text(&quot;Curry&quot;).offset(x: -80, y: 0), alignment: .bottom) }} Overlay可將多個物件疊加在自己身上，以下例來說，再多疊加一個 Image物件在上面．此Image物件會在Text的上方，如果設計不好的話，會造成文字被圖片所擋住． ContentView.swift123456789struct ContentView: View { var body: some View { Image(&quot;testImage&quot;) .padding(.bottom, 20) .overlay(Text(&quot;Curry&quot;).offset(x: -80, y: 0), alignment: .bottom) .overlay(Image(&quot;basketball&quot;).resizable() .frame(width: 72.0, height: 72.0).offset(x: -10, y: 90)) }} Background Bakground和Overlay為相反疊加順序，Overlay是將物件疊加在自己身上，而Background是將自己疊加在物件身上． ContentView.swift123456struct ContentView: View { var body: some View { Image(&quot;testImage&quot;).resizable().frame(width: 150, height: 250, alignment: .center).offset(x: 20, y: 0) .background( Image(&quot;curryBrand&quot;)) }} Background也可以透過設定padding &amp; Offset的方式調整內部物件的位置．","link":"/2021/03/25/2021/2021_03_25-object_z_order/"},{"title":"SwiftUI 背景如何渲染於Status Bar底下","text":"在 WWDC 2019 大會上，Apple 發佈了全新的框架SwiftUI，讓你用更少的程式碼來設計及開發iOS App． 以往Swift的底層依舊是Object C，而SwiftUI已將底層全面換成Swift語法． Swift: UIKit通常需要搭配storyboards一起使用，而SwitfUI完全使用程式碼來建構，並且可搭配Automatic Preview來即時預覽畫面． 設計App時，通常會設定自己的背景圖片，接下來我們來看如何設定 Step 1: 建立Image Set 在左邊目錄中選取 Assets.xcassets後，在右邊選項中按右鍵，新增ImageSet (在此以loginBackground為例)並將圖片拖曳至虛線框中． Step 2: 新增Background 回到主頁面中，使用ZStack設定背景圖和文字． Image中填入剛剛所設定的ImageSet的名稱． ContentView.swift123456789struct ContentView: View { var body: some View { ZStack { Image(&quot;loginBackground&quot;).resizable() Text(&quot;Hello, world!&quot;) .padding() } }} 會發現Status Bar的部分，還是預設的白色，並沒有被藍色背景所涵蓋． Step 3: 屬性 : edgesIgnoringSafeArea 將ZStack添加屬性: edgesIgnoringSafeArea，並指定方向為vertival ContentView.swift123456789struct ContentView: View { var body: some View { ZStack { Image(&quot;loginBackground&quot;).resizable() Text(&quot;Hello, world!&quot;) .padding() }.edgesIgnoringSafeArea(.vertical) }} 這樣就可以看到status bar的背景已被圖片所替換掉了．","link":"/2021/03/25/2021/2021_03_25-statusbar_background/"},{"title":"Error Type &#39;()&#39; cannot conform to &#39;View&#39;","text":"在佈局畫面時，遇到 Type ‘()’ cannot conform to ‘View’; only struct/enum/class types can conform to protocols 的錯誤訊息． 原因是在佈局未完全時，在Main Thread上不能執行非畫面佈局的執行動作． 將這些非畫面佈局的動作，放在onAppear() (畫面佈局完成後)即可解決此問題．","link":"/2021/04/07/2021/2021_04_07-view_error/"},{"title":"Can&#39;t find type xxx in scope","text":"在程式中，常常會愈遇到 Can’t find type ‘XXX’ in scope 的錯誤，發生原因通常是 拼字錯誤或大小寫不一致 型態宣告不對 未加入complie source中 這次遇到的問題為第三點，再新增加一個class後，檢查命名與型態都正確時，還是無法解決此錯誤． 後來發現我在Project增加了兩個Target，第一個Target可以正常執行，而第二個Target卻會顯示錯誤． 於是檢查一下.xcodeproj, 此Taget的Build Phases，發現此class未加入compile source中，將此class加入進去即可解決此錯誤．","link":"/2021/04/08/2021/2021_04_08-add_compile_source/"},{"title":"Alamofire SessionDeinitialized &amp; TLS Trust","text":"在使用Alamofire library進行Https連接時，遇到了default TLS Trust evaluation failed 這個錯誤． 基本上看起來是無法取得憑證所導致的錯誤，但網站端所請求的並不是合法的憑證． 因此我們必須先透過ServerTrustManager來繞過憑證的驗證． 1234567891011class HttpManager: ObservableObject { func downloadCustomerIcon() { let url=&quot;https:xxx.xxx.xxx.xxx/test&quot; let manager = ServerTrustManager(evaluators: [&quot;xxx.xxx.xxx.xxx&quot;: DisabledTrustEvaluator()]) let session = Session(serverTrustManager: manager); session.request(requestStr, method: .get).responseJSON(completionHandler: { (completion) in print(completion.debugDescription) }) }} 使用此方式會得到Alamofire.AFError.sessionDeinitialized的錯誤，原因是Session還未完成請求時，已被程式關閉． 因為Https的請求是在非Main Thread執行，當開始請求時，已經離開func scope，所以session會被註銷所導致． 因此我們必須將seesion移到func外宣告，即可解決此錯誤． 12345678910111213class HttpManager: ObservableObject { var session: Session? = nil; func downloadCustomerIcon() { let url=&quot;https:xxx.xxx.xxx.xxx/test&quot; let manager = ServerTrustManager(evaluators: [&quot;xxx.xxx.xxx.xxx&quot;: DisabledTrustEvaluator()]) session = Session(serverTrustManager: manager); session!.request(requestStr, method: .get).responseJSON(completionHandler: { (completion) in print(completion.debugDescription) }) }}","link":"/2021/04/09/2021/2021_04_09-alamofire_error/"},{"title":"Escaping 跳脫符號","text":"範例中，使用兩層的closure，將closure作為callback function，當完成事件時，需要透過callback function將執行結果傳遞至畫面上呈現． 使用時遇到了以下的錯誤訊息．“Escaping closure captures non-escaping parmeter” 原因是因為callback這個closure的生命週期只在getCustomerConfig中，當結束後，SwiftUI就會將此callback closure釋放． 因此在session!.request的closure中，是不存在callback這個物件． 解決方式，在callback closure宣告時，加入跳脫符號 “@escaping”． @escaping可讓物件跳脫生命週期，function執行完後可繼續使用．","link":"/2021/04/13/2021/2021_04_13-escape/"},{"title":"網頁架設新頁面","text":" 請輸入密碼以閱讀此篇私密文章。","link":"/2021/04/21/2021/2021_04_21-guru_gaia_add_new_page/"},{"title":"SQL 匯出 Insert Scripts","text":"一般我們可以使用SQL Server Manager Studio(SSMS)來匯出Insert Scripts。 Step 1: 選擇DB-&gt;Tasks-&gt;Generate Scripts Step 2: 選擇Table Step 3: 編輯匯出設定 Step 4: 選擇Data Only 這樣我們就能將資料匯出Insert Scripts，再將此sql語法執行並匯入資料到其他DB中。 但是這個方式無法做篩選的動作，只能將整個Table資料匯出。 如果需要做篩選資料，我們可以利用Visual Studio(VS) - SQL Server 物件總管來製作Insert Scripts。 首先我們要先安裝SQL Server Data Tools(SSDT)，一般安裝VS時會預設安裝好SSDT，如果沒有的話要先安裝SSDT。 Windows 搜尋Visual Studio Installer 選擇SSDT 在其他工具組中點擊資料儲存和處理，右邊勾選SSDT，下載安裝即可。 安裝好SSDT之後，接下來我們要利用SSDT產生篩選後的Insert Scripts Step 1: 連接SQL Server 開啟VS後，選擇檢視-&gt;SQL 物件總管 設定好SQL Server連接資訊 連接好之後，我們就可以看到DB中的所有資訊。 Step 2: 查詢資料 在我們想要匯出的Table上點右鍵，選擇檢視資料。 Step 3: 過濾資料 在資料頁面的左上方，點擊漏斗Icon 輸入篩選條件並套用 也可以使用like 語法 Step 4: 匯出Scripts 篩選出資料後，點擊上方匯出指令至檔案 這樣就能將篩選後的資料，製作成Insert Scripts了。","link":"/2021/11/10/2021/2021_11_10-generate_insert_scripts/"},{"title":"Ajax 在IE上查詢失敗","text":"Ajax 在Chrome, Edge都可以正常執行，但在IE上卻失敗。 原因是ajax在Chrome, Edge對於中文字會自動轉換編碼，但是在IE並不會自動轉換而形成亂碼。 解決方式: 方法一 : 在js中使用encodeURIComponent先將中文做編碼後，再執行ajax 12345678910111213function setupPayItemList(classValue, itemValue) { var url = &quot;{0}/BPM/Forms/Fetcform1003/getPayItemList?formkind={1}&amp;formNo={2}&amp;classType={3}&quot;.format(window.baseUrl, _opts.model.formKind, _opts.model.formNo, encodeURIComponent(classValue)); $.ajax({ url: url, contentType: &quot;application/json;&quot;, type: 'post', dataType: 'json', async: false, success: function (response) { } });} 方法二 : 將參數值，使用json格式傳送 1234567891011121314function updateMaterialName(materialNum) { $.ajax({ url: &quot;{0}/BPM/Forms/Fetcform1004/getMaterialInfo?formkind={1}&amp;formNo={2}&quot;.format(window.baseUrl, _opts.model.formKind, _opts.model.formNo), contentType: 'application/json', type: 'post', dataType: 'json', data: JSON.stringify({ 'materialNum': materialNum }), success: function (response) { } });}","link":"/2021/12/01/2021/2021_12_01_Ajax_Failed_in_IE/"},{"title":"Gaia Web - Google SSO設定","text":"76ef187465d52bd7e82b09161c37e3edd308b6230490ccf6e8f3c5e5b3d1f4e1c88e0e93df02278bcf6769536fbadb027fee623015663ba143f4a8a0c32b5aad3a4f9d1ae45fc54061e25ed3e85b8ca6d41438d4b1ab33afe9b46b4c3b6e5207dfd0d84f76c04995db52ab9f9ffc9786ba43a4ad7175a0d7a077f9012dfffd297684c27f171b9c0cc6c2eab05dbf8449a0cbb59b86aeec132f46b0279edaf62dd4c6acbd4eb5f28785aea0afcc4f42c777181e73e01bb29d2a05b71d987a85c78e1ae7982c8e97550a71364e5b97235ac9e636f644454e222774b3b4ca224c897112df4b280c39e2e28edba5cd0a622e815db7fdde30e82476b188df92833a2c28d8d2d5bb4c312d74d14fb816351321996eb8ec2b7ef2bf69c151879d45dd0b2bbcea6935faf28e9d32911e29c921b919802b9b3d58bc66b438aa48a9f0e8deb8726c7dedb5d4bab1b1d86bac9a35851d128294e4ca455ed5dd85a504825e8e4eb366b2f2290c0096717e53d4edd88d237c4b4aca37fbeacc8f1ba7e41459892e241e2d2eed2b87d69f846001025026395d8d86ef219a0bd085fffae1285a24d284e3ba5c8727cb03e86a819c20d5b70434f44e460fabbe3237ea11f445b2dfdcb2d4f84a992425eb8a2404d4609b3c165fd959193c3b9077b79e54eee5d73a8c237b516ca67860e3a07fe8dae92636741ed917d1f4f6cbb8a0f182bc25a53ffec08824a98b44aac35be05c641472ecc7805e97329cdf2d40f4f8439b9a5439f6c487a0a9c34a2b1a2aa4cacc57782150f9404a1bb914e0443d7669098667ab950900fc9856b0d4a168b4f1fd478f692faabef67a81d2bb90ddbff0317f2554d51deaf6aed1099c917638fcbb6f7ab2f5dc2ddc6af3607825349f3bc64d2b42d086a14e3f0cf7bbe078a5760c7a4fdf07939ec44c6dfd54bd4f362aced08b42e1303976479b516712b21609a29445bbe2a4eaf8401404c6508b21012122c0f09e4cb25f02e2ca84cdd78e8347a5130aca3a312e6d106ad1cac4bbb863527f4fdc1f765dc229c0d0e72e4ab4d68c10e04944ab59e445a3fa9e39f56651741adfd84e54b5ab52b59cfad3eb33b354568d4104dd108b160bc89f36d67ce8f1a49dc5dee88e29528ea193f1ec872cda6ea139697bc8d3f01ce2d462403f1e6cab58e9adb7592fdad4873f94e85a4596b0f9bff3a1288df3d53dd3347df8cdbbf87ceb0df7b0130dee38be3e71849c93e24b0f347ec218f04759d81cbc6c55b94c3009a39dc95ba52ce1daa7d255ed1e6c1dd65dc243691740dceff416922113dee8d0911f296e1b17ada405a30c99baa1d61b8466517490e557e9428712840c912af5a78ff70c70632e21a575e4662cfe976d6f413b075623bed11d611b68dfc8a44a2021a1e9811a8dfc8d6aa61cf186f2dd59c51939ab6492dfa3faf4d8c73e4abec307b578e256ae1bd07cd9559069de2603689c2b5ba3c66dbe294a8adf7eb8cce68be01c0408c2114e1f8590005bb97342f4e1e8464c60be153d70291468a34163fe078bb8887732d4c6d43c090a42e9ff16676c246c62da312490eb99bb1ee30b076a865e99a9b60124bc847cee6f8ddbb86d73d93ba16a4105067cc3c96e7771b29d65d5fd59d25bff8d05af7de976c17536e2c09e34a71c302771b3214b42b8deb6b8971de515ec449eab2ba7b7cbedea03a6e36686acd3f55c1b2b9f439018147cd1848bb3f518563c03bc383dcbc0dd883fc868333ab3cd819f45e91c77e00048d7cf71ee532b8f6b840f0459f2836103f05cad7d363065f900d7d3297cd135484f45e7444f40fcd9f0acfac1962ef4e578a00cd741095187a98e5ee0c1c120985b5e4a1513a45d3a72c9014180dce511ae04a79693807d7fef682fd87fc0c2012ebfe04207d07d4bc47a42b771e9f757f9a8ead8200921ade5a71fe41ff743468d1344173f48a7ba5dba57c3f22cca1cbdad6e5d0d0d9f43004de5dc3314130b38c338af5b030656224e3bbdbd7161d84c84c4453bdd164650b70d14d3a8386c4c006d15c304476009c4b656fea92333a23d40fdc0425d476b95d9ee9eefecfb903eef2df4705825f0ab919cffcf3633da6584b3d688fdbc7746fe370e7fa149033fca3f13c8ae4b7bdf81a87ed9aaa05f0903526c0c13702eb20eb50903791b603f1e0b825003db5d263498b106f4438f6b13afc99af1e4f5887c41e2dcacc5d41ace1fd6f0a3286b3fad9a7938b9146f3a2194bfbd6052f2f101b3f4be0074264c248309694085906fcfbf24d038233e5ccfa38dbf168388020340e4038ace50db894e09bb0e004410d29379a8d3bb70a2f9e4004721fe085476405390d4a930e171df32ab736e3d3b383c105e7cb024460d64148d281ca9bff86addca2ebe3d7a20dfa4e90b381d24488564a981835715616ef7beed1ec0f973246069b0affb04c65674d94e4353fd3f266c8e8367b882e972f3a23a00c80c9227d4f296ed9cc3d1a96e1cf1f8a6c784e051fb393ee335496483f5109c423f03e62db666bbed97c651017ca7789b4490031bb9520029f0b745e6f37b0a3260f89b830826d26bc5224ea8e568a423ecf911b2414c6b332434a11df563a127a30ea8f9a47fb9be1ac19ae99984fa3b0e1f54356a1edf46bebffab52e41cab66564289bbc224f0754129b0ae0ae23a16ab6df5d327bdc34f1083c027608dbc47c7ae17e1e10e5d1bdb168f2135165a2edb59cb37532b26d58271201c8c5d6f55d1d036f06291de90f4a99938dd9d7377ef0ff824b9437e6d56e81720d7e253062c87f4f2f5421a44819c45142c202206e39b7f64bead30ffa718b49bbc7706e6a57c4e5f637e82344c8d82f4699cc6b7d2c7bd5a9986544fa8199276371b4771a2a2dea5aa3b0e2267a9472c7bbef4962199efd170c5951466ee20219fa42999cf1549f3b26f1314a84d7fe8e0628666389bbc5299abf5f5acd4b31f6fee6b963618350b017a7641187291adff98f6c4e474d8bffa3419c8debfbdc36bc9cf1c093ae6d0489f9991a2bd0ff3e3ca5ee98c025a4b395d25abe6588c40d1bee5e38fe8ad01269b2d7c0f2f643c39400ee526f6883a6b73287e81e0179b702b520574f2a8fa5fa1cc8fbe4883a0fc87de1e5ac7510506defa99e55482ab80e1433b3e7fe577b11d6f7d633ba0aabc76c2be55005c69c317cf79fb7b8cd3baea30d3067c5148bcd0ed75116b14a0e421dd6de06370b7b28ff31d92a9b067906404cd85130594cdbc22c5736ed85c5fb85e03e50a485f38d290ca39a472aad8a61af19470de9fc4965ebc23f3ebfa2a334c1b8e9e13f076b60ce1b91e12c161c60180943d25b1ff2fedcfec1778e2f9f7de496f4fa854e9b1f83cfce1b8e5ede81c96309477c837a246201d626bb15837756f1a6786ae6b062b24d604bd6a0cbb79d0c37cc85cd5f045a007a0a35bebadeab2b02655c29af97acced8ff4d38397732d57c597be222272c22bad5eb640c8f243f69073f356d38aeefebd0e3b5420b9825eed7e94c1796058a3baaf12db4dd590d862d2d1c1541a281c85b53e7996119aa9e694db5e14745d9534d5fa2160df8f9ffd33d381edaad5834579af1cd321d3b23e160accf1890139068f7c0b92ea025e61c193771c752448604ef701866b006f6805c4b2df743b3ac2a48da459600c4b93637120951d9b4307af6a1d6b2a3769950977f1e323d92fa74fc27517ef0b7201945c1f9fc8b3ee76f6b20684dc38dceeb463e7955a3734bccb21f11c794462cf0d4f6116c4616bf8d3b2f7e427a5e74cacc7c9cfb3872202fb96c179d1d2bcf8507d6bace1bd53fca6d105b34e307ae212903fcecd87675043813e0977d35784ceb2940c5250256b11658542f4cb7bb68a26dd7a5c2f73ebee0d9bd8714ee50b82e03772cb547e57648208691a574fd0cf3812fb9360f966b16a6b538e82a5fa2896ffdd6bc4eb780f912186d807cbc3123c5552a644d983780534b18d60659247eb938cbbdf04ac77d1348adeb45fb248268ae0ad94d147bc1f035ce08c67923 請輸入密碼以閱讀此篇私密文章。","link":"/2021/12/01/2021/2021_12_01_GAIA_Google_SSO_Settings/"},{"title":"Google SSO 設定","text":"Google API Consolehttps://console.developers.google.com 本文主要是紀錄架設Web端，Android端，iOS端Google SSO的相關設定，實際連接方式可參考官方文件。iOS: Google Sign-In for iOSAndroid: Google Sign-In for Android 建立憑證 選擇專案-&gt;API和服務-&gt;憑證 新增憑證 Web 端憑證設定選擇網頁應用程式 設定已授權的重新導向 URI 如果沒有設定已授權的URI，網頁端使用Google登入時，會發生授權錯誤。 Gaia Web端設定請參考Gaia Web - Google SSO設定） iOS 端憑證設定在新增憑證時，選擇iOS 設定好iOS Bundle Identifier 在XCode的Target Info設定中，在Url Types增加一個url type，並且在URL Schemes中填入上圖中的iOS 網址通訊協定。 在程式中創建GIDConfiguration，填入用戶端編號 Android 端憑證設定在新增憑證時，選擇Android 設定Android Package Name 設定SHA-1 指紋憑證之前，必須先建立Android APK Signed Key，如果憑證指紋和apk中的憑證指紋不一致時，會發生google 登入失敗的錯誤。 建立Android APK Signed Key 建立好Signd Key後，使用java KeyTool來查看SHA-1 KeyTool 位置: C:\\Program Files\\Java\\jdk-17.0.1\\bin中使用命令提示字元輸入 1keytool -list -v -keystore guruone.jks 將查詢到的SHA-1 填入頁面中。 當上架後，從Google Play安裝後發生Google 登入失敗。 由於現在上架到Google Play都需要使用.aab檔，而.aab檔所使用的私鑰為guruone.jks，Google Play會再使用一把公鑰將.aab檔打包成.apk檔後提供使用者下載。 但是這把公鑰的SHA-1和.aab檔的SHA-1是不同的，所以會造成Google 登入失敗。 我們需要到Google Play Console，找到Google公鑰的SHA-1並填入到Google API Console中。 上方SHA-1為Google公鑰，下方為我們上傳.aab檔所使用的私鑰。 相關問題Google Login 授權錯誤Android Google 登入失敗上架後，Android Google 登入失敗","link":"/2021/12/01/2021/2021_12_01_Google_SSO_Settings/"},{"title":"Java Script 學習","text":"此文章主要是在撰寫Web網頁時，使用Java Script及Kendo UI的學習心得。 文字框Enable/Disable1234// - Disabled$(&quot;#fm_id&quot;).attr(&quot;disabled&quot;, &quot;disabled &quot;);// - Enabled$(&quot;#fm_id&quot;).removeAttr(&quot;disabled&quot;); 取值1$('#fm_id').text() 設定值1$('#fm_id').text(&quot;xxx&quot;) 提示1document.getElementById(&quot;fm_id&quot;).placeholder = &quot;xxx&quot;; 1$(&quot;#fm_id&quot;).attr(&quot;placeholder&quot;, &quot;XXX&quot;); 監聽變化1234//監聽變化: 失去focus時生效$(&quot;#fm_id&quot;).on(&quot;change&quot;, function (e) { } ); 監聽變化 - 即時1234//監聽變化: 即時$(&quot;#fm_id&quot;).bind('input propertychange', function () {}); 設定文字顏色設定欄位style 1$('#fm_id').css('color', 'red'); 數字Enable/Disable1234// - Disabled$(&quot;#fm_id&quot;).attr(&quot;disabled&quot;, &quot;disabled &quot;);// - Enabled$(&quot;#fm_id&quot;).removeAttr(&quot;disabled&quot;); 取值撰寫一個共用函數轉換，傳入id為欄位編碼 123function getValue(id){return (!!$(&quot;#&quot; + id).val() &amp;&amp; !isNaN($(&quot;#&quot; + id).val())) ? $(&quot;#&quot; + id).val() : '0';} 要取值時只要使用此函式即可。 1getValue('fm_id'); 設定值1$(&quot;#fm_id&quot;).data(&quot;kendoNumericTextBox&quot;).value(25); 設定空值1$(&quot;#fm_id&quot;).data(&quot;kendoNumericTextBox&quot;).value(null); 客製化控件1234567891011121314151617/* 客製化控件 - Spinners : (右方)數值上下鍵調整 顯示/隱藏 - Round: 是否要四捨五入 - Step: 按鍵盤上下鍵是否可調整 - Format: 0.000: 小數點後三位四捨五入，多餘的0不省略 ##,#.###: 具有千分位, 且小數點後三位四捨五入, 多餘的0省略*/$(&quot;#fm_id&quot;).kendoNumericTextBox({ min: -99999.999, max: 99999.999, format: '0.000', step: 0, decimals: 3, round: false, spinners: false }); 千分位當數值欄位想顯示千分位時，可以將數值帶入以下函數做轉換。(如: 10000 -&gt; 10,000) 123456function FormatNumber(n) { n += &quot;&quot;; var arr = n.split(&quot;.&quot;); var re = /(\\d{1,3})(?=(\\d{3})+$)/g; return arr[0].replace(re, &quot;$1,&quot;) + (arr.length == 2 ? &quot;.&quot; + arr[1] : &quot;&quot;);} 四捨五入當數值欄位需要四捨五入時，可使用以下函式做轉換，帶入原本數值和要四捨五入到第幾位的小數位數。 123 function MathRound(val, precision) {return Math.round(Math.round(val * Math.pow(10, (precision || 0) + 1)) / 10) / Math.pow(10, (precision || 0)); } 日期控件Enable/Disable1$(&quot;#fm_id&quot;).data(&quot;kendoDatePicker&quot;).enable(true/false) 設定值1$(&quot;#fm_id&quot;).data(&quot;kendoDatePicker&quot;).value(new Date(2021, 12, 15)) 計算日期相差天數123456var start = $(&quot;#fm_id&quot;).val();var end = $(&quot;#fm_id&quot;).val();var startDate = new Date(start)var endDate = new Date(end)var diff = (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24); 日期轉換12345678910111213/* javascript 日期轉換 - 新版的js已經移除format方法，使用 new Date().format('yyyy-MM-dd') 會得到(intermediate value).Format is not a function的錯誤。 只能自行轉換或使用lib。*/var formatDate = function (date) { var y = date.getFullYear(); var m = date.getMonth() + 1; m = m &lt; 10 ? '0' + m : m; var d = date.getDate(); d = d &lt; 10 ? ('0' + d) : d; return y + '-' + m + '-' + d;}; 監聽變化123$('#fm_id').on('change', function () { var time = this.value}); 更改格式123$(&quot;#fm_id&quot;).data(&quot;kendoDateTimePicker&quot;).setOptions({ timeFormat: 'hh:mm'}); 卡控日期選單12345678910111213// - ex: 卡控從上月25日後才能選$(&quot;#fm_id&quot;).kendoDateTimePicker({ value: new Date(), disableDates: function (date) { var currentDate = new Date(); var beforeDate = new Date(currentDate.getFullYear(), currentDate. getMonth() - 1, 25); if (date &gt; beforeDate) { return false; } else { return true; } }}); 增加日期prototype12345678//增加日期prototype, 可計算日期時間 new Date().addHours(1);Date.prototype.addHours = function (noOfHours) { var tmpDate = new Date(this.valueOf()); tmpDate.setHours(tmpDate.getHours() + noOfHours); return tmpDate;} 單選控件Disable/Enable使用F12查詢radio button name &amp; value name = order_Completedvalue = 1 12345// - Disable$(&quot;input[name='order_Completed'][value='1']&quot;).attr(&quot;disabled&quot;, &quot;disabled&quot;);// - Enable$(&quot;input[name='order_Completed'][value='1']&quot;).removeAttr(&quot;disabled&quot;); 取得單選框被選取的值Step 1: 使用F12查詢radio button name Step 2: 在js中監聽radio button的變化和取得選取的值。 123$('input:radio[name=&quot;order_Completed&quot;]').click(function () { var checkValue = $('input:radio[name=&quot;order_Completed&quot;]:checked').val();}); 複選控件Disable/Enable使用F12查詢checkbox button name &amp; value name = feedbackvalue = 內訓開課或簡報分享 12345// - Enable:$(&quot;input[name='feedback'][value='內訓開課或簡報分享']&quot;).removeAttr(&quot;disabled&quot;);// - Disable:$(&quot;input[name='feedback'][value='內訓開課或簡報分享']&quot;).attr(&quot;disabled&quot;, &quot;disabled&quot;); Checked/Unchecked1$(&quot;input[name='feedback'][value='內訓開課或簡報分享']&quot;).attr(&quot;checked&quot;, true/false); 列出所有被checked的元件123$('#fm_id').find(':checkbox:checked').each(function () { }); checked數量1$('input:checkbox[name='feedback']:checked').length; 取得複選框被選取的值1$('input:checkbox[name='feedback']:checked').val(); 取消全部的勾選123$('#fm_id').find(':checkbox:checked').each(function () { $(this).prop(&quot;checked&quot;, false);}); 下拉式選單Disable/Enable1$(&quot;#fm_id&quot;).data(&quot;kendoDropDownList&quot;).enable(true/false); 設定值1$(&quot;#fm_id&quot;).data(&quot;kendoDropDownList&quot;).value(&quot;0&quot;) 設定唯讀1$(&quot;#fm_id&quot;).data(&quot;kendoDropDownList&quot;).readonly(true/false); 取得選取值1$('#fm_id').val() 取得選取文字1$('#fm_id').find(':selected').text() 取得選取Index1var index = $('#fm_id').data(&quot;kendoDropDownList&quot;).selectedIndex; 取得選取物件1var model = $(&quot;#fm_id&quot;).data(&quot;kendoDropDownList&quot;).dataSource._data[index]; 動態設定內容12var dropdownlist = $(&quot;#fm_id&quot;).data(&quot;kendoDropDownList&quot;);dropdownlist.setDataSource(response); 設定模糊查詢123$(&quot;#fm_id&quot;).data(&quot;kendoDropDownList&quot;).setOptions({ filter: &quot;contains&quot;}); 監聽變化123$('#fm_id').on('change', function () {}); 通用控件Disable/Enable1234// - Enable$('#fm_id').select2(&quot;enable&quot;);// - Disable:$('#fm_id').select2(&quot;enable&quot;, false); 設定值1$(&quot;#fm_id&quot;).select2('data', { value: xxx, display: xxx});","link":"/2021/12/08/2021/2021_12_08_GAIA_FORM_Design/"},{"title":"Gaia Web Lesson Learn","text":" 請輸入密碼以閱讀此篇私密文章。","link":"/2021/12/09/2021/2021_12_09-GAIA_FORM_Design_3%20-%20%E8%A4%87%E8%A3%BD/"},{"title":"Gaia Web Lesson Learn","text":" 請輸入密碼以閱讀此篇私密文章。","link":"/2021/12/09/2021/2021_12_09-Gaia_Web_Lesson_Learn/"},{"title":"Java Script 學習 Part II","text":"此文章主要是在撰寫Web網頁時，使用Java Script及Kendo UI的學習心得。由於Kendo Grid內容太多，所以單獨一篇來撰寫。 子表 - Kendo Grid設定子表123$(&quot;#fm_id&quot;).kendoGrid({ dataSource: dataSource, columns: columns}); 監聽 Edit Event1234var subGrid = $('#fm_id').data(&quot;kendoGrid&quot;);subGrid.bind('edit', function (e) { console.log(&quot;Edit : &quot; + e.model.id);}); 監聽 Remove Event1234var subGrid = $('#fm_id').data(&quot;kendoGrid&quot;);subGrid.bind('remove', function (e) { console.log(&quot;Remove : &quot; + e.model.id);}); 監聽 CheckBox EventStep 1: 子表設定好checkbox 12345 var columns=[{headerTemplate: '&lt;input type=&quot;checkbox&quot; class=&quot;selectAll&quot; /&gt;',width: '30px',template: '&lt;input type=&quot;checkbox&quot; class=&quot;select&quot; value=&quot;${id}&quot; /&gt;' }] Step 2: 設定子表 123$(&quot;#fm_id&quot;).kendoGrid({ dataSource: dataSource, columns: columns}); Step 3: 監聽變化 12345 subGrid.element.on(&quot;click&quot;, &quot;.select&quot;, selectRow); function selectRow() {var checked = this.checked } 監聽變化12//欄位新增後(可用於計算總金額)$(&quot;#fm_id&quot;).data(&quot;formGrid&quot;).totalColumn = function () { } 重新載入1234//在程式中，如果自行塞入子表內容。//可使用以下的方式，重新更新子表顯示內容。subGrid.dataSource.read();subGrid.refresh(); 內頁編輯文件參考 12//初始化kendoGrid時，增加參數editable: 'inline' 內頁編輯-資料移除問題12345678910//KendoGrid使用inline edit，點Cancel Button時，會將資料移除//解決方式: 監聽cancel事件，並解除更新$(&quot;#fm_id&quot;).kendoGrid({ dataSource: xxx,edit: function (e) { }, cancel: function (e) { $('#fm_id').data('kendoGrid').dataSource.cancelChanges();}}); 批次更改內容1234567891011$('#fm_id').data(&quot;kendoGrid&quot;).bind(&quot;dataBound&quot;, dataBound_sub);function dataBound_sub(e) { var grid = $(&quot;#fm_id&quot;).data(&quot;formGrid&quot;); if (grid.dataSource._total &gt; 0) { $(&quot;#fm_id tbody tr&quot;).each(function (index) { //將顯示的字體改成紅色 $(this).children(0).eq(欄位_INDEX).html('&lt;p style=&quot;color:red&quot;&gt;' +TEST+ '&lt;/p&gt;') }); }} 欄位順序調整12var grid = $(&quot;#fm_id&quot;).data(&quot;kendoGrid&quot;);grid.reorderColumn(1, grid.columns[3]); 欄位隱藏123/* ex: 使用F12 查看data-field值, grid.hideColumn(&quot;data-field值&quot;); */var grid = $(&quot;#fm_id&quot;).data(&quot;kendoGrid&quot;);grid.hideColumn(&quot;欄位名稱&quot;); 更改欄位標題12345$(&quot;#fm_id thead th&quot;).each(function (index) { if (this.dataset.title != &quot;序號&quot;) { this.innerHTML = this.innerHTML.replace(this.dataset.title, this.dataset.title + &quot;&lt;br&gt;&quot; + &quot;(系統帶入，無須填寫)&quot;) }}); 隱藏Toolbar新增按鈕12345 //全部子表都隱藏 $(&quot;.k-grid-add&quot;).hide(); //單一子表隱藏 var grid = $(&quot;#grid&quot;).data(&quot;kendoGrid&quot;)$(&quot;#grid&quot;).find(&quot;.k-grid-toolbar .k-grid-add&quot;).hide(); 編輯按鈕隱藏/顯示我們在子表中設計了兩個按鈕，根據某些情境要隱藏/顯示此兩個按鈕，該如何實作? 初始化Kendo Grid時，監聽編輯變化 123456$(&quot;#grid&quot;).kendoGrid({ dataSource: dataSource, columns: columns, edit: function (cell) { }}); 檢視瀏覽器(Chrome按下F12)，查看button的TAG 使用find cell uid和TAG來設置隱藏/顯示。 123456789$(&quot;#grid&quot;).kendoGrid({ dataSource: dataSource, columns: columns, edit: function (cell) { var uid = e.model.uid; $(&quot;#grid&quot;).data(&quot;kendoGrid&quot;).tbody.find(&quot;tr[data-uid='&quot; + uid + &quot;']&quot;).find(&quot;.k-grid-edit&quot;).hide(); $(&quot;#grid&quot;).data(&quot;kendoGrid&quot;).tbody.find(&quot;tr[data-uid='&quot; + uid + &quot;']&quot;).find(&quot;.k-grid-save&quot;).show(); }}); 設定日期控件 Step 1: 設定Columns 1234567891011121314var columns = [{ title: &quot;日期&quot;, field: &quot;date&quot;, width: '20%', sortable: false, format: &quot;{0:yyyy-MM-dd}&quot;, parseFormats: [&quot;yyyy-MM-dd&quot;], editor: function (container, options) { $('&lt;input name=&quot;' + options.field + '&quot;/&gt;').appendTo(container). kendoDatePicker({ placeholder: bg.user.dateFormat }); } }]; Step 2: 設定Datasource - Field 1234567891011121314151617var dataSource = new kendo.data.DataSource({ schema: { model: { id: &quot;id&quot;, fields: { id: { type: &quot;string&quot;, editable: true }, date: { type: &quot;date&quot;, editable: true } } } }}); Step 3: 設定Kendo Grid 1234$(&quot;#grid&quot;).kendoGrid({ dataSource: dataSource, columns: columns,}); 設定必填欄位Method 1: 在DataSource中設定設定DataSource - validation: { required: true } 123456789101112131415var dataSource = new kendo.data.DataSource({ schema: { model: { id: &quot;id&quot;, fields: { id: { type: &quot;string&quot;, editable: false }, keyID: { type: &quot;string&quot;, editable: true, validation: { required: true } }, } } }}); Method 2: 在Columns中設定設定Columns 12345678910111213141516var columns = [ { title: opts.locale.keyID, field: &quot;keyID&quot;, width: '30%', template: '#= bg.nullDisplay(keyID) #' editor: function(container, options) { var input = $('&lt;input type=&quot;text&quot; class=&quot;k-input k-textbox&quot; name=&quot;' + options.field + '&quot; data-bind=&quot;value:' + options.field + '&quot; required=&quot;required&quot; /&gt;'); //append the editor input.appendTo(container); var tooltipElement = $('&lt;span class=&quot;k-invalid-msg&quot; data-for=&quot;' + options.field + '&quot;&gt;&lt;/span&gt;'); //append the tooltip element tooltipElement.appendTo(container); } }] 設定好DataSource or Columns後，設定Kendo Grid時，不要設定 scrollable 12345$(&quot;#grid&quot;).kendoGrid({ dataSource: dataSource, columns: columns, //scrollable: true,}); 如果設定為scrollable: true會看不到提示文字 tooltip 設定數值顯示格式設計子表時，一般會在columns設定template顯示格式。 ex: 1234567var columns = [{ title: opts.locale.keyID, field: &quot;keyID&quot;, width: '160px', editor: keyIDDropDownEditor, template: '#= bg.nullDisplay(keyID) #'}] 但是如果要設定數字格式的話，無法使用#，因為template的#是特殊判斷文字。 所以必須改用function的方式設定。 12345678var columns = [{ title: opts.locale.minMoney, field: &quot;minMoney&quot;, width: '140px', template: function (dataItem) { return bg.nullDisplay(kendo.toString(kendo.parseFloat(dataItem.minMoney), &quot;##,#&quot;)); }}] 客製化Toolbar基本Toolbar的配置只有text, name, 和 iconClass可以設定。 1234567891011121314$(&quot;#grid&quot;).kendoGrid({ dataSource: dataSource, columns: columns, toolbar: [ { name: &quot;create&quot;, text: &quot;新增&quot;, iconClass: &quot;glyphicon glyphicon-plus&quot; }, { name: &quot;delete&quot;, text: &quot;刪除&quot;, iconClass: &quot;glyphicon glyphicon-remove&quot; }]}); 如果要調動位置，更改class的話，必須使用template來做客製化。 123456789101112$(&quot;#grid&quot;).kendoGrid({ dataSource: dataSource, columns: columns, toolbar: [ { name: &quot;create&quot;, template: '&lt;a class=&quot;btn btn-success k-grid-add&quot; href=&quot;\\\\#&quot; style=&quot;display: inline-block;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-plus&quot;&gt;&lt;/span&gt;新增&lt;/a&gt;' }, { name: &quot;delete&quot;, template: '&lt;a class=&quot;btn btn-success&quot; onclick=&quot;bg.nec.RulesList.remove(this);return false;&quot; style=&quot;margin-left:10px&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-remove&quot;&gt;&lt;/span&gt;刪除&lt;/a&gt;' }]}); 如果要將Toolbar中的button移到右邊的話，可以使用 style=”float:right;” 的方式。 123456789101112$(&quot;#grid&quot;).kendoGrid({ dataSource: dataSource, columns: columns, toolbar: [ { name: &quot;create&quot;, template: '&lt;a class=&quot;btn btn-success k-grid-add&quot; href=&quot;\\\\#&quot; style=&quot;display: inline-block;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-plus&quot;&gt;&lt;/span&gt;新增&lt;/a&gt;' }, { name: &quot;delete&quot;, template: '&lt;a class=&quot;btn btn-success&quot; onclick=&quot;bg.nec.RulesList.remove(this);return false;&quot; style=&quot;float:right;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-remove&quot;&gt;&lt;/span&gt;刪除&lt;/a&gt;' }]}); 凍結欄位子表可以設定scrollable: true，使得子表可以拖拉欄位 若我們想凍結某些欄位時，可以在設定columns時，設定凍結欄位locked: true。 123456789101112var columns = [{ headerTemplate: '&lt;input type=&quot;checkbox&quot; class=&quot;selectAll&quot; /&gt;', width: '30px', locked: true, template: '&lt;input type=&quot;checkbox&quot; class=&quot;select&quot; value=&quot;${id}&quot; /&gt;' }, { title: opts.locale.keyID, field: &quot;keyID&quot;, width: '160px', editor: keyIDDropDownEditor, template: '#= bg.nullDisplay(keyID) #'}] 不過使用凍結欄位可能會遇到以下問題 問題: 高度被擋住使用凍結欄位，可能會在畫面計算時，欄位高度計算錯誤，導致某些內容被遮住。 解決方式: 當資料更動時，重新計算欄位高度。 設定resizable: true和dataBound計算欄位高度。 1234567$(&quot;#grid&quot;).kendoGrid({ dataSource: dataSource, columns: columns, resizable: true, editable: true, scrollable: true, dataBound: onDataBound}); 12345678910111213141516171819//調整凍結欄位的高度 function onDataBound(e) { resizeGrid(e.sender); } function resizeGrid(grid) { setTimeout(function () { var lockedContent = grid.wrapper.children(&quot;.k-grid-content-locked&quot;) var content = grid.wrapper.children(&quot;.k-grid-content&quot;); grid.wrapper.height(&quot;&quot;); lockedContent.height(&quot;&quot;); content.height(&quot;&quot;); grid.wrapper.height(grid.wrapper.height()); grid.resize(); }); } 問題: 原先設定的欄位無作用原先在Header設定一個checkbox，當勾選時將所有的checkbox都勾選。 123456var grid = $(&quot;#grid&quot;).data(&quot;kendoGrid&quot;);grid.thead.find(&quot;th&gt;.selectAll&quot;).on(&quot;click&quot;, function () { var checkbox = $(this); grid.table.find(&quot;tr&gt;td&gt;input[type='checkbox'].select&quot;).attr(&quot;checked&quot;, checkbox.is(&quot;:checked&quot;)).trigger(&quot;change&quot;);}); 將此Header凍結欄位後，發現都失效了。原因是grid將原本欄位和凍結欄位分類為table到lockedTable，所以此函式必須更改為thead -&gt; lockedHeadertable -&gt; lockedTable 123456var grid = $(&quot;#grid&quot;).data(&quot;kendoGrid&quot;);grid.lockedHeader.find(&quot;th&gt;.selectAll&quot;).on(&quot;click&quot;, function () { var checkbox = $(this); grid.lockedTable.find(&quot;tr&gt;td&gt;input[type='checkbox'].select&quot;).attr(&quot;checked&quot;, checkbox.is(&quot;:checked&quot;)).trigger(&quot;change&quot;);});","link":"/2021/12/09/2021/2021_12_09_GAIA_FORM_Design_2/"},{"title":"PushSharp &amp; Http2","text":"最近由於Apple Push Service憑證過期，重新申請憑證時，發現Apple Push Notification(簡稱APN)失效了。 於是在Apple Store下載一些APNs 測試App來測試推播，都無法接收到訊息。後來在網路上找到一個C#測試工具-PushSharp GitHub，卻發現之前的憑證都可以正常執行。 但是使用後來申請的憑證，程式都執行不下去，且都沒接收到APN Server所傳來的Response。 有推撥出去的訊息如下: 原來Apple在2021/3/31時，在申請Push憑證時，已不再支援舊有的模式(the legacy interface)，往後的Push憑證只支援 Http/2 的模式。 Apple Developer Forums 不過此作者也有支分支可支援Http/2 PushSharp http2 branch GitHub 不過在推送過程中，遇到以下問題。 1. Missing Topic 在Apple Guide中提到，使用Http/2推送時，需要傳遞參數topic，也就是App Bundle ID apns-topic: In general, the topic is your app’s bundle ID/app ID. 所以我們在ApnsHttp2Notification中填入Bundle ID 123ApnsHttp2Notification notify = new ApnsHttp2Notification(deviceToken, JObject.Parse(msg));notify.Topic = Configs.BundleID; 2. 無法指定Push Type在Apple Guide中提到可以使用apns-push-type來設定。 但是PushSharp中找不到可以設定的地方，後來參考PushSharpHttpTwo的方式來增加此設定。 在以下檔案中增加相關程式 PushSharp.Apple\\ApnsHttp2Notification.cs12345/// &lt;summary&gt;/// apns-push-type/// &lt;/summary&gt;/// &lt;value&gt;background or alert&lt;/value&gt;public string PushType { get; set; } PushSharp.Apple\\ApnsHttp2Connection.cs12345678public async Task Send (ApnsHttp2Notification notification){ if ((string.IsNullOrEmpty(notification.PushType))) { notification.PushType = &quot;background&quot;; } headers.Add(&quot;apns-push-type&quot;, notification.PushType);} 接下來可以在主程式中使用PushType來設定接收方式。 Main.cs1234ApnsHttp2Notification notify = new ApnsHttp2Notification(deviceid, JObject.Parse(msg));notify.Topic = Configs.BundleID;notify.Priority = ApnsPriority.Low;notify.PushType = &quot;alert&quot;;","link":"/2021/12/24/2021/2021_12_24-iOS_APNs_Provider/"},{"title":"JS透過ajax下載檔案","text":"之前點擊畫面中下載按鈕，透過window.location的方式，與後端串接來進行下載檔案。 1window.location = download_url 開發案例中，是從DB查詢資料後匯入Excel檔案並下載，但開發時，客戶要求需要能夠過濾出資料，不希望將所有資料都匯出。 因此必須透過傳遞參數的方式來達成此要求。 方法一: 透過ajax先查詢出資料，並暫存FileStreamResult於HashTable中，返回ajax後，再透過window.location去做直接下載的部分。 方法二: 直接透過window.location傳遞參數。 原先寫法為 Test.js1window.location = '/ExController/exportExcel'; ExController.cs12345678910public ActionResult exportExcel(){ //取得Excel stream Stream stream = getDBData(); FileStreamResult fileStreamResult = new FileStreamResult(stream, &quot;application/octet-stream&quot;); fileName = ExcelHelper.TemplateFileName; fileStreamResult.FileDownloadName = &quot;ExcelFile.xls&quot;; return fileStreamResult; } ajax 下載檔案改寫為透過ajax取得Excel File 資訊。 Test.js1234567891011121314var queryModel = {};queryModel.keyID = $(&quot;#keyId&quot;).val();queryModel.type = $(&quot;#type&quot;).val(); $.ajax({ type: 'POST', url: '/ExController/exportExcel', data: JSON.stringify(queryModel), contentType: 'application/json; charset=utf-8', dataType: 'json', success: function (res) { }}); 在C#中，命名一個model: RequestModel來傳遞參數。 RequestModel.cs12345678910namespace TEST.Models{ [Serializable] [DataContract] public class RequestModel { public string KeyID { get; set; } public string Type { get; set; } }} 在原本exportExcel函式中，建立HashTable，並將剛剛的FileStreamResult存放在此HashTable中，等下Download完畢後，再從此HashTable移除。 並將回傳值更改為json格式 ExController.cs1234567891011121314151617181920private static Hashtable mExcelStreams = new Hashtable();public ActionResult exportExcel(RequestModel request){ //取得Excel stream Stream stream = getDBData(request); FileStreamResult fileStreamResult = new FileStreamResult(stream, &quot;application/octet-stream&quot;); fileName = ExcelHelper.TemplateFileName; fileStreamResult.FileDownloadName = &quot;ExcelFile.xls&quot;; string fuid = Guid.NewGuid().ToString(); mExcelStreams.Add(fuid, fileStreamResult); return Json(new { FileGuid = fuid, FileName = fileName });; } 當ajax返回時，透過window.location再次呼叫Controller下載檔案。 Test.js1234567891011121314var queryModel = {};queryModel.keyID = $(&quot;#keyId&quot;).val();queryModel.type = $(&quot;#type&quot;).val(); $.ajax({ type: 'POST', url: '/ExController/exportExcel', data: JSON.stringify(queryModel), contentType: 'application/json; charset=utf-8', dataType: 'json', success: function (res) { window.location = '/ExController/downloadExcel' + &quot;?fuid=&quot; + res.fileGuid; }}); 根據uuid來取得剛剛的FileStreamResult並下載。 ExController.cs123456789101112131415private static Hashtable mExcelStreams = new Hashtable();public ActionResult downloadExcel(string fuid){ if (mExcelStreams.ContainsKey(fuid)) { FileStreamResult result = (FileStreamResult)mExcelStreams[fuid]; mExcelStreams.Remove(fuid); return result; } else { return null; }} window.location 攜帶參數下載檔案Test.js12345var queryModel = {};queryModel.keyID = $(&quot;#keyId&quot;).val();queryModel.type = $(&quot;#type&quot;).val();window.location = '/ExController/exportExcel?request=' + JSON.stringify(queryModel); 在Controller中，先將參術取出後，並解析出json格式資料並轉換為RequestModel。 ExController.cs1234567891011121314151617public ActionResult exportExcel(){ string getval = Request.QueryString[&quot;request&quot;]; JObject j_obj = JObject.Parse(getval); Dictionary&lt;string, string&gt; str_dict = j_obj.ToObject&lt;Dictionary&lt;string, string&gt;&gt;(); RequestModel request = new RequestModel(); request.KeyID = str_dict[&quot;keyID&quot;].ToString(); request.Type = str_dict[&quot;type&quot;].ToString(); //取得Excel stream Stream stream = getDBData(request); FileStreamResult fileStreamResult = new FileStreamResult(stream, &quot;application/octet-stream&quot;); fileName = ExcelHelper.TemplateFileName; fileStreamResult.FileDownloadName = &quot;ExcelFile.xls&quot;; return fileStreamResult; }","link":"/2022/03/04/2022/2022_03_04-JS_Ajax_Download_File/"},{"title":"Gaia SQL 語法","text":" 請輸入密碼以閱讀此篇私密文章。","link":"/2022/03/07/2022/2022_03_07-GAIA_SQL_example/"},{"title":"XIB無法拖拉建立Outlets","text":"當xib拖拉至Source Code時，遇到無法將物件和xib建立Link． 主要是因為xib是XCode所預設的物件，必須要自己定義的物件才能做Outlets. 在xib檔案中, 右上角點選 menu -&gt; Assistant , 可打開與xib連結的source code 由於此時預設為NSObject, 是為系統Source Code所以才無法建立Outlets Solution: 更改為自定義Object 在xib檔案中，左邊選擇Files Owner後，右邊更改Class 這樣就可以拖拉並建立 Outlets了","link":"/2023/01/19/2023/2023_01_19-XIB_LINK_FAILED/"},{"title":"XIB 無法使用 [self.window close] 關閉視窗","text":"Root Cause : 由於NSWindow 本身的window沒有建立Outlets所造成. 開啟xib檔案，點選左邊 File’s Owner 右邊物件中．找到window物件，拖拉至畫面中的Window建立link後，在程式中就可以使用[self.window close] 來關閉Window","link":"/2023/01/19/2023/2023_01_19-xib_not_close_window/"},{"title":"ITG Work Info.","text":"50ed693c63e26bd7755fe4f4d25e2869ebb4b93e9ff430a2829fb911166544f3ab06434c219395c866da2504bd0399e619ca7569cea90d02ef75a8f787d568aa6462c74c06143ce2b0eadc1353fc275615eba44a5ae94be43181441a563fb929b7ec012b069971735153dba455d2e2b08b421779d1153e6a7d6c14679522f890e65dc18309a869900d56d7744d49b74606095f628b5979b3492e081f704189f9acaac2327399b8c3339fb77334dc7dfe845191506aa9e44400ce8e4b97bacf710ffe0482ade0c8d75d0d6190c56f6596764b6772a36194f109096c68d9ad72d580dde2bfa8025fd108bfa3f50a2f2f73d4b00ac6d7a280ac5e60a86f759de8d053df853e616ccab9fa670042e7374138b4fdd2229a087d66c499e050069a31df6f60831de307a5cb43441f2eee0e91cd8d5f51f564a22e0be1dd679f05007a856e6c80f52792ab1974841ea8563463e980f388d646ed7271e689d135ee8b18ae6581a301eb6fbc7ff4fd5baeb25971341c5bff54737ea46ed39acdd8e2f3be68ebfc82a1a0a9b068777398752f422d1121f0c58cb1322fbf732c92148e1326702ebee27dc243d2cbf1d6f5f4c9ac0a78880032e4256242c366ca4724c6eb4a916dd4b0cc005f98614f6ee5b03d0a8b98381491efb7045701c78752cc829d6e62d1157f56ab9d339d8bd40cde9d2f8b3eff497dc1a8d7950101455624d02fd8e3e34296be7c4f7621ce720afd613280bb4a21f9bdca08a215aa19549143e4a0f82468b42c3fcebeeed8d31d8afd661b9532014b18c9754b5fc42847807a68a4586b7a47b3bb4ecd50b1c3842a38ea5e27b7ae0f6934690437528815902ebf14e7f4a599cc222904a29b9ab3cbcfdc046fec461b39bb13e1ccfea31af4c64a0ae5e1425428dcb4d804a030494811441b5be1809e6a508f0804ee79708010070c5422e69172d016bd0fb579eba78ec485a071dfbabad02549255fd17aae6ef6f1893fd347e174fe83643c10e792a669de045f69d51543ca0e50ca08474cb51da0c92dcb4c4127be8b3bb9ffed45b55b38aa1755f6fdab159b48e486f8c31160b6cdeab731714b22db4f0d57ae8fc8a900ee3db3cb6a564cbe312bfcb9f246a59bdca2e17de0ee5d51e5301329b89c113625 請輸入密碼以閱讀此篇私密文章。","link":"/2023/01/30/2023/2023_01_30-ITG_Work/"},{"title":"呼叫Mac系統設定頁面","text":"在程式中有時候需要呼叫系統的設定頁面，在MAC OS 13以前可以從/System/Library/PreferencePanes/中找到相對應的設定頁面． 如時間設定，我們可以使用DateAndTime.prefPane來叫出時間設定頁面． Test.js12NSURL *url = [NSURL fileURLWithPath:@&quot;/System/Library/PreferencePanes/DateAndTime.prefPane&quot;];[[NSWorkspace sharedWorkspace] openURL:url]; 但在MAC OS 13以後，已經將許多設定頁面移出PreferencePanes，需要使用x-apple.systempreferences的方式來呼叫． 相關設定可從System/Applications/System Settings.app/Contents/Resources/Sidebar.plist中找到． 如Screen Lock頁面為com.apple.Lock-Screen-Settings.extension Test.js12NSString *urlString = @&quot;x-apple.systempreferences:com.apple.Lock-Screen-Settings.extension&quot;;[[NSWorkspace sharedWorkspace] openURL:[NSURL URLWithString:urlString]];","link":"/2023/03/23/2023/2023_03_24-mac_system_url/"},{"title":"解析Mac Crash Log - ips file","text":"在開發Mac App 遇到Crash 時，測試人員只會從Mac Crash Report中撈取ips檔案提供分析. 但ips檔案中只有source code位址，因而無法正確知道是在那一行Crash. 此時我們可以借助XCode中的package來解析文件 CoreSymbolicationDT路徑1Xcode.app/Contents/SharedFrameworks/CoreSymbolicationDT.framework/Versions/A/Resources 將ips檔案和dSYM檔複製此路徑中，並打開終端機 輸入指令 Terminal1python3 CrashSymbolicator.py -d XXX.app.dSYM -o /Users/nick/XXXApp.crash -p XXX.ips 解析後打開XXXApp.crash，再根據ips Crash的位址即可得知是那一行Crash.","link":"/2024/06/20/2024/2024_06_20-mac_app_analyze_ips/"},{"title":"NSTextField 最大長度","text":"NSTextField 並沒有支援設定最大長度的屬性，在UI設計畫面(.xib)也沒有可以設定的地方. 因此我們只能借助Formatter的特性來設計。 Step 1: 建立Custom Formatter.h &amp; .m files Formatter.h12345678@interface TextLimitedFormatter : NSFormatter{ }@property int maxLength;@end Formatter.m12345678910111213141516171819202122232425262728#import &lt;Foundation/Foundation.h&gt;#import &quot;TextLimitedFormatter.h&quot;@implementation TextLimitedFormatter@synthesize maxLength;-(id)init{ if (self = [super init]) { maxLength = 255; } return self;}- (BOOL)isPartialStringValid:(NSString **)partialStringPtr proposedSelectedRange:(NSRangePointer)proposedSelRangePtr originalString:(NSString *)origString originalSelectedRange:(NSRange)origSelRange errorDescription:(NSString **)error { if ([*partialStringPtr length] &gt; maxLength) { return NO; } return YES;}@end Step 2: 設定NSTextFiled Formatter AppDelegate.m1234TextLimitedFormatter *formatter = [[TextLimitedFormatter alloc] init];formatter.maxLength = 8; //限制字元數_text_LimitInput.formatter = formatter; 初始化TextLimitedFormatter後，即可設定變數maxLength，最後再設定NSTextFiled.formatter 即可.","link":"/2024/07/02/2024/2024_07_02-textfield_limited-length/"},{"title":"XCode 16 build error - DarwinFoundation","text":"升上Mac OS 15 beta 及 Xcode 16 beta後，發生Webkit library 無法編譯成功的問題. 編譯時 Newwork.framework/nw_object.h 無法找到物件 DarwinFoundation 解決方式在Project 的 Targets 中的Build Settings，找到Search Paths -&gt; System Framework Search paths 增加項目 System Framework Search paths1$(SDKROOT)/System/Library/Frameworks 並且將此新增項目修改至第一項後, 重新Clean Build Folder並重新編譯即可。","link":"/2024/07/05/2024/2024_07_05-nw_object_build_error/"},{"title":"籃球購買心得","text":"每次到了要換球的時刻，總是會上網搜尋籃球評價，但目前所搜尋到的只更新至2023年。 因此一時興起，也來分享自己所買過的籃球。 雖然摸過的球還沒有很多，且每個人對於籃球的手感也不同，但也可以提供大家買球前的參考。 Witness 十字紋籃球 價格: 450 (2018年購入) 優點: 便宜，手感好，耐磨 缺點: 重量太輕 這是我第一次使用非大牌的籃球，因為網路文章推薦，對於十字紋籃球也很好奇，所以買來試試看。 很特殊的手感，不用特別訓球就很好抓，所以後來我都蠻愛用十字紋籃球，價格也很便宜。 但拿去球場，大家覺得這顆球偏輕，投出去的球容易飄。就算把氣灌飽，大家也不會拿它來實戰。 Better 十字紋籃球價格: 450 (2019年購入) 優點: 便宜，手感好，耐磨缺點: 重量偏輕 這應該是Witness 十字紋籃球的後繼版，重量有稍重一些，但和Molten籃球相比，還是偏輕。 所以依舊是實戰中不會被挑中的籃球。 Witness NJ 十字紋籃球價格: 450 (2022/11購入) OLD WAY 十字紋籃球價格: 350 (2024/08購入) 優點: 便宜，手感好，耐磨缺點: 重量偏輕 偏好十字紋籃球的我，還是想找到適合實戰的籃球，因此也購入的這兩款相較便宜的來試試看。 但依舊是重量偏輕，只適合自己投投球當練習。 目前也有鎖定Vega 2800當下顆目標，看看有名的牌子會不會作工較好，如果有推薦的十字紋籃球也歡迎推薦給我 Wilson Evolution 價格: 1700 ~ 2100 (2023/11 購入) 優點: 手感好，重量適中缺點: 中價位，不耐磨，沾沙易滑 一直以來沒買過超過1000元的籃球，這次想試試看所謂的室內球，因此鎖定了目前NBA所使用牌子: Wilson。 這顆球手感很好，重量適中，也不需要訓球即可開打。 拿到球場給球友試打，大家覺得這球很吃準度，因為彈性太好了，稍微碰到框就會彈出去。 想要偶爾靠運氣進的球，別想了，哈哈。 室內球一般來說只要沾到沙就會很滑，有手汗也容易滑，所以買這顆球的朋友要考慮到這兩個缺點。 以下籃球是在外面打球時，球友購入的球，並非自己長期擁有。所以可能只打過一兩次。 Conti 7000 pro 摸起來感覺比較軟Q，接到隊友傳球時，有時會滑手但後來就習慣了。 投球感覺跟Wilson Evolution差不多，重量適中，但碰框也很彈，所以也很吃準度。 官網描述為雙層皮構造，應該算耐磨，但價格比Wilson Evolution貴100 ~ 200之間。 總結根據預算考量，平時室外練投時，我會選擇使用十字紋籃球系列，雖然重量偏輕，但磨壞了也不會心痛。 在室內場使用Molten, Wilson, Nike等較重的球，可能就需要點時間適應一下。 室內球會推薦Molten GF7X (雖然已經停產) 或是 BG4500，就以前在外面打球所拿過得球來說，目前Molten系列不論是重量，彈性，手感來講都算中規中矩。待之後買了這兩顆再來補上評價囉 Reference 籃球購買心得分享與推薦 各品牌籃球比較與推薦CP值高的室外籃球","link":"/2024/10/04/2024/2024_10_04-backetball/"},{"title":"Android Firebase 使用Email認證與登入","text":"開始之前, 需要先完成Firebase的註冊和AndroidStudio的環境設定請參考文章Android - Firebase 註冊Android - Firebase 專案開發準備工作 接下來我們會以Database的讀寫, 來測試Email認證成功後, 是否可讀到資料庫資訊. 在Android-開發Firebase專案-Database篇中提到, 如果使用預設的安全性時, 是無法取得Firebase的資料. 因此我們必須先認證後, 才能讀取資料. Step 1: Connect to Firebase 如果有在Android-開發Firebase專案-Database篇中設定過, 可跳過此步驟 若專案還未連接過Firebase, 請參閱Android-開發Firebase專案-Database篇中的 Step 1 ~ Step 2 並在Step 2 將選擇Realtime Database更改為選擇「Authentication」, 再點擊「Email and password authentication」 Step 2: 將 Authentication 引入 Module 選取「Add Firebase Authentication to your app」 Step 3: 建立Email認證 到Firebase網頁的專案頁面中, 點擊左邊的「Authentication」再選取「登入方式」TAB將「電子郵件/密碼」選項打開 Step 4: 檢查是否已登入 到主程式中, 先取得Firebase Instance 1private FirebaseAuth fileAuth = FirebaseAuth.getInstance(); 建立一個LoginActivity, 來輸入帳號密碼 設定授權狀態監聽器 AuthStateListener, 當未登入時, 開啟登入畫面LoginActivity 123456789101112private FirebaseAuth.AuthStateListener authStateListener;authStateListener = new FirebaseAuth.AuthStateListener() { @Override public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) { FirebaseUser user = firebaseAuth.getCurrentUser(); if (user==null) { startActivity(new Intent(MainActivity.this, LoginActivity.class)); }else{ // TODO after login } }}; 在onStart階段註冊監聽, onStop階段取消監聽 12345678910111213@Overrideprotected void onStart() { super.onStart(); fileAuth.addAuthStateListener(authStateListener);}@Overrideprotected void onStop() { if (authStateListener != null){ fileAuth.removeAuthStateListener(authStateListener); } super.onStop();} Step 5: 登入Firebase 在LoginActivity.java / attemptLogin 函數中, 我們不用預設的AsyncTask : UserLoginTask來登入, 改為FirebaseAuth 的登入方式 123456789101112131415161718192021//mAuthTask = new UserLoginTask(email, password);//mAuthTask.execute((Void) null);FirebaseAuth auth = FirebaseAuth.getInstance();auth.signInWithEmailAndPassword(email, password) .addOnSuccessListener(new OnSuccessListener&lt;AuthResult&gt;() { @Override public void onSuccess(AuthResult authResult) { Log.d(TAG, &quot;登入成功&quot;); showProgress(false); finish(); } }) .addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Log.w(TAG, &quot;登入失敗，請檢查email/password&quot;); showProgress(false); finish(); } }); Step 6: 登入成功後, 更新Database 程式一開始時, 由於還未登入認證, 所以無法取得Firebase的資料Log 顯示如下 登入的結果會由MainActivity 的 FirebaseAuth.AuthStateListener() 返回結果當登入成功時, 我們設置FirebaseDatabase 12345678910111213141516authStateListener = new FirebaseAuth.AuthStateListener() { @Override public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) { Log.d(TAG, &quot;onAuthStateChanged&quot;); FirebaseUser user = firebaseAuth.getCurrentUser(); if (user==null) { Log.d(TAG, &quot;Try to Login: &quot;); startActivity(new Intent(MainActivity.this, LoginActivity.class)); } else { Log.d(TAG, &quot;Login Success&quot;); FirebaseDatabase fireDB = FirebaseDatabase.getInstance(); DatabaseReference myRef = fireDB.getReference(&quot;聯絡人&quot;); myRef.addChildEventListener(MainActivity.this); } }}; Step 7: Logout 一般而言, 當登入成功後, 倘若下一次希望能夠自動登入使用者帳密時,需要程式開發人員自行撰寫code, 去紀錄使用者登入的帳密. Friebase已在底層做好此功能, 只要驗證過一次, 下次再執行App時, 就能自動登入. 若要使用者下次執行App時, 需要再輸入帳密時可在onDestory階段, 執行FirebaseAuth.signOut() 即可 12345@Overrideprotected void onDestroy() { fileAuth.signOut(); super.onDestroy();} Source Code MainActivity.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.database.ChildEventListener;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import android.content.Intent;import android.support.annotation.NonNull;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.util.Log;import android.widget.ArrayAdapter;import android.widget.ListView;public class MainActivity extends AppCompatActivity implements ChildEventListener { ArrayAdapter&lt;String&gt; fileDBAdapter; private FirebaseAuth fileAuth; private FirebaseAuth.AuthStateListener authStateListener; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ListView list = (ListView) findViewById(R.id.listView); fileDBAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_list_item_1, android.R.id.text1); list.setAdapter(fileDBAdapter); fileAuth = FirebaseAuth.getInstance(); authStateListener = new FirebaseAuth.AuthStateListener() { @Override public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) { Log.e(&quot;Nick&quot;, &quot;onAuthStateChanged&quot;); FirebaseUser user = firebaseAuth.getCurrentUser(); if (user==null) { Log.e(&quot;Nick&quot;, &quot;Try to Login: &quot;); startActivity(new Intent(MainActivity.this, LoginActivity.class)); } else { Log.e(&quot;Nick&quot;, &quot;Login Success&quot;); FirebaseDatabase fireDB = FirebaseDatabase.getInstance(); DatabaseReference myRef = fireDB.getReference(&quot;聯絡人&quot;); myRef.addChildEventListener(MainActivity.this); } } }; } @Override protected void onStart() { super.onStart(); fileAuth.addAuthStateListener(authStateListener); } @Override protected void onStop() { if (authStateListener != null){ fileAuth.removeAuthStateListener(authStateListener); } super.onStop(); } @Override protected void onDestroy() { fileAuth.signOut(); super.onDestroy(); } @Override public void onChildAdded(DataSnapshot dataSnapshot, String s) { fileDBAdapter.add( String.valueOf(dataSnapshot.child(&quot;name&quot;).getValue())); } @Override public void onChildRemoved(DataSnapshot dataSnapshot) { fileDBAdapter.remove( String.valueOf(dataSnapshot.child(&quot;name&quot;).getValue())); } @Override public void onChildChanged(DataSnapshot dataSnapshot, String s) { } @Override public void onChildMoved(DataSnapshot dataSnapshot, String s) { } @Override public void onCancelled(DatabaseError databaseError) { }} LoginActivity.javaimport com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.firebase.auth.AuthResult;import com.google.firebase.auth.FirebaseAuth;import android.animation.Animator;import android.animation.AnimatorListenerAdapter;import android.annotation.TargetApi;import android.content.pm.PackageManager;import android.support.annotation.NonNull;import android.support.design.widget.Snackbar;import android.support.v7.app.AppCompatActivity;import android.app.LoaderManager.LoaderCallbacks;import android.content.CursorLoader;import android.content.Loader;import android.database.Cursor;import android.net.Uri;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.provider.ContactsContract;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.inputmethod.EditorInfo;import android.widget.ArrayAdapter;import android.widget.AutoCompleteTextView;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import java.util.ArrayList;import java.util.List;import static android.Manifest.permission.READ_CONTACTS;/** * A login screen that offers login via email/password. */public class LoginActivity extends AppCompatActivity implements LoaderCallbacks&lt;Cursor&gt; { /** * Id to identity READ_CONTACTS permission request. */ private static final int REQUEST_READ_CONTACTS = 0; /** * A dummy authentication store containing known user names and passwords. * TODO: remove after connecting to a real authentication system. */ private static final String[] DUMMY_CREDENTIALS = new String[]{ &quot;foo@example.com:hello&quot;, &quot;bar@example.com:world&quot; }; /** * Keep track of the login task to ensure we can cancel it if requested. */ private UserLoginTask mAuthTask = null; // UI references. private AutoCompleteTextView mEmailView; private EditText mPasswordView; private View mProgressView; private View mLoginFormView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_login); // Set up the login form. mEmailView = (AutoCompleteTextView) findViewById(R.id.email); populateAutoComplete(); mPasswordView = (EditText) findViewById(R.id.password); mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() { @Override public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) { if (id == R.id.login || id == EditorInfo.IME_NULL) { attemptLogin(); return true; } return false; } }); Button mEmailSignInButton = (Button) findViewById(R.id.email_sign_in_button); mEmailSignInButton.setOnClickListener(new OnClickListener() { @Override public void onClick(View view) { attemptLogin(); } }); mLoginFormView = findViewById(R.id.login_form); mProgressView = findViewById(R.id.login_progress); } private void populateAutoComplete() { if (!mayRequestContacts()) { return; } getLoaderManager().initLoader(0, null, this); } private boolean mayRequestContacts() { if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) { return true; } if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) { return true; } if (shouldShowRequestPermissionRationale(READ_CONTACTS)) { Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE) .setAction(android.R.string.ok, new View.OnClickListener() { @Override @TargetApi(Build.VERSION_CODES.M) public void onClick(View v) { requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS); } }); } else { requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS); } return false; } /** * Callback received when a permissions request has been completed. */ @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { if (requestCode == REQUEST_READ_CONTACTS) { if (grantResults.length == 1 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) { populateAutoComplete(); } } } /** * Attempts to sign in or register the account specified by the login form. * If there are form errors (invalid email, missing fields, etc.), the * errors are presented and no actual login attempt is made. */ private void attemptLogin() { if (mAuthTask != null) { return; } // Reset errors. mEmailView.setError(null); mPasswordView.setError(null); // Store values at the time of the login attempt. String email = mEmailView.getText().toString(); String password = mPasswordView.getText().toString(); boolean cancel = false; View focusView = null; // Check for a valid password, if the user entered one. if (!TextUtils.isEmpty(password) &amp;&amp; !isPasswordValid(password)) { mPasswordView.setError(getString(R.string.error_invalid_password)); focusView = mPasswordView; cancel = true; } // Check for a valid email address. if (TextUtils.isEmpty(email)) { mEmailView.setError(getString(R.string.error_field_required)); focusView = mEmailView; cancel = true; } else if (!isEmailValid(email)) { mEmailView.setError(getString(R.string.error_invalid_email)); focusView = mEmailView; cancel = true; } if (cancel) { // There was an error; don't attempt login and focus the first // form field with an error. focusView.requestFocus(); } else { // Show a progress spinner, and kick off a background task to // perform the user login attempt. showProgress(true); //mAuthTask = new UserLoginTask(email, password); //mAuthTask.execute((Void) null); FirebaseAuth auth = FirebaseAuth.getInstance(); auth.signInWithEmailAndPassword(email, password) .addOnSuccessListener(new OnSuccessListener&lt;AuthResult&gt;() { @Override public void onSuccess(AuthResult authResult) { Log.e(&quot;Nick&quot;, &quot;登入成功&quot;); showProgress(false); finish(); } }) .addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Log.e(&quot;Nick&quot;, &quot;登入失敗，請檢查email/password&quot;); showProgress(false); finish(); } }); } } private boolean isEmailValid(String email) { //TODO: Replace this with your own logic return email.contains(&quot;@&quot;); } private boolean isPasswordValid(String password) { //TODO: Replace this with your own logic return password.length() &gt; 4; } /** * Shows the progress UI and hides the login form. */ @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2) private void showProgress(final boolean show) { // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow // for very easy animations. If available, use these APIs to fade-in // the progress spinner. if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR2) { int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime); mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE); mLoginFormView.animate().setDuration(shortAnimTime).alpha( show ? 0 : 1).setListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE); } }); mProgressView.setVisibility(show ? View.VISIBLE : View.GONE); mProgressView.animate().setDuration(shortAnimTime).alpha( show ? 1 : 0).setListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { mProgressView.setVisibility(show ? View.VISIBLE : View.GONE); } }); } else { // The ViewPropertyAnimator APIs are not available, so simply show // and hide the relevant UI components. mProgressView.setVisibility(show ? View.VISIBLE : View.GONE); mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE); } } @Override public Loader&lt;Cursor&gt; onCreateLoader(int i, Bundle bundle) { return new CursorLoader(this, // Retrieve data rows for the device user's 'profile' contact. Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI, ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION, // Select only email addresses. ContactsContract.Contacts.Data.MIMETYPE + &quot; = ?&quot;, new String[]{ContactsContract.CommonDataKinds.Email .CONTENT_ITEM_TYPE}, // Show primary email addresses first. Note that there won't be // a primary email address if the user hasn't specified one. ContactsContract.Contacts.Data.IS_PRIMARY + &quot; DESC&quot;); } @Override public void onLoadFinished(Loader&lt;Cursor&gt; cursorLoader, Cursor cursor) { List&lt;String&gt; emails = new ArrayList&lt;&gt;(); cursor.moveToFirst(); while (!cursor.isAfterLast()) { emails.add(cursor.getString(ProfileQuery.ADDRESS)); cursor.moveToNext(); } addEmailsToAutoComplete(emails); } @Override public void onLoaderReset(Loader&lt;Cursor&gt; cursorLoader) { } private void addEmailsToAutoComplete(List&lt;String&gt; emailAddressCollection) { //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list. ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(LoginActivity.this, android.R.layout.simple_dropdown_item_1line, emailAddressCollection); mEmailView.setAdapter(adapter); } private interface ProfileQuery { String[] PROJECTION = { ContactsContract.CommonDataKinds.Email.ADDRESS, ContactsContract.CommonDataKinds.Email.IS_PRIMARY, }; int ADDRESS = 0; int IS_PRIMARY = 1; } /** * Represents an asynchronous login/registration task used to authenticate * the user. */ public class UserLoginTask extends AsyncTask&lt;Void, Void, Boolean&gt; { private final String mEmail; private final String mPassword; UserLoginTask(String email, String password) { mEmail = email; mPassword = password; } @Override protected Boolean doInBackground(Void... params) { // TODO: attempt authentication against a network service. try { // Simulate network access. Thread.sleep(2000); } catch (InterruptedException e) { return false; } for (String credential : DUMMY_CREDENTIALS) { String[] pieces = credential.split(&quot;:&quot;); if (pieces[0].equals(mEmail)) { // Account exists, return true if the password matches. return pieces[1].equals(mPassword); } } // TODO: register the new account here. return true; } @Override protected void onPostExecute(final Boolean success) { mAuthTask = null; showProgress(false); if (success) { finish(); } else { mPasswordView.setError(getString(R.string.error_incorrect_password)); mPasswordView.requestFocus(); } } @Override protected void onCancelled() { mAuthTask = null; showProgress(false); } }}","link":"/2017/04/20/2017/2017_04_20-android-firebase-database-auth/"},{"title":"Hexo Icarus 修改歷程","text":"Blog 客製化更改背景色更改$body-background-color ~\\themes\\icarus\\include\\style\\base.styl1$body-background-color ?= $blue 參數路徑： ~\\node_modules\\bulma-stylus\\stylus\\utilities\\initial-variables.styl123456$orange ?= hsl(16, 100%, 50%)$yellow ?= hsl(48, 100%, 67%)$green ?= hsl(141, 53%, 53%)$turquoise ?= hsl(171, 100%, 41%)$cyan ?= hsl(204, 71%, 53%)$blue ?= hsl(219, 97%, 14%) Header取消search旁邊的link 將links mark 起來 ~\\_config.icarus.yml12345678910111213navbar: # Navigation menu items menu: Home: / Archives: /archives Categories: /categories Tags: /tags About: /about # Links to be shown on the right of the navigation bar # links: # Download on GitHub: # icon: fab fa-github # url: 'https://github.com/ppoffice/hexo-theme-icarus' Footer修改Footer背景顏色~\\themes\\icarus\\include\\style\\base.styl1$footer-background-color ?= #E9F4FA 修改footer link~\\_config.icarus.yml12345678910footer: # Links to be shown on the right of the footer section links: CC BY-NC-SA 4.0: icon: - fab fa-creative-commons - fab fa-creative-commons-by - fab fa-creative-commons-nc - fab fa-creative-commons-sa url: 'https://creativecommons.org/licenses/by-nc-sa/4.0/' 更改上一篇/下一篇文字顏色如果使用深色背景時，預設文字顏色會看不清楚。 更改post-navigation-fg ~\\themes\\icarus\\include\\style\\pagination.styl1$post-navigation-fg ?= #EEEEEE 增加Disqus評論先到Disqus註冊帳號，相關方式請搜尋Disqus註冊。 ~\\_config.icarus.yml1234567comment: # Name of the comment plugin type: disqus enable: true shortname: 'your_disqus_short_name' count: true lazyload: false 繼續閱讀按鈕放置右方在首頁檢視時，讓Tag也在文章下顯示，並將繼續閱讀按鈕放置右方。 ~\\themes\\icarus\\layout\\common\\article.jsx1234567891011&lt;hr style=&quot;height:1px;margin:1rem 0&quot;/&gt; &lt;div className=&quot;level is-mobile is-flex&quot;&gt; {/* Tags */} {page.tags &amp;&amp; page.tags.length ? &lt;div class=&quot;article-tags is-size-7 is-uppercase&quot;&gt; &lt;i class=&quot;fas fa-tags has-text-grey&quot;&gt;&lt;/i&gt;&amp;nbsp; {page.tags.map((tag, index) =&gt; { return &lt;a class=&quot;link-muted&quot; rel=&quot;tag&quot; href={url_for(tag.path)}&gt;{tag.name}{index !== page.tags.length-1? ', ':''}&lt;/a&gt;; })} &lt;/div&gt; : null} {/* &quot;Read more&quot; button */} {index &amp;&amp; page.excerpt ? &lt;a class=&quot;article-more button is-small is-size-7&quot; href={`${url_for(page.link || page.path)}#more`}&gt;&lt;i class=&quot;fas fa-book-reader has-text-grey&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;{__('article.more')}&lt;/a&gt; : null} /div&gt; 更改繼續閱讀文字顏色更改繼續閱讀icon顏色，將has-text-grey改為has-text-info ~\\themes\\icarus\\layout\\common\\article.jsx12{/* &quot;Read more&quot; button */}{index &amp;&amp; page.excerpt ? &lt;a class=&quot;article-more button is-small is-size-7&quot; href={`${url_for(page.link || page.path)}#more`}&gt;&lt;i class=&quot;fas fa-book-reader has-text-info&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;{__('article.more')}&lt;/a&gt; : null} 更改繼續閱讀文字顏色，在article.styl中的article-more增加color屬性。 ~\\themes\\icarus\\include\\style\\article.styl1234&amp;.article .article-more @extend .button.is-light color: hsl(204, 86%, 53%) Card WidgetCard Widget增加浮動陰影在card.styl增加hover變化 ~\\themes\\icarus\\include\\style\\card.styl12345.card overflow: visible border-radius: $card-radius &amp;:hover box-shadow: 0 6px 15px rgba(255,168,63,0.5), 0 0 1px rgba(255,168,63,0.25) 增加box-shadow動畫效果 ~\\themes\\icarus\\source\\js\\animation.js12345setTimeout(() =&gt; { $('body &gt; .navbar, body &gt; .section, body &gt; .footer').forEach(element =&gt; { element.style.opacity = '1'; element.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out, box-shadow 0.3s ease-in-out'; }); ~\\themes\\icarus\\source\\js\\animation.js12345678$(selector).forEach(element =&gt; { setTimeout(() =&gt; { element.style.opacity = '1'; element.style.transform = ''; element.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out, box-shadow 0.3s ease-in-out'; }, i * 100); i++;}); 目錄黏貼原本只支援整欄黏貼，修改成可讓目錄單獨隨文章Scroll時，上下移動。 增加toc.addClass(‘column-left is-sticky’); ~\\themes\\icarus\\source\\js\\main.js1234const $toc = $('#toc'); if ($toc.length &gt; 0) { $toc.addClass('column-left is-sticky'); const $mask = $('&lt;div&gt;'); 增加 #toc ~\\themes\\icarus\\include\\style\\widget.styl1234567widget .menu-list #toc max-height: calc(100vh - 22px) overflow-y: scroll 將最新文章, Tag等設定在右邊~\\_config.icarus.yml1234# Recent posts widget configurations (最新文章)- position: right type: recent_posts 取消 SUBSCRIBE FOR UPDATES~\\_config.icarus.yml12345678# Google FeedBurner email subscription widget configurations # Where should the widget be placed, left sidebar or right sidebar # position: left # type: subscribe_email # Hint text under the email input # description: # Feedburner ID # feedburner_id: '' 取消 FOLLOW.IT~\\_config.icarus.yml12345678910# Follow.it email subscription widget configurations # Where should the widget be placed, left sidebar or right sidebar # position: left # type: followit # Hint text under the email input # description: # Subscription form action URL # action_url: '' # Feed claiming verification code # verification_code: '' 取消 Google AdSense~\\_config.icarus.yml12345678# Google AdSense unit configurations # Where should the widget be placed, left sidebar or right sidebar # position: left # type: adsense # AdSense client ID # client_id: '' # AdSense AD unit ID # slot_id: '' 取消 ShareThis~\\_config.icarus.yml1234# share: # type: sharethis # URL to the ShareThis share plugin script # install_url: '' 優化不同屏幕下顯示設定加上is-3-column ~\\themes\\icarus\\include\\style\\responsive.styl1234567+widescreen() .is-1-column .container, .is-2-column .container max-width: $desktop - 2 * $gap width: $desktop - 2 * $gap .is-3-column .container max-width: $widescreen - $gap width: $widescreen - $gap ~\\themes\\icarus\\include\\style\\responsive.styl123456789101112+fullhd() .is-2-column .container max-width: $widescreen - 2 * $gap width: $widescreen - 2 * $gap .is-1-column .container max-width: $desktop - 2 * $gap width: $desktop - 2 * $gap .is-3-column .container max-width: $fullhd - 2 * $gap width: $fullhd - 2 * $gap 增加密碼輸入錯誤樣式~\\themes\\icarus\\include\\style\\article.styl1234.password-error { box-shadow: 0px 4px 12px rgba(0,0,0,0.15); border-radius: 4px;} 更改按鈕顏色目前按鈕顏色是根據base.styl中的primary顏色而定，所以更改primary設定即可。 ~\\themes\\icarus\\include\\style\\base.styl1$primary ?= #FF4500 文章設定為兩欄模式由於我們將一些Card放到右邊的關係，所以首頁和文章都會顯示為三欄模式。 但我們希望看文章時，只顯示兩欄模式，讓使用者專注於文章的瀏覽，可透過以下的方式設定為首頁為三欄模式，觀看文章時為兩欄模式。 更改columnCount ~\\themes\\icarus\\layout\\layout.jsx1const columnCount = (['page', 'post'].includes(page.layout)) ? 2 : Widgets.getColumnCount(config.widgets, config, page); 但由於是強制設定為兩欄模式，所以右邊的card會被擠壓到，因此我們需要將右邊的card隱藏起來。 在formatWidgets函式中，增加一個變數page，並增加判斷如果是右邊的widget，則不顯示在page or post文章中。 ~\\themes\\icarus\\layout\\common\\widgets.jsx123456789101112131415161718192021function formatWidgets(widgets, page) { const result = {}; if (Array.isArray(widgets)) { widgets.filter(widget =&gt; typeof widget === 'object').forEach(widget =&gt; { if ('position' in widget &amp;&amp; (widget.position === 'left' || widget.position === 'right')) { if (!(widget.position in result)) { if (widget.position === 'right') { if (!['page', 'post'].includes(page.layout)) { result[widget.position] = [widget]; } } else { result[widget.position] = [widget]; } } else { result[widget.position].push(widget); } } }); } return result;} 在程式一開始render時，帶入page參數。 ~\\themes\\icarus\\layout\\common\\widgets.jsx123456class Widgets extends Component { render() { const { site, config, helper, page, position} = this.props; const widgets = formatWidgets(config.widgets, page)[position] || []; }} 文章內容將標題放到Matadata上方先將Title移到Metadata上方。 ~\\themes\\icarus\\layout\\common\\article.jsx12345{/* Title */}{page.title !== '' ? &lt;h1 class=&quot;title is-3 is-size-4-mobile&quot;&gt;{index ? &lt;a class=&quot;link-muted&quot; href={url_for(page.link || page.path)}&gt;{page.title}&lt;/a&gt; : page.title}&lt;/h1&gt; : null}{/* Metadata */} 再客製化讓標題在文章中置中顯示，在首頁靠左顯示。 ~\\themes\\icarus\\layout\\common\\article.jsx1234{/* Title */}{index ? &lt;a className=&quot;has-link-black-ter is-size-3 is-size-4-mobile &quot; href={url_for(page.link || page.path)}&gt; {page.title}&lt;/a&gt; : [&lt;h1 className=&quot;title has-text-centered is-size-3 is-size-4-mobile has-text-weight-normal&quot;&gt;{page.title}&lt;/h1&gt;]}{/* Metadata */} 設定Metadata將每個Metadata新增icon，使用&amp;#9474;做隔開，並將閱讀時間和字數統計分開及取消作者欄位。 ~\\themes\\icarus\\layout\\common\\article.jsx1234567891011121314151617181920212223242526272829303132333435&lt;div class=&quot;level-left&quot;&gt;{/* Creation Date */} {page.date &amp;&amp; &lt;span class=&quot;level-item&quot;&gt; &lt;i className=&quot;far fa-calendar-alt&quot;&gt;&amp;nbsp;&lt;/i&gt; &lt;time dateTime={date_xml(page.date)} title={date_xml(page.date)}&gt;{date(page.date)}&lt;/time&gt; &lt;/span&gt;}&lt;span class=&quot;level-item&quot; &gt;&amp;#9474;&lt;/span&gt;{/* Last Update Date */}{shouldShowUpdated &amp;&amp; &lt;span class=&quot;level-item&quot; dangerouslySetInnerHTML= { {'article.updated_at', `&lt;i class=&quot;far fa-edit&quot;&gt;&amp;nbsp;&lt;/i&gt;&amp;nbsp;&lt;/i&gt;&lt;time dateTime=&quot;${date_xml(page.updated)}&quot; title=&quot;${new Date(page.updated).toLocaleString()}&quot;&gt;${date(page.updated)}&lt;/time&gt;`} }&gt;&lt;/span&gt;}&lt;span class=&quot;level-item&quot; &gt;&amp;#9474;&lt;/span&gt;{/* Read time */} {article &amp;&amp; article.readtime &amp;&amp; article.readtime === true ? &lt;span class=&quot;level-item&quot;&gt; &lt;i class=&quot;far fa-clock&quot;&gt;&amp;nbsp;&lt;/i&gt; {(() =&gt; {const words = getWordCount(page._content); const time = moment.duration((words / 150.0) * 60, 'seconds'); return `${_p('article.read_time', time.locale(index ? indexLaunguage : language).humanize())}`; })()} &lt;/span&gt; : null}&lt;span class=&quot;level-item&quot; &gt;&amp;#9474;&lt;/span&gt; {/* Words */} {article &amp;&amp; article.readtime &amp;&amp; article.readtime === true ? &lt;span class=&quot;level-item&quot;&gt; &lt;i class=&quot;far fa-file-word&quot;&gt;&amp;nbsp;&lt;/i&gt; {(() =&gt; { const words = getWordCount(page._content); return `${_p('article.word_count', words)}`; })()}&lt;/span&gt; : null}{/* Visitor counter */} {!index &amp;&amp; plugins &amp;&amp; plugins.busuanzi === true ? &lt;span class=&quot;level-item&quot; id=&quot;busuanzi_container_page_pv&quot; dangerouslySetInnerHTML={ { __html: _p('plugin.visit_count', '&lt;span class=&quot;level-item&quot; &gt;&amp;#9474;&lt;/span&gt;&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;0&lt;/span&gt;') } }&gt;&lt;/span&gt; : null}&lt;/div&gt; 將Metadata設定為文章閱讀時置中顯示，首頁靠左顯示。 在return前加入contentInfoHeaderClass ~\\themes\\icarus\\layout\\common\\article.jsx123const contentInfoHeaderClass = index ? &quot;article-meta is-size-7 is-uppercase level is-mobile&quot; : &quot;article-meta is-size-7 is-uppercase level-item is-mobile has-text-centered&quot;;return &lt;Fragment&gt; {/* Main content */} 在Metadata的上一層修改class為{contentInfoHeaderClass}。 ~\\themes\\icarus\\layout\\common\\article.jsx1234{/* Metadata */}{page.layout !== 'page' ? &lt;div class={contentInfoHeaderClass}&gt; &lt;div class=&quot;level-left&quot;&gt; {/* Creation Date */} 原先樣式為 修改後的樣式為 修改Metadata文字內容 ~\\themes\\icarus\\languages\\zh-TW.yml12345article: read_time: '閱讀時長 ≈ %s' word_count: one: '本文字數 ≈ %d個字' other: '本文字數 ≈ %d個字' 增加標題自動計數~\\themes\\icarus\\include\\style\\article.styl12345678910/* --------------------------------- * Add Autocount * --------------------------------- */.article {counter-reset:section}.article h2{counter-reset:sub-section}.article h3{counter-reset:composite}.article h4{counter-reset:detail}.article h2:before{content:counter(section) &quot; &quot;;counter-increment:section}.article h3:before{content:counter(section) &quot;.&quot; counter(sub-section) &quot; &quot;;counter-increment:sub-section}.article h4:before{content:counter(section) &quot;.&quot; counter(sub-section) &quot;.&quot; counter(composite) &quot; &quot;;counter-increment:composite} HightlightColorquote註冊colorquote的 extend tag，這樣之後寫文章時，可以使用這個Tag。 在themes\\icarus\\scripts\\建立一個名為 colorquote 的 JS 檔。 ~\\themes\\icarus\\scripts\\colorquote.js123456789101112131415161718/*** Color Quote Block Tag* @description Color Quote Block* @example* &lt;% colorquote [type] %&gt;* content* &lt;% endcolorquote %&gt;*/hexo.extend.tag.register('colorquote', function (args, content) { var type = args[0]; var mdContent = hexo.render.renderSync({text: content, engine: 'markdown'}); if (type.includes(&quot;step&quot;)) { var num = type.substring(4); type = type.substring(0, 4); mdContent = hexo.render.renderSync({text: &quot;Step &quot; + num + &quot;: &quot;+ content, engine: 'markdown'}); } return '&lt;blockquote class=&quot;colorquote ' + type + '&quot;&gt;' + mdContent + '&lt;/blockquote&gt;';}, {ends: true}); 在themes\\icarus\\include\\style\\article.styl增加.colorquote ~\\themes\\icarus\\include\\style\\article.styl123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&amp;.article .content .colorquote position: relative; padding: 0.1em 1.5em; color: #4a4a4a; margin-bottom: 1em; &amp;:before content: &quot; &quot;; position: absolute; top: 50%; left: -14.5px; margin-top: -12px; width: 24px; height: 24px; border-radius: 50%; text-align: center; color: white; background-size: 16px 16px; background-position: 4px 4px; background-repeat: no-repeat; &amp;.info border-color: hsl(204, 86%, 53%); background-color: hsl(204, 86%, 93%); &amp;:before background-color: hsl(204, 86%, 53%); background-image: url(&quot;../img/info.svg&quot;); &amp;.success border-color: hsl(141, 71%, 48%); background-color: hsl(141, 70%, 88%); &amp;:before background-color: hsl(141, 71%, 48%); background-image: url(&quot;../img/check.svg&quot;); &amp;.warning border-color: hsl(48, 100%, 67%); background-color: hsl(48, 100%, 91%); &amp;:before background-color: hsl(48, 100%, 67%); background-image: url(&quot;../img/exclamation.svg&quot;); &amp;.danger border-color: hsl(348, 100%, 61%); background-color: hsl(348, 100%, 85%); &amp;:before background-color: hsl(348, 100%, 61%); background-image: url(&quot;../img/exclamation.svg&quot;); colorquote前面的圖片是一張圖片，可以從Minos主題這邊抓取。 將下載後的檔案放到~\\themes\\icarus\\source\\img\\中。 這樣我們就可以在文章中使用colorquote 12&lt;blockquote class=&quot;colorquote info&quot;&gt;&lt;p&gt;Example: info&lt;/p&gt;&lt;/blockquote&gt; Example: info 但是如果在colorquote中使用markdown語法會失效，因此我們在themes\\icarus\\scripts\\建立一個名為 tag 的 JS 檔。 內容如下： ~\\themes\\icarus\\scripts\\tag.js12345678910111213141516171819202122232425/*** Tags Filter* @description Fix the code block using ```&lt;code&gt;``` will render undefined in Nunjucks* https://github.com/hexojs/hexo/issues/2400*/const rEscapeContent = /&lt;escape(?:[^&gt;]*)&gt;([\\s\\S]*?)&lt;\\/escape&gt;/g;const placeholder = '\\uFFFD';const rPlaceholder = /(?:&lt;|&amp;lt;)\\!--\\uFFFD(\\d+)--(?:&gt;|&amp;gt;)/g;const cache = [];function escapeContent(str) { return '&lt;!--' + placeholder + (cache.push(str) - 1) + '--&gt;';}hexo.extend.filter.register('before_post_render', function(data) { data.content = data.content.replace(rEscapeContent, function(match, content) { return escapeContent(content); }); return data;});hexo.extend.filter.register('after_post_render', function(data) { data.content = data.content.replace(rPlaceholder, function() { return cache[arguments[1]]; }); return data;}); Code BlockDark Theme修改背景為Dark模式 原先為Code Block背景為白色 Light Theme: 將atom-one-light改為atom-one-dark ~\\_config.icarus.yml123456article: # Code highlight settings highlight: theme: atom-one-dark clipboard: true fold: unfolded Dark Theme: 相關Code Block樣式，可參考highlightjs 客製化背景色除了使用theme來更改Code Block的背景色外，我們可透過codeblock.styl來客製化背景色。 Code Block 主體背景色: 在.highlight-body增加 background ~\\themes\\icarus\\include\\style\\codeblock.styl123.highlight-body overflow: auto background: rgba(1, 6, 46, 0.95) Code Block Menu Bar 背景色: 修改$codeblock-caption-bg ~\\themes\\icarus\\include\\style\\codeblock.styl1$codeblock-caption-bg ?= rgba(1, 64, 135, 0.5) 客製化ScrollbarScrollbar相關設定檔位於 ~\\themes\\icarus\\include\\style\\base.styl 中 ~\\themes\\icarus\\include\\style\\base.styl1234567891011121314151617+desktop() ::-webkit-scrollbar width: 8px height: 8px ::-webkit-scrollbar-track border-radius: 3px background: rgba(0,0,0,0.06) box-shadow: inset 0 0 5px rgba(0,0,0,0.1) ::-webkit-scrollbar-thumb border-radius: 3px background: rgba(6, 73, 132,0.60) box-shadow: inset 0 0 10px rgba(0,0,0,0.2) ::-webkit-scrollbar-thumb:hover background: rgba(6, 73, 132,0.72)","link":"/2021/11/30/2021/2021_11-30-Hexo_Icarus_change_list/"}],"tags":[{"name":"cardview","slug":"cardview","link":"/tags/cardview/"},{"name":"shadow","slug":"shadow","link":"/tags/shadow/"},{"name":"RippleDrawable","slug":"RippleDrawable","link":"/tags/RippleDrawable/"},{"name":"button","slug":"button","link":"/tags/button/"},{"name":"toolbar","slug":"toolbar","link":"/tags/toolbar/"},{"name":"Bottom Sheets","slug":"Bottom-Sheets","link":"/tags/Bottom-Sheets/"},{"name":"ListView","slug":"ListView","link":"/tags/ListView/"},{"name":"LockScreen","slug":"LockScreen","link":"/tags/LockScreen/"},{"name":"藍芽","slug":"藍芽","link":"/tags/%E8%97%8D%E8%8A%BD/"},{"name":"NavigationBar","slug":"NavigationBar","link":"/tags/NavigationBar/"},{"name":"Tabview","slug":"Tabview","link":"/tags/Tabview/"},{"name":"TestCase","slug":"TestCase","link":"/tags/TestCase/"},{"name":"adb","slug":"adb","link":"/tags/adb/"},{"name":"LoadingView","slug":"LoadingView","link":"/tags/LoadingView/"},{"name":"Dialog","slug":"Dialog","link":"/tags/Dialog/"},{"name":"ImageView","slug":"ImageView","link":"/tags/ImageView/"},{"name":"Text","slug":"Text","link":"/tags/Text/"},{"name":"下拉式選單","slug":"下拉式選單","link":"/tags/%E4%B8%8B%E6%8B%89%E5%BC%8F%E9%81%B8%E5%96%AE/"},{"name":"PageView","slug":"PageView","link":"/tags/PageView/"},{"name":"模糊效果","slug":"模糊效果","link":"/tags/%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/"},{"name":"圖片縮放","slug":"圖片縮放","link":"/tags/%E5%9C%96%E7%89%87%E7%B8%AE%E6%94%BE/"},{"name":"Button","slug":"Button","link":"/tags/Button/"},{"name":"Firebase","slug":"Firebase","link":"/tags/Firebase/"},{"name":"ConstraintLayout","slug":"ConstraintLayout","link":"/tags/ConstraintLayout/"},{"name":"RelativeLayout","slug":"RelativeLayout","link":"/tags/RelativeLayout/"},{"name":"快捷鍵","slug":"快捷鍵","link":"/tags/%E5%BF%AB%E6%8D%B7%E9%8D%B5/"},{"name":"人臉偵測","slug":"人臉偵測","link":"/tags/%E4%BA%BA%E8%87%89%E5%81%B5%E6%B8%AC/"},{"name":"Permission","slug":"Permission","link":"/tags/Permission/"},{"name":"Camera","slug":"Camera","link":"/tags/Camera/"},{"name":"aar","slug":"aar","link":"/tags/aar/"},{"name":"漸變效果","slug":"漸變效果","link":"/tags/%E6%BC%B8%E8%AE%8A%E6%95%88%E6%9E%9C/"},{"name":"Clean Project Error","slug":"Clean-Project-Error","link":"/tags/Clean-Project-Error/"},{"name":"dlopen failed","slug":"dlopen-failed","link":"/tags/dlopen-failed/"},{"name":"NanoHttpd","slug":"NanoHttpd","link":"/tags/NanoHttpd/"},{"name":"GStreamer","slug":"GStreamer","link":"/tags/GStreamer/"},{"name":"JCIFS","slug":"JCIFS","link":"/tags/JCIFS/"},{"name":"TensorFlow","slug":"TensorFlow","link":"/tags/TensorFlow/"},{"name":"TTS","slug":"TTS","link":"/tags/TTS/"},{"name":"Display","slug":"Display","link":"/tags/Display/"},{"name":"影片截圖","slug":"影片截圖","link":"/tags/%E5%BD%B1%E7%89%87%E6%88%AA%E5%9C%96/"},{"name":"CursorLoader","slug":"CursorLoader","link":"/tags/CursorLoader/"},{"name":"image","slug":"image","link":"/tags/image/"},{"name":"開機畫面","slug":"開機畫面","link":"/tags/%E9%96%8B%E6%A9%9F%E7%95%AB%E9%9D%A2/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"RecyclerView","slug":"RecyclerView","link":"/tags/RecyclerView/"},{"name":"SQL","slug":"SQL","link":"/tags/SQL/"},{"name":"assets","slug":"assets","link":"/tags/assets/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"onConfigurationChanged","slug":"onConfigurationChanged","link":"/tags/onConfigurationChanged/"},{"name":"Http","slug":"Http","link":"/tags/Http/"},{"name":"mqtt","slug":"mqtt","link":"/tags/mqtt/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"ethernet","slug":"ethernet","link":"/tags/ethernet/"},{"name":"GifImageView","slug":"GifImageView","link":"/tags/GifImageView/"},{"name":"自動填入","slug":"自動填入","link":"/tags/%E8%87%AA%E5%8B%95%E5%A1%AB%E5%85%A5/"},{"name":"xcode","slug":"xcode","link":"/tags/xcode/"},{"name":"Z-Order","slug":"Z-Order","link":"/tags/Z-Order/"},{"name":"StatusBar","slug":"StatusBar","link":"/tags/StatusBar/"},{"name":"iOS","slug":"iOS","link":"/tags/iOS/"},{"name":"gaia","slug":"gaia","link":"/tags/gaia/"},{"name":"Visual Studio","slug":"Visual-Studio","link":"/tags/Visual-Studio/"},{"name":"java script","slug":"java-script","link":"/tags/java-script/"},{"name":"google sso","slug":"google-sso","link":"/tags/google-sso/"},{"name":"Java Script","slug":"Java-Script","link":"/tags/Java-Script/"},{"name":"ios","slug":"ios","link":"/tags/ios/"},{"name":"APN","slug":"APN","link":"/tags/APN/"},{"name":"http2","slug":"http2","link":"/tags/http2/"},{"name":"XCode","slug":"XCode","link":"/tags/XCode/"},{"name":"work","slug":"work","link":"/tags/work/"},{"name":"mac system page","slug":"mac-system-page","link":"/tags/mac-system-page/"},{"name":"ips","slug":"ips","link":"/tags/ips/"},{"name":"NSTextField","slug":"NSTextField","link":"/tags/NSTextField/"},{"name":"max length","slug":"max-length","link":"/tags/max-length/"},{"name":"Xcode","slug":"Xcode","link":"/tags/Xcode/"},{"name":"Webkit","slug":"Webkit","link":"/tags/Webkit/"},{"name":"Backetball","slug":"Backetball","link":"/tags/Backetball/"},{"name":"籃球購買心得","slug":"籃球購買心得","link":"/tags/%E7%B1%83%E7%90%83%E8%B3%BC%E8%B2%B7%E5%BF%83%E5%BE%97/"},{"name":"籃球推薦","slug":"籃球推薦","link":"/tags/%E7%B1%83%E7%90%83%E6%8E%A8%E8%96%A6/"}],"categories":[{"name":"Android","slug":"Android","link":"/categories/Android/"},{"name":"Button","slug":"Android/Button","link":"/categories/Android/Button/"},{"name":"CardView","slug":"Android/CardView","link":"/categories/Android/CardView/"},{"name":"Toolbar","slug":"Android/Toolbar","link":"/categories/Android/Toolbar/"},{"name":"Bottom Sheets","slug":"Android/Bottom-Sheets","link":"/categories/Android/Bottom-Sheets/"},{"name":"Z-Order","slug":"Android/Z-Order","link":"/categories/Android/Z-Order/"},{"name":"ListView","slug":"Android/ListView","link":"/categories/Android/ListView/"},{"name":"RippleDrawable","slug":"Android/RippleDrawable","link":"/categories/Android/RippleDrawable/"},{"name":"LockScreen","slug":"Android/LockScreen","link":"/categories/Android/LockScreen/"},{"name":"iOS","slug":"iOS","link":"/categories/iOS/"},{"name":"TestCase","slug":"Android/TestCase","link":"/categories/Android/TestCase/"},{"name":"adb","slug":"Android/adb","link":"/categories/Android/adb/"},{"name":"Spinner","slug":"iOS/Spinner","link":"/categories/iOS/Spinner/"},{"name":"Bluetooth","slug":"iOS/Bluetooth","link":"/categories/iOS/Bluetooth/"},{"name":"PageViewController","slug":"iOS/PageViewController","link":"/categories/iOS/PageViewController/"},{"name":"UIBlurEffect","slug":"iOS/UIBlurEffect","link":"/categories/iOS/UIBlurEffect/"},{"name":"UIImageView","slug":"iOS/UIImageView","link":"/categories/iOS/UIImageView/"},{"name":"UIVibrancyEffect","slug":"iOS/UIVibrancyEffect","link":"/categories/iOS/UIVibrancyEffect/"},{"name":"NavigationBar","slug":"iOS/NavigationBar","link":"/categories/iOS/NavigationBar/"},{"name":"UIButton","slug":"iOS/UIButton","link":"/categories/iOS/UIButton/"},{"name":"UITextField","slug":"iOS/UITextField","link":"/categories/iOS/UITextField/"},{"name":"Tabview","slug":"iOS/Tabview","link":"/categories/iOS/Tabview/"},{"name":"Firebase","slug":"Android/Firebase","link":"/categories/Android/Firebase/"},{"name":"ConstraintLayout","slug":"Android/ConstraintLayout","link":"/categories/Android/ConstraintLayout/"},{"name":"RelativeLayout","slug":"Android/RelativeLayout","link":"/categories/Android/RelativeLayout/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/categories/Ubuntu/"},{"name":"FaceDetector","slug":"Android/FaceDetector","link":"/categories/Android/FaceDetector/"},{"name":"Permission","slug":"Android/Permission","link":"/categories/Android/Permission/"},{"name":"Camera","slug":"Android/Camera","link":"/categories/Android/Camera/"},{"name":"aar","slug":"Android/aar","link":"/categories/Android/aar/"},{"name":"GradientDrawable","slug":"Android/GradientDrawable","link":"/categories/Android/GradientDrawable/"},{"name":"NanoHttpd","slug":"Android/NanoHttpd","link":"/categories/Android/NanoHttpd/"},{"name":"GStreamer","slug":"Android/GStreamer","link":"/categories/Android/GStreamer/"},{"name":"JCIFS","slug":"Android/JCIFS","link":"/categories/Android/JCIFS/"},{"name":"TensorFlow","slug":"Android/TensorFlow","link":"/categories/Android/TensorFlow/"},{"name":"LoadingView","slug":"iOS/LoadingView","link":"/categories/iOS/LoadingView/"},{"name":"TTS","slug":"Android/TTS","link":"/categories/Android/TTS/"},{"name":"Display","slug":"Android/Display","link":"/categories/Android/Display/"},{"name":"ScreenShot","slug":"Android/ScreenShot","link":"/categories/Android/ScreenShot/"},{"name":"CursorLoader","slug":"Android/CursorLoader","link":"/categories/Android/CursorLoader/"},{"name":"Image","slug":"Android/Image","link":"/categories/Android/Image/"},{"name":"Dialog","slug":"iOS/Dialog","link":"/categories/iOS/Dialog/"},{"name":"Boot","slug":"Android/Boot","link":"/categories/Android/Boot/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"ImageView","slug":"Android/ImageView","link":"/categories/Android/ImageView/"},{"name":"Text","slug":"Android/Text","link":"/categories/Android/Text/"},{"name":"RecyclerView","slug":"Android/RecyclerView","link":"/categories/Android/RecyclerView/"},{"name":"TextField","slug":"iOS/TextField","link":"/categories/iOS/TextField/"},{"name":"SQL","slug":"Android/SQL","link":"/categories/Android/SQL/"},{"name":"assets","slug":"Android/assets","link":"/categories/Android/assets/"},{"name":"onConfigurationChanged","slug":"Android/onConfigurationChanged","link":"/categories/Android/onConfigurationChanged/"},{"name":"Http","slug":"Android/Http","link":"/categories/Android/Http/"},{"name":"MQTT","slug":"Android/MQTT","link":"/categories/Android/MQTT/"},{"name":"Ethernet","slug":"Android/Ethernet","link":"/categories/Android/Ethernet/"},{"name":"NavigationBar","slug":"Android/NavigationBar","link":"/categories/Android/NavigationBar/"},{"name":"GifImageView","slug":"Android/GifImageView","link":"/categories/Android/GifImageView/"},{"name":"Autofill","slug":"Android/Autofill","link":"/categories/Android/Autofill/"},{"name":"TextView","slug":"Android/TextView","link":"/categories/Android/TextView/"},{"name":"XCode","slug":"iOS/XCode","link":"/categories/iOS/XCode/"},{"name":"Z-Order","slug":"iOS/Z-Order","link":"/categories/iOS/Z-Order/"},{"name":"StatusBar","slug":"iOS/StatusBar","link":"/categories/iOS/StatusBar/"},{"name":"Error","slug":"iOS/Error","link":"/categories/iOS/Error/"},{"name":"Alamofire","slug":"iOS/Alamofire","link":"/categories/iOS/Alamofire/"},{"name":"Escaping","slug":"iOS/Escaping","link":"/categories/iOS/Escaping/"},{"name":"BenQ","slug":"BenQ","link":"/categories/BenQ/"},{"name":"SQL","slug":"SQL","link":"/categories/SQL/"},{"name":"Java Script","slug":"Java-Script","link":"/categories/Java-Script/"},{"name":"Google","slug":"Google","link":"/categories/Google/"},{"name":"APNs","slug":"iOS/APNs","link":"/categories/iOS/APNs/"},{"name":"XCode","slug":"XCode","link":"/categories/XCode/"},{"name":"Qisda","slug":"Qisda","link":"/categories/Qisda/"},{"name":"System Page","slug":"iOS/System-Page","link":"/categories/iOS/System-Page/"},{"name":"Crash","slug":"iOS/Crash","link":"/categories/iOS/Crash/"},{"name":"Object-C","slug":"Object-C","link":"/categories/Object-C/"},{"name":"Backetball","slug":"Backetball","link":"/categories/Backetball/"},{"name":"Icarus","slug":"Hexo/Icarus","link":"/categories/Hexo/Icarus/"},{"name":"Gaia","slug":"BenQ/Gaia","link":"/categories/BenQ/Gaia/"},{"name":"Visual Studio","slug":"SQL/Visual-Studio","link":"/categories/SQL/Visual-Studio/"},{"name":"SSO","slug":"Google/SSO","link":"/categories/Google/SSO/"},{"name":"ITG","slug":"Qisda/ITG","link":"/categories/Qisda/ITG/"}]}